From 489d369359963a538b2cddf3433f132d621c33ea Mon Sep 17 00:00:00 2001
From: Nick Sarnie <commendsarnex@gmail.com>
Date: Tue, 12 Jul 2016 21:09:07 -0400
Subject: Wine-d3d9

---
 configure.ac                    |  194 ++
 configure.ac.orig               | 3780 +++++++++++++++++++++++++++++++++++++++
 dlls/d3d9-nine/Makefile.in      |   14 +
 dlls/d3d9-nine/d3d9-nine.spec   |   14 +
 dlls/d3d9-nine/d3d9_main.c      |  164 ++
 dlls/d3d9-nine/d3dadapter9.c    |  874 +++++++++
 dlls/d3d9-nine/d3dadapter9.h    |   30 +
 dlls/d3d9-nine/device_wrap.c    |  502 ++++++
 dlls/d3d9-nine/device_wrap.h    |   26 +
 dlls/d3d9-nine/dri3.c           | 1358 ++++++++++++++
 dlls/d3d9-nine/dri3.h           |  101 ++
 dlls/d3d9-nine/libd3d9-nine.def |   16 +
 dlls/d3d9-nine/present.c        | 1333 ++++++++++++++
 dlls/d3d9-nine/present.h        |   38 +
 dlls/d3d9-nine/version.rc       |   26 +
 dlls/d3d9-nine/wndproc.c        |  277 +++
 dlls/d3d9-nine/wndproc.h        |   41 +
 dlls/d3d9/Makefile.in           |    2 +-
 dlls/winex11.drv/init.c         |    1 +
 dlls/winex11.drv/x11drv.h       |    1 +
 include/config.h.in             |   12 +
 21 files changed, 8803 insertions(+), 1 deletion(-)
 create mode 100644 configure.ac.orig
 create mode 100644 dlls/d3d9-nine/Makefile.in
 create mode 100644 dlls/d3d9-nine/d3d9-nine.spec
 create mode 100644 dlls/d3d9-nine/d3d9_main.c
 create mode 100644 dlls/d3d9-nine/d3dadapter9.c
 create mode 100644 dlls/d3d9-nine/d3dadapter9.h
 create mode 100644 dlls/d3d9-nine/device_wrap.c
 create mode 100644 dlls/d3d9-nine/device_wrap.h
 create mode 100644 dlls/d3d9-nine/dri3.c
 create mode 100644 dlls/d3d9-nine/dri3.h
 create mode 100644 dlls/d3d9-nine/libd3d9-nine.def
 create mode 100644 dlls/d3d9-nine/present.c
 create mode 100644 dlls/d3d9-nine/present.h
 create mode 100644 dlls/d3d9-nine/version.rc
 create mode 100644 dlls/d3d9-nine/wndproc.c
 create mode 100644 dlls/d3d9-nine/wndproc.h

diff --git a/configure.ac b/configure.ac
index 8fa4916..850e237 100644
--- a/configure.ac
+++ b/configure.ac
@@ -66,6 +66,8 @@ AC_ARG_WITH(openal,    AS_HELP_STRING([--without-openal],[do not use OpenAL]),
 AC_ARG_WITH(opencl,    AS_HELP_STRING([--without-opencl],[do not use OpenCL]),
             [if test "x$withval" = "xno"; then ac_cv_header_CL_cl_h=no; ac_cv_header_OpenCL_opencl_h=no; fi])
 AC_ARG_WITH(opengl,    AS_HELP_STRING([--without-opengl],[do not use OpenGL]))
+AC_ARG_WITH(d3dadapter,AS_HELP_STRING([--without-d3dadapter],[do not use native Direct3D]))
+AC_ARG_WITH(d3dadapter-dri2-fallback, AS_HELP_STRING([--without-d3dadapter-dri2-fallback],[add a DRI2 fallback to d3dadapter DRI3 code]))
 AC_ARG_WITH(osmesa,     AS_HELP_STRING([--without-osmesa],[do not use the OSMesa library]))
 AC_ARG_WITH(oss,       AS_HELP_STRING([--without-oss],[do not use the OSS sound support]))
 AC_ARG_WITH(pcap,      AS_HELP_STRING([--without-pcap],[do not use the Packet Capture library]),
@@ -385,6 +387,8 @@ AC_CHECK_LIB(ossaudio,_oss_ioctl)
 
 AC_SUBST(OPENGL_LIBS,"")
 
+AC_SUBST(D3DADAPTER9_LIBS,"")
+
 dnl **** Check for header files ****
 
 AC_SYS_LARGEFILE()
@@ -1205,6 +1209,195 @@ OpenGL and Direct3D won't be supported.])
     WINE_NOTICE_WITH(va,[test "x$ac_cv_lib_soname_va" = "x" -o "x$ac_cv_lib_soname_va_x11" = "x" -o "x$ac_cv_lib_soname_va_drm" = "x"],
                      [libva ${notice_platform}development files not found, GPU video acceleration won't be supported.])
 
+    dnl Check for d3dadapter
+    if test "x$with_d3dadapter" != "xno"
+    then
+         AC_DEFINE(SONAME_D3DADAPTER9, ["d3dadapter9.so.1"], ["temporary hack"])
+         D3D_MODULE_DIR=`pkg-config --variable=moduledir d3d`
+         CPPFLAGSBAK=$CPPFLAGS
+         # link against libdl
+         CPPFLAGS="$CPPFLAGS -Wl,--no-as-needed -ldl"
+       
+         ac_cv_c_dlopen_d3dadapter=""
+         AC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <dlfcn.h>
+#include <stdlib.h>]],[[void *handle = dlopen("${D3D_MODULE_DIR}" "/" SONAME_D3DADAPTER9, RTLD_GLOBAL | RTLD_NOW);
+exit((handle && dlsym(handle, "D3DAdapter9GetProc")) ? 0 : 1)]])],
+             [ac_cv_c_dlopen_d3dadapter=yes],[ac_cv_c_dlopen_d3dadapter=no])
+         if test "x$ac_cv_c_dlopen_d3dadapter" != "xyes"
+         then
+             echo "d3dadapter9.so.1 not found in '$D3D_MODULE_DIR'";
+             # workaround for pkg-config cross-compilation
+             # search for module in known folders
+             for D3D_MODULE_DIR in `$CC -Xlinker --verbose 2>/dev/null | grep SEARCH`
+             do
+                 D3D_MODULE_DIR="`echo \"$D3D_MODULE_DIR\" | sed 's/SEARCH_DIR("//g;s/\/");/\/d3d/g;s/");/\/d3d/g'`"
+                 ac_cv_c_dlopen_d3dadapter=""
+                 AC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <dlfcn.h>
+#include <stdlib.h>]],[[void *handle = dlopen("${D3D_MODULE_DIR}" "/" SONAME_D3DADAPTER9, RTLD_GLOBAL | RTLD_NOW);
+exit((handle && dlsym(handle, "D3DAdapter9GetProc")) ? 0 : 1)]])],
+                     [echo "d3dadapter9.so.1 found in '$D3D_MODULE_DIR'";ac_cv_c_dlopen_d3dadapter=yes],
+                     [echo "d3dadapter9.so.1 not found in '$D3D_MODULE_DIR'";ac_cv_c_dlopen_d3dadapter=no])
+                 if test "x$ac_cv_c_dlopen_d3dadapter" = xyes
+                 then
+                     break
+                 fi
+             done
+         fi
+         AC_DEFINE_UNQUOTED(D3D_MODULE_DIR, ["`echo ${D3D_MODULE_DIR}`"], ["module dir"])
+         WINE_NOTICE_WITH(d3dadapter,[test "x$ac_cv_c_dlopen_d3dadapter" = xno],
+                 [d3dadapter9.so.1 module not found, Gallium Nine won't be supported.])
+
+         CPPFLAGS=$CPPFLAGSBAK
+         D3D_CFLAGS="`pkg-config --cflags d3d`"
+         # d3dadapter9.h includes D3D9.h, that relies on non existant headers
+         # the headers are generated by widl after running this script...
+         # hack around by using forward declarations
+         CPPFLAGS="$CPPFLAGS $D3D_CFLAGS -DWINAPI= -D_D3DADAPTER_PRESENT_H_"
+         AC_CHECK_HEADERS([d3dadapter9.h],[],[],[[
+typedef int DWORD;
+typedef int HWND;
+typedef int BOOL;
+typedef int UINT;
+typedef int HRESULT;
+typedef int ULONG;
+typedef struct ID3DPresent ID3DPresent;
+typedef struct ID3DPresentGroup ID3DPresentGroup;
+typedef struct ID3DAdapter9 ID3DAdapter9;
+typedef struct D3DWindowBuffer D3DWindowBuffer;
+typedef struct D3DADAPTER_IDENTIFIER9 D3DADAPTER_IDENTIFIER9;
+typedef struct D3DDEVTYPE D3DDEVTYPE;
+typedef struct D3DRESOURCETYPE D3DRESOURCETYPE;
+typedef struct D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_TYPE;
+typedef struct D3DFORMAT D3DFORMAT;
+typedef struct D3DCAPS9 D3DCAPS9;
+typedef struct IDirect3DDevice9 IDirect3DDevice9;
+typedef struct IDirect3DDevice9Ex IDirect3DDevice9Ex;
+typedef struct IDirect3D9 IDirect3D9;
+typedef struct D3DPRESENT_PARAMETERS D3DPRESENT_PARAMETERS;
+typedef struct D3DDISPLAYMODEEX D3DDISPLAYMODEEX;
+typedef struct IDirect3D9Ex IDirect3D9Ex;
+typedef struct REFIID REFIID;
+]])
+         CPPFLAGS=$CPPFLAGSBAK
+         # pkg-config doesn't support cross-compilation. remove once fixed.
+         if test "x$ac_cv_header_d3dadapter9_h" != xyes
+         then
+             # hardcode path if header isn't found
+             # TODO: use environment var here ?
+             D3D_CFLAGS="-I/usr/include/d3dadapter/"
+             CPPFLAGS="$CPPFLAGS $D3D_CFLAGS -DWINAPI= -D_D3DADAPTER_PRESENT_H_"
+             # clear autoconf cache
+             AS_UNSET([ac_cv_header_d3dadapter9_h])
+         fi
+         AC_SUBST(D3D_CFLAGS)
+
+         D3DADAPTER9_LIBS=""
+         D3DADAPTER9_LIBS_NOT_FOUND=""
+         D3DADAPTER9_HEADER_NOT_FOUND=""
+
+         AC_CHECK_HEADERS([d3dadapter9.h],[],[],[[
+typedef int DWORD;
+typedef int HWND;
+typedef int BOOL;
+typedef int UINT;
+typedef int HRESULT;
+typedef int ULONG;
+typedef struct ID3DPresent ID3DPresent;
+typedef struct ID3DPresentGroup ID3DPresentGroup;
+typedef struct ID3DAdapter9 ID3DAdapter9;
+typedef struct D3DWindowBuffer D3DWindowBuffer;
+typedef struct D3DADAPTER_IDENTIFIER9 D3DADAPTER_IDENTIFIER9;
+typedef struct D3DDEVTYPE D3DDEVTYPE;
+typedef struct D3DRESOURCETYPE D3DRESOURCETYPE;
+typedef struct D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_TYPE;
+typedef struct D3DFORMAT D3DFORMAT;
+typedef struct D3DCAPS9 D3DCAPS9;
+typedef struct IDirect3DDevice9 IDirect3DDevice9;
+typedef struct IDirect3DDevice9Ex IDirect3DDevice9Ex;
+typedef struct IDirect3D9 IDirect3D9;
+typedef struct D3DPRESENT_PARAMETERS D3DPRESENT_PARAMETERS;
+typedef struct D3DDISPLAYMODEEX D3DDISPLAYMODEEX;
+typedef struct IDirect3D9Ex IDirect3D9Ex;
+typedef struct REFIID REFIID;
+]])
+         CPPFLAGS=$CPPFLAGSBAK
+         AC_CHECK_HEADERS([X11/Xlib-xcb.h xcb/dri3.h xcb/present.h X11/Xutil.h X11/Xlib.h pthread.h])
+         test "x$ac_cv_header_d3dadapter9_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="d3dadapter9.h "
+         test "x$ac_cv_header_X11_Xlib_xcb_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}X11/Xlib-xcb.h "
+         test "x$ac_cv_header_xcb_dri3_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}xcb/dri3.h "
+         test "x$ac_cv_header_xcb_present_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}xcb/present.h "
+         test "x$ac_cv_header_X11_Xutil_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}X11/Xutil.h "
+         test "x$ac_cv_header_X11_Xlib_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}X11/Xlib.h "
+         test "x$ac_cv_header_pthread_h" != xyes && D3DADAPTER9_HEADER_NOT_FOUND="${D3DADAPTER9_HEADER_NOT_FOUND}pthread.h "
+         WINE_NOTICE_WITH(d3dadapter,[test "x$D3DADAPTER9_HEADER_NOT_FOUND" != x],
+                 [$D3DADAPTER9_HEADER_NOT_FOUND header not found, Gallium Nine won't be supported.])
+
+         AC_CHECK_LIB(xcb,xcb_request_check,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lxcb"])])
+         test "x$ac_cv_lib_xcb_xcb_request_check" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="libxcb "
+         AC_CHECK_LIB(xcb-dri3,xcb_dri3_open,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lxcb-dri3"])])
+         test "x$ac_cv_lib_xcb_dri3_xcb_dri3_open" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libxcb-dri3 "
+         AC_CHECK_LIB(xcb-present,xcb_present_notify_msc,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lxcb-present"])])
+         test "x$ac_cv_lib_xcb_present_xcb_present_notify_msc" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libxcb-present "
+         AC_CHECK_LIB(xcb-xfixes,xcb_xfixes_create_region,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lxcb-xfixes"])])
+         test "x$ac_cv_lib_xcb_xfixes_xcb_xfixes_create_region" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libxcb-xfixes "
+         AC_CHECK_LIB(X11-xcb,XGetXCBConnection,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lX11-xcb"])])
+         test "x$ac_cv_lib_X11_xcb_XGetXCBConnection" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libX11-xcb "
+         AC_CHECK_LIB(X11,XOpenDisplay,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lX11"])])
+         test "x$ac_cv_lib_X11_XOpenDisplay" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libX11 "
+         AC_CHECK_LIB(Xext,XextRemoveDisplay,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lXext"])])
+         test "x$ac_cv_lib_Xext_XextRemoveDisplay" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libXext "
+         AC_CHECK_LIB(pthread,pthread_mutex_lock,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lpthread"])])
+         test "x$ac_cv_lib_pthread_pthread_mutex_lock" != xyes && D3DADAPTER9_LIBS_NOT_FOUND="${D3DADAPTER9_LIBS_NOT_FOUND}libpthread "
+
+         if test "x$with_d3dadapter_dri2_fallback" != "xno"
+         then
+             D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND=""
+             D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND=""
+             AC_CHECK_LIB(GL,glGenFramebuffers,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lGL"])])
+             test "x$ac_cv_lib_GL_glGenFramebuffers" != xyes && D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND="libGL "
+             AC_CHECK_LIB(EGL,eglCreateContext,[AC_SUBST(D3DADAPTER9_LIBS,["$D3DADAPTER9_LIBS -lEGL"])])
+             test "x$ac_cv_lib_EGL_eglCreateContext" != xyes && D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND="${D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND}libEGL"
+
+             AC_CHECK_HEADERS([X11/Xmd.h X11/Xlibint.h X11/extensions/dri2tokens.h X11/extensions/dri2proto.h X11/extensions/extutil.h GL/gl.h GL/glext.h EGL/egl.h EGL/eglext.h libdrm/drm_fourcc.h libdrm/drm.h],
+                     [],[],[[
+#include <X11/Xlibint.h>
+#include <X11/extensions/dri2tokens.h>
+#include <GL/gl.h>
+#include <EGL/egl.h>
+]])
+             test "x$ac_cv_header_X11_Xmd_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}X11/Xmd.h "
+             test "x$ac_cv_header_X11_Xlibint_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}X11/Xlibint.h "
+             test "x$ac_cv_header_X11_extensions_dri2tokens_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}X11/extensions/dri2tokens.h "
+             test "x$ac_cv_header_X11_extensions_dri2proto_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}X11/extensions/dri2proto.h "
+             test "x$ac_cv_header_X11_extensions_extutil_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}X11/extensions/extutil.h "
+             test "x$ac_cv_header_GL_gl_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}GL/gl.h "
+             test "x$ac_cv_header_GL_glext_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}GL/glext.h "
+             test "x$ac_cv_header_EGL_egl_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}EGL/egl.h "
+             test "x$ac_cv_header_EGL_eglext_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}EGL/eglext.h "
+             test "x$ac_cv_header_libdrm_drm_fourcc_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}libdrm/drm_fourcc.h "
+             test "x$ac_cv_header_libdrm_drm_h" != xyes && D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND="${D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND}libdrm/drm.h "
+
+             if test "x$D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND" = x -a "x$D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND" = x
+             then
+                 AC_DEFINE(D3DADAPTER9_DRI2, 1, [Whether d3dadapter9 DRI2 fallback is compiled])
+             fi
+             WINE_NOTICE_WITH(d3dadapter_dri2_fallback,[test "x$D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND" != x],
+                     [$D3DADAPTER9_FALLBACK_LIBS_NOT_FOUND ${notice_platform}development files not found, Gallium Nine DRI2 fallback won't be supported.])
+             WINE_NOTICE_WITH(d3dadapter_dri2_fallback,[test "x$D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND" != x],
+                     [$D3DADAPTER9_FALLBACK_HEADERS_NOT_FOUND headers not found, Gallium Nine DRI2 fallback won't be supported.])
+         fi
+
+         test "x$D3DADAPTER9_LIBS_NOT_FOUND" != "x" && \
+             "x$D3DADAPTER9_HEADER_NOT_FOUND" != x && \
+             "x$ac_cv_c_dlopen_d3dadapter" != xyes && \
+             enable_d3d9_nine=${enable_d3d9_nine:-no}
+         WINE_NOTICE_WITH(d3dadapter,[test "x$D3DADAPTER9_LIBS_NOT_FOUND" != "x"],
+                 [$D3DADAPTER9_LIBS_NOT_FOUND ${notice_platform}development files not found, Gallium Nine won't be supported.])
+    else
+        enable_d3d9_nine=${enable_d3d9_nine:-no}
+        D3D_CFLAGS=""
+    fi
+
     CPPFLAGS="$ac_save_CPPFLAGS"
 else
     X_CFLAGS=""
@@ -2899,6 +3092,7 @@ WINE_CONFIG_DLL(d3d8,,[implib])
 WINE_CONFIG_TEST(dlls/d3d8/tests)
 WINE_CONFIG_DLL(d3d9,,[implib])
 WINE_CONFIG_TEST(dlls/d3d9/tests)
+WINE_CONFIG_DLL(d3d9-nine,,[implib])
 WINE_CONFIG_DLL(d3dcompiler_33)
 WINE_CONFIG_DLL(d3dcompiler_34)
 WINE_CONFIG_DLL(d3dcompiler_35)
diff --git a/configure.ac.orig b/configure.ac.orig
new file mode 100644
index 0000000..8fa4916
--- /dev/null
+++ b/configure.ac.orig
@@ -0,0 +1,3780 @@
+dnl Process this file with autoconf to produce a configure script.
+dnl Original author: Michael Patra
+dnl For detailed change history, see the git commit logs.
+
+m4_define(WINE_VERSION,regexp(m4_include(VERSION),[version \([-.0-9A-Za-z]+\)],[\1]))
+
+dnl autoconf versions before 2.62 don't handle source dir symlinks correctly
+AC_PREREQ(2.62)
+AC_INIT([Wine],[WINE_VERSION],[wine-devel@winehq.org],[wine],[http://www.winehq.org])
+AC_CONFIG_SRCDIR(server/atom.c)
+AC_CONFIG_HEADERS(include/config.h)
+AC_CONFIG_AUX_DIR(tools)
+
+libwine_version="1.0"
+
+dnl autoconf versions before 2.63b don't have AS_VAR_APPEND or AS_VAR_IF
+m4_ifdef([AS_VAR_APPEND],,[as_fn_append () { eval $[1]=\$$[1]\$[2]; }
+AC_DEFUN([AS_VAR_APPEND],[as_fn_append $1 $2])])dnl
+m4_ifdef([AS_VAR_IF],,[AC_DEFUN([AS_VAR_IF],
+[AS_LITERAL_IF([$1],
+  [AS_IF([test "x$$1" = x""$2], [$3], [$4])],
+  [eval as_val=\$$1
+   AS_IF([test "x$as_val" = x""$2], [$3], [$4])])])])dnl
+dnl autoconf versions before 2.64 don't have AC_PACKAGE_URL
+m4_ifdef([AC_PACKAGE_URL],,
+  [AC_DEFINE([PACKAGE_URL], ["http://www.winehq.org"], [Define to the home page for this package.])
+   AC_SUBST([PACKAGE_URL], ["http://www.winehq.org"])])dnl
+
+dnl **** Command-line arguments ****
+
+AC_ARG_ENABLE(win16, AS_HELP_STRING([--disable-win16],[do not include Win16 support]))
+AC_ARG_ENABLE(win64, AS_HELP_STRING([--enable-win64],[build a Win64 emulator on AMD64 (won't run Win32 binaries)]))
+AC_ARG_ENABLE(tests, AS_HELP_STRING([--disable-tests],[do not build the regression tests]))
+AC_ARG_ENABLE(maintainer-mode, AS_HELP_STRING([--enable-maintainer-mode],[enable maintainer-specific build rules]))
+
+AC_ARG_WITH(alsa,      AS_HELP_STRING([--without-alsa],[do not use the Alsa sound support]),
+            [if test "x$withval" = "xno"; then ac_cv_header_sys_asoundlib_h=no; ac_cv_header_alsa_asoundlib_h=no; fi])
+AC_ARG_WITH(capi,      AS_HELP_STRING([--without-capi],[do not use CAPI (ISDN support)]))
+AC_ARG_WITH(cms,       AS_HELP_STRING([--without-cms],[do not use CMS (color management support)]))
+AC_ARG_WITH(coreaudio, AS_HELP_STRING([--without-coreaudio],[do not use the CoreAudio sound support]),
+            [if test "x$withval" = "xno"; then ac_cv_header_CoreAudio_CoreAudio_h=no; fi])
+AC_ARG_WITH(cups,      AS_HELP_STRING([--without-cups],[do not use CUPS]))
+AC_ARG_WITH(curses,    AS_HELP_STRING([--without-curses],[do not use (n)curses]),
+            [if test "x$withval" = "xno"; then ac_cv_header_ncurses_h=no; ac_cv_header_curses_h=no; fi])
+AC_ARG_WITH(dbus,      AS_HELP_STRING([--without-dbus],[do not use DBus (dynamic device support)]))
+AC_ARG_WITH(fontconfig,AS_HELP_STRING([--without-fontconfig],[do not use fontconfig]))
+AC_ARG_WITH(freetype,  AS_HELP_STRING([--without-freetype],[do not use the FreeType library]))
+AC_ARG_WITH(gettext,   AS_HELP_STRING([--without-gettext],[do not use gettext]))
+AC_ARG_WITH(gettextpo, AS_HELP_STRING([--with-gettextpo],[use the GetTextPO library to rebuild po files]),
+            [if test "x$withval" = "xno"; then ac_cv_header_gettext_po_h=no; fi])
+AC_ARG_WITH(gphoto,    AS_HELP_STRING([--without-gphoto],[do not use gphoto (Digital Camera support)]))
+AC_ARG_WITH(glu,       AS_HELP_STRING([--without-glu],[do not use the GLU library]))
+AC_ARG_WITH(gnutls,    AS_HELP_STRING([--without-gnutls],[do not use GnuTLS (schannel support)]))
+AC_ARG_WITH(gsm,       AS_HELP_STRING([--without-gsm],[do not use libgsm (GSM 06.10 codec support)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_gsm_h=no; ac_cv_header_gsm_gsm_h=no; fi])
+AC_ARG_WITH(gstreamer, AS_HELP_STRING([--without-gstreamer],[do not use GStreamer (codecs support)]))
+AC_ARG_WITH(gtk3,      AS_HELP_STRING([--without-gtk3],[do not use gtk3 (gtk3 theming support)]))
+AC_ARG_WITH(hal,       AS_HELP_STRING([--without-hal],[do not use HAL (dynamic device support)]))
+AC_ARG_WITH(jpeg,      AS_HELP_STRING([--without-jpeg],[do not use JPEG]))
+AC_ARG_WITH(ldap,      AS_HELP_STRING([--without-ldap],[do not use LDAP]),
+            [if test "x$withval" = "xno"; then ac_cv_header_ldap_h=no; ac_cv_header_lber_h=no; fi])
+AC_ARG_WITH(mpg123,    AS_HELP_STRING([--without-mpg123],[do not use the mpg123 library]))
+AC_ARG_WITH(netapi,    AS_HELP_STRING([--without-netapi],[do not use the Samba NetAPI library]))
+AC_ARG_WITH(openal,    AS_HELP_STRING([--without-openal],[do not use OpenAL]),
+            [if test "x$withval" = "xno"; then ac_cv_header_AL_al_h=no; ac_cv_header_OpenAL_al_h=no; fi])
+AC_ARG_WITH(opencl,    AS_HELP_STRING([--without-opencl],[do not use OpenCL]),
+            [if test "x$withval" = "xno"; then ac_cv_header_CL_cl_h=no; ac_cv_header_OpenCL_opencl_h=no; fi])
+AC_ARG_WITH(opengl,    AS_HELP_STRING([--without-opengl],[do not use OpenGL]))
+AC_ARG_WITH(osmesa,     AS_HELP_STRING([--without-osmesa],[do not use the OSMesa library]))
+AC_ARG_WITH(oss,       AS_HELP_STRING([--without-oss],[do not use the OSS sound support]))
+AC_ARG_WITH(pcap,      AS_HELP_STRING([--without-pcap],[do not use the Packet Capture library]),
+            [if test "x$withval" = "xno"; then ac_cv_header_pcap_pcap_h=no; fi])
+AC_ARG_WITH(png,       AS_HELP_STRING([--without-png],[do not use PNG]))
+AC_ARG_WITH(pthread,   AS_HELP_STRING([--without-pthread],[do not use the pthread library]),
+            [if test "x$withval" = "xno"; then ac_cv_header_pthread_h=no; fi])
+AC_ARG_WITH(pulse,     AS_HELP_STRING([--without-pulse],[do not use PulseAudio sound support]))
+AC_ARG_WITH(sane,      AS_HELP_STRING([--without-sane],[do not use SANE (scanner support)]))
+AC_ARG_WITH(tiff,      AS_HELP_STRING([--without-tiff],[do not use TIFF]))
+AC_ARG_WITH(v4l,       AS_HELP_STRING([--without-v4l],[do not use v4l1 (v4l support)]))
+AC_ARG_WITH(xattr,     AS_HELP_STRING([--without-xattr],[do not use xattr (security attributes support)]))
+AC_ARG_WITH(xcomposite,AS_HELP_STRING([--without-xcomposite],[do not use the Xcomposite extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xcomposite_h=no; fi])
+AC_ARG_WITH(xcursor,   AS_HELP_STRING([--without-xcursor],[do not use the Xcursor extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_Xcursor_Xcursor_h=no; fi])
+AC_ARG_WITH(xcb,       AS_HELP_STRING([--without-xcb],[do not use X11 XCB extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_Xlib_xcb_h=no; fi])
+AC_ARG_WITH(xinerama,  AS_HELP_STRING([--without-xinerama],[do not use Xinerama (multi-monitor support)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xinerama_h=no; fi])
+AC_ARG_WITH(xinput,    AS_HELP_STRING([--without-xinput],[do not use the Xinput extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_XInput_h=no; fi])
+AC_ARG_WITH(xinput2,   AS_HELP_STRING([--without-xinput2],[do not use the Xinput 2 extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_XInput2_h=no; fi])
+AC_ARG_WITH(xml,       AS_HELP_STRING([--without-xml],[do not use XML]))
+AC_ARG_WITH(xrandr,    AS_HELP_STRING([--without-xrandr],[do not use Xrandr (resolution changes)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xrandr_h=no; fi])
+AC_ARG_WITH(xrender,   AS_HELP_STRING([--without-xrender],[do not use the Xrender extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xrender_h=no; fi])
+AC_ARG_WITH(xshape,    AS_HELP_STRING([--without-xshape],[do not use the Xshape extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_shape_h=no; fi])
+AC_ARG_WITH(xshm,      AS_HELP_STRING([--without-xshm],[do not use XShm (shared memory extension)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_XShm_h=no; fi])
+AC_ARG_WITH(xslt,      AS_HELP_STRING([--without-xslt],[do not use XSLT]))
+AC_ARG_WITH(xxf86vm,   AS_HELP_STRING([--without-xxf86vm],[do not use XFree video mode extension]),
+            [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_xf86vmode_h=no; ac_cv_header_X11_extensions_xf86vmproto_h=no; fi])
+AC_ARG_WITH(zlib,      AS_HELP_STRING([--without-zlib],[do not use Zlib (data compression)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_zlib_h=no; fi])
+AC_ARG_WITH(va,        AS_HELP_STRING([--without-va],[do not use VA (GPU video acceleration)]),
+            [if test "x$withval" = "xno"; then ac_cv_header_va_va_x11_h=no; fi])
+
+AC_ARG_WITH(wine-tools,AS_HELP_STRING([--with-wine-tools=DIR],[use Wine tools from directory DIR]))
+AC_ARG_WITH(wine64,    AS_HELP_STRING([--with-wine64=DIR],[use the 64-bit Wine in DIR for a Wow64 build]))
+
+AC_CANONICAL_HOST
+
+dnl check for out of tree build with unclean source tree
+case "$srcdir" in
+ .) ;;
+ *) if test -f "$srcdir/Makefile" -o -f "$srcdir/include/config.h"; then
+      AC_MSG_ERROR([you are building out of the source tree, but the source tree contains object files.
+You need to run 'make distclean' in the source tree first.])
+    fi ;;
+esac
+
+dnl **** Check for some programs ****
+
+AC_PROG_MAKE_SET
+AC_PROG_CC
+AC_PROG_CXX
+dnl We can't use AC_PROG_CPP for winegcc, it uses by default $(CC) -E
+AC_CHECK_TOOL(CPPBIN,cpp,cpp)
+AC_DEFINE_UNQUOTED(EXEEXT,["$ac_exeext"],[Define to the file extension for executables.])
+AC_CHECK_TOOL(LD,ld)
+
+case $host in
+  *-darwin*)
+    with_fontconfig=${with_fontconfig:-no}
+    ;;
+  *-mingw32*|*-cygwin*)
+    enable_win16=${enable_win16:-no}
+    CFLAGS="$CFLAGS -D_WIN32"
+    ;;
+esac
+
+case $host in
+  x86_64*|amd64*)
+    if test "x$enable_win64" != "xyes" -a "$cross_compiling" != "yes"
+    then
+      CC="$CC -m32"
+      CXX="$CXX -m32"
+      AC_MSG_CHECKING([whether $CC works])
+      AC_LINK_IFELSE([AC_LANG_PROGRAM()],AC_MSG_RESULT([yes]),
+                     [AC_MSG_RESULT([no])
+                      AC_MSG_ERROR([Cannot build a 32-bit program, you need to install 32-bit development libraries.])])
+      host_cpu="i386"
+      notice_platform="32-bit "
+      AC_SUBST(TARGETFLAGS,"-m32")
+      enable_win16=${enable_win16:-yes}
+    else
+      if test "x${GCC}" = "xyes"
+      then
+        AC_MSG_CHECKING([whether $CC supports __builtin_ms_va_list])
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdarg.h>]], [[void func(__builtin_ms_va_list *args);]])],
+                          [AC_MSG_RESULT([yes])],
+                          [AC_MSG_RESULT([no])
+                           AC_MSG_ERROR([You need gcc >= 4.4 or clang >= 3.8 to build Wine as 64-bit.])])
+      fi
+      CC="$CC -m64"
+      CXX="$CXX -m64"
+      host_cpu="x86_64"
+      notice_platform="64-bit "
+      AC_SUBST(TARGETFLAGS,"-m64")
+    fi
+    ;;
+  arm*)
+    AC_MSG_CHECKING([whether $CC supports Thumb])
+    WINE_TRY_ASM_LINK([".thumb\nblx ac_test\n.arm"],[int ac_test(int i) { return i; }], [if (ac_test(1)) return 1],
+                      [AC_MSG_RESULT([yes])],
+                      [AC_MSG_RESULT([no])
+                       AC_MSG_ERROR([You need a target with Thumb support to build Wine for ARM.])])
+    CFLAGS="$CFLAGS -marm"
+    AC_SUBST(TARGETFLAGS,"-marm")
+    ;;
+  i[[3456789]]86*)
+    enable_win16=${enable_win16:-yes}
+    ;;
+esac
+
+dnl enable_win16 defaults to yes on x86, to no on other CPUs
+enable_win16=${enable_win16:-no}
+enable_win64=${enable_win64:-no}
+if test "x$enable_win64" != "xyes"
+then
+  enable_win32="yes"
+else
+  enable_win32="no"
+fi
+
+dnl Disable winetest too if tests are disabled
+enable_winetest=${enable_winetest:-$enable_tests}
+
+dnl Some special cases for the wow64 build
+if test -n "$with_wine64"
+then
+    if test "x$enable_win64" = "xyes"
+    then
+        AC_MSG_ERROR([--enable-win64 and --with-wine64 are mutually exclusive.
+--enable-win64 should be used in the 64-bit build tree, --with-wine64 in the 32-bit Wow64 build tree.])
+    fi
+    test "$srcdir" != . || AC_MSG_ERROR([--with-wine64 cannot be used when building inside the source tree.
+You should create a separate build directory and run configure from there.])
+    enable_fonts=${enable_fonts:-no}
+    enable_server=${enable_server:-no}
+elif test "x$enable_win64" = "xyes"
+then
+    test "x$libdir" != "x\${exec_prefix}/lib" || libdir="\${exec_prefix}/lib64"
+fi
+
+AC_CACHE_CHECK([for the directory containing the Wine tools], wine_cv_toolsdir,
+  [wine_cv_toolsdir="$with_wine_tools"
+   if test -z "$with_wine_tools"; then
+     if test "$cross_compiling" = "yes"; then
+       AC_MSG_ERROR([you must use the --with-wine-tools option when cross-compiling.])
+     elif test -n "$with_wine64"; then
+       wine_cv_toolsdir="$with_wine64"
+     fi
+   fi
+   if test -z "$wine_cv_toolsdir"; then
+     wine_makedep=tools/makedep
+     wine_cv_toolsdir="\$(top_builddir)"
+   elif test -d "$wine_cv_toolsdir/tools/winebuild"; then
+     wine_makedep=$wine_cv_toolsdir/tools/makedep
+     case "$wine_cv_toolsdir" in
+       /*) ;;
+       *)  wine_cv_toolsdir="\$(top_builddir)/$wine_cv_toolsdir" ;;
+     esac
+     enable_tools=${enable_tools:-no}
+     test -f "$wine_makedep" || AC_MSG_ERROR([the Wine tools have not yet been built in $wine_cv_toolsdir])
+   else
+     AC_MSG_ERROR([could not find Wine tools in $wine_cv_toolsdir])
+   fi])
+AC_SUBST(TOOLSDIR,$wine_cv_toolsdir)
+if test -n "$host_alias" -a "$host_alias" != "$build_alias"
+then
+    AC_SUBST(TARGETFLAGS,"-b $host_alias $TARGETFLAGS")
+fi
+
+dnl Check for flex
+AC_CHECK_PROGS(FLEX,flex,none)
+if test "$FLEX" = "none"
+then
+  AC_MSG_ERROR([no suitable flex found. Please install the 'flex' package.])
+fi
+AC_MSG_CHECKING([whether flex is recent enough])
+cat >conftest.l <<EOF
+%top{
+#include "prediluvian.h"
+}
+%%
+EOF
+if $FLEX -t conftest.l >/dev/null 2>&AS_MESSAGE_LOG_FD
+then
+  AC_MSG_RESULT([yes])
+else
+  AC_MSG_RESULT([no])
+  AC_MSG_ERROR([Your flex version is too old. Please install flex version 2.5.33 or newer.])
+fi
+
+dnl Check for bison
+AC_CHECK_PROGS(BISON,bison,none)
+if test "$BISON" = "none"
+then
+  AC_MSG_ERROR([no suitable bison found. Please install the 'bison' package.])
+fi
+
+AC_CHECK_TOOLS(AR,[ar gar],ar)
+AC_CHECK_TOOL(STRIP,strip,strip)
+AC_SUBST(ARFLAGS,rc)
+AC_PROG_RANLIB
+AC_PROG_LN_S
+AC_PROG_EGREP
+AC_PATH_PROG(LDCONFIG, ldconfig, true, [/sbin /usr/sbin $PATH])
+AC_CHECK_PROGS(MSGFMT, msgfmt, false)
+WINE_PATH_PKG_CONFIG
+
+if test "x$enable_maintainer_mode" != "xyes"
+then
+  FONTFORGE=""
+  RSVG=""
+  CONVERT=""
+  ICOTOOL=""
+else
+  test "$srcdir" = . || AC_MSG_ERROR([Maintainer mode cannot work out of tree.])
+  AC_CHECK_PROGS(FONTFORGE, fontforge, false)
+  AC_CHECK_PROGS(RSVG, rsvg-convert rsvg, false)
+  AC_CHECK_PROGS(CONVERT, convert, false)
+  AC_CHECK_PROGS(ICOTOOL, icotool, false)
+  test "$FONTFORGE" != "false" || AC_MSG_ERROR([You need fontforge to rebuild fonts in maintainer mode.])
+  test "$RSVG" != "false" || AC_MSG_ERROR([You need rsvg to rebuild icons in maintainer mode.])
+
+  dnl Check the imagemagick version
+  if test "$CONVERT" = false
+  then
+    AC_MSG_ERROR([You need imagemagick to rebuild icons in maintainer mode.])
+  else
+    AC_MSG_CHECKING([for recent enough imagemagick])
+    convert_version=`convert --version | head -n1`
+    if test "x$convert_version" != "x"
+    then
+      convert_version_major=`expr "$convert_version" : '.* \([[0-9]]*\)\.[[0-9]]*'`
+      convert_version_minor=`expr "$convert_version" : '.* [[0-9]]*\.\([[0-9]]*\)'`
+      if test "$convert_version_major" -eq 6 -a "$convert_version_minor" -lt 6
+      then
+        CONVERT=false
+      fi
+    fi
+    if test "$CONVERT" = false
+    then
+      AC_MSG_RESULT([no ($convert_version_major.$convert_version_minor)])
+      AC_MSG_ERROR([You need imagemagick version 6.6 or newer to rebuild icons in maintainer mode.])
+    else
+      AC_MSG_RESULT([yes ($convert_version_major.$convert_version_minor)])
+    fi
+  fi
+
+  dnl Check the icotool version
+  if test "$ICOTOOL" = false
+  then
+    AC_MSG_ERROR([You need icotool to rebuild icons in maintainer mode.])
+  else
+    AC_MSG_CHECKING([for recent enough icotool])
+    icotool_version=`icotool --version | head -n1`
+    if test "x$icotool_version" != "x"
+    then
+      icotool_version_major=`expr "$icotool_version" : '.* \([[0-9]]*\)\.[[0-9]]*'`
+      icotool_version_minor=`expr "$icotool_version" : '.* [[0-9]]*\.\([[0-9]]*\)'`
+      if test "$icotool_version_major" -eq 0 -a "$icotool_version_minor" -lt 29
+      then
+        ICOTOOL=false
+        WINE_WARNING([icotool version 0.29.0 or newer is needed to rebuild icons.])
+      fi
+    fi
+    if test "$ICOTOOL" = false
+    then
+      AC_MSG_RESULT([no ($icotool_version_major.$icotool_version_minor)])
+      AC_MSG_ERROR([You need icotool version 0.29.0 or newer to rebuild icons in maintainer mode.])
+    else
+      AC_MSG_RESULT([yes ($icotool_version_major.$icotool_version_minor)])
+    fi
+  fi
+
+  dnl Maintainer mode requires gettext
+  with_gettext=yes
+  with_gettextpo=yes
+  AS_UNSET(ac_cv_header_gettext_po_h)
+fi
+
+test "x$with_gettext" != xno || MSGFMT=false
+if test "$MSGFMT" != "false"
+then
+  AC_MSG_CHECKING([whether msgfmt supports contexts])
+  cat >conftest.po <<EOF
+# comment
+msgctxt "ctxt"
+msgid "id"
+msgstr "str"
+EOF
+  if $MSGFMT -o /dev/null conftest.po 2>&AS_MESSAGE_LOG_FD
+  then
+    AC_MSG_RESULT([yes])
+  else
+    AC_MSG_RESULT([no])
+    MSGFMT=false
+  fi
+fi
+WINE_WARNING_WITH(gettext,[test "$MSGFMT" = false],
+                  [gettext tools not found (or too old), translations won't be built.],
+                  [enable_po])
+
+dnl **** Check for some libraries ****
+
+dnl Check for -li386 for NetBSD and OpenBSD
+AC_CHECK_LIB(i386,i386_set_ldt)
+dnl Check for -lossaudio for NetBSD
+AC_CHECK_LIB(ossaudio,_oss_ioctl)
+
+AC_SUBST(OPENGL_LIBS,"")
+
+dnl **** Check for header files ****
+
+AC_SYS_LARGEFILE()
+
+AC_CHECK_HEADERS(\
+	AL/al.h \
+	ApplicationServices/ApplicationServices.h \
+	AudioToolbox/AudioConverter.h \
+	AudioUnit/AudioUnit.h \
+	AudioUnit/AudioComponent.h \
+	CL/cl.h \
+	Carbon/Carbon.h \
+	CommonCrypto/CommonDigest.h \
+	CoreAudio/CoreAudio.h \
+	CoreServices/CoreServices.h \
+	DiskArbitration/DiskArbitration.h \
+	IOKit/IOKitLib.h \
+	IOKit/hid/IOHIDLib.h \
+	OpenAL/al.h \
+	OpenCL/opencl.h \
+	QuickTime/ImageCompression.h \
+	Security/Security.h \
+	alias.h \
+	alsa/asoundlib.h \
+	arpa/inet.h \
+	arpa/nameser.h \
+	asm/types.h \
+	asm/user.h \
+	curses.h \
+	direct.h \
+	dirent.h \
+	dlfcn.h \
+	elf.h \
+	float.h \
+	fnmatch.h \
+	getopt.h \
+	gettext-po.h \
+	grp.h \
+	gsm.h \
+	gsm/gsm.h \
+	ieeefp.h \
+	inet/mib2.h \
+	io.h \
+	kstat.h \
+	lber.h \
+	ldap.h \
+	libproc.h \
+	link.h \
+	linux/cdrom.h \
+	linux/compiler.h \
+	linux/filter.h \
+	linux/hdreg.h \
+	linux/input.h \
+	linux/ioctl.h \
+	linux/joystick.h \
+	linux/major.h \
+	linux/param.h \
+	linux/serial.h \
+	linux/types.h \
+	linux/ucdrom.h \
+	lwp.h \
+	mach-o/nlist.h \
+	mach-o/loader.h \
+	mach/mach.h \
+	mach/machine.h \
+	machine/cpu.h \
+	machine/limits.h \
+	machine/sysarch.h \
+	mntent.h \
+	ncurses.h \
+	netdb.h \
+	netinet/in.h \
+	netinet/in_systm.h \
+	netinet/tcp.h \
+	netinet/tcp_fsm.h \
+	pcap/pcap.h \
+	poll.h \
+	port.h \
+	process.h \
+	pthread.h \
+	pwd.h \
+	sched.h \
+	scsi/scsi.h \
+	scsi/scsi_ioctl.h \
+	scsi/sg.h \
+	stdbool.h \
+	stdint.h \
+	stropts.h \
+	sys/asoundlib.h \
+	sys/attr.h \
+	sys/cdio.h \
+	sys/elf32.h \
+	sys/epoll.h \
+	sys/event.h \
+	sys/exec_elf.h \
+	sys/filio.h \
+	sys/inotify.h \
+	sys/ioctl.h \
+	sys/ipc.h \
+	sys/limits.h \
+	sys/link.h \
+	sys/mman.h \
+	sys/modem.h \
+	sys/msg.h \
+	sys/mtio.h \
+	sys/param.h \
+	sys/poll.h \
+	sys/prctl.h \
+	sys/protosw.h \
+	sys/ptrace.h \
+	sys/queue.h \
+	sys/resource.h \
+	sys/scsiio.h \
+	sys/shm.h \
+	sys/signal.h \
+	sys/socket.h \
+	sys/socketvar.h \
+	sys/sockio.h \
+	sys/statvfs.h \
+	sys/strtio.h \
+	sys/syscall.h \
+	sys/sysinfo.h \
+	sys/tihdr.h \
+	sys/time.h \
+	sys/timeout.h \
+	sys/times.h \
+	sys/uio.h \
+	sys/user.h \
+	sys/utsname.h \
+	sys/vm86.h \
+	sys/vnode.h \
+	sys/wait.h \
+	syscall.h \
+	termios.h \
+	unistd.h \
+	utime.h \
+	valgrind/memcheck.h \
+	valgrind/valgrind.h \
+	zlib.h
+)
+AC_HEADER_MAJOR()
+AC_HEADER_STAT()
+
+dnl **** Checks for headers that depend on other ones ****
+
+AC_CHECK_HEADERS([sys/mount.h sys/statfs.h sys/sysctl.h sys/user.h sys/vfs.h],,,
+    [#include <sys/types.h>
+     #ifdef HAVE_SYS_PARAM_H
+     # include <sys/param.h>
+     #endif])
+
+AC_CHECK_HEADERS(\
+	netinet/ip.h \
+	net/if.h \
+	net/if_arp.h \
+	net/if_dl.h \
+	net/if_types.h \
+	net/route.h \
+	netinet/if_ether.h \
+	netinet/if_inarp.h \
+	netinet/in_pcb.h \
+	netinet/ip_icmp.h \
+	netinet/ip_var.h \
+	netinet/udp.h \
+	netipx/ipx.h \
+	sys/un.h \
+,,,[#include <sys/types.h>
+     #ifdef HAVE_SYS_SOCKET_H
+     # include <sys/socket.h>
+     #endif
+     #ifdef HAVE_SYS_SOCKETVAR_H
+     # include <sys/socketvar.h>
+     #endif
+     #ifdef HAVE_NET_ROUTE_H
+     # include <net/route.h>
+     #endif
+     #ifdef HAVE_NETINET_IN_H
+     # include <netinet/in.h>
+     #endif
+     #ifdef HAVE_NETINET_IN_SYSTM_H
+     # include <netinet/in_systm.h>
+     #endif
+     #ifdef HAVE_NET_IF_H
+     # include <net/if.h>
+     #endif
+     #ifdef HAVE_NETINET_IP_H
+     # include <netinet/ip.h>
+     #endif])
+
+AC_CHECK_HEADERS([netinet/tcp_timer.h netinet/udp_var.h netinet/icmp_var.h netinet/tcp_var.h ],,,
+    [#include <sys/types.h>
+     #ifdef HAVE_ALIAS_H
+     # include <alias.h>
+     #endif
+     #ifdef HAVE_SYS_SOCKET_H
+     # include <sys/socket.h>
+     #endif
+     #ifdef HAVE_SYS_SOCKETVAR_H
+     # include <sys/socketvar.h>
+     #endif
+     #ifdef HAVE_SYS_TIMEOUT_H
+     # include <sys/timeout.h>
+     #endif
+     #ifdef HAVE_NETINET_IN_H
+     # include <netinet/in.h>
+     #endif
+     #ifdef HAVE_NETINET_IN_SYSTM_H
+     # include <netinet/in_systm.h>
+     #endif
+     #ifdef HAVE_NETINET_IP_H
+     # include <netinet/ip.h>
+     #endif
+     #ifdef HAVE_NETINET_IP_VAR_H
+     # include <netinet/ip_var.h>
+     #endif
+     #ifdef HAVE_NETINET_IP_ICMP_H
+     # include <netinet/ip_icmp.h>
+     #endif
+     #ifdef HAVE_NETINET_UDP_H
+     # include <netinet/udp.h>
+     #endif
+     #ifdef HAVE_NETINET_TCP_H
+     # include <netinet/tcp.h>
+     #endif
+     #ifdef HAVE_NETINET_TCP_TIMER_H
+     #include <netinet/tcp_timer.h>
+     #endif])
+
+AC_CHECK_HEADERS([linux/ipx.h linux/irda.h linux/rtnetlink.h],,,
+    [#include <sys/types.h>
+     #ifdef HAVE_ASM_TYPES_H
+     # include <asm/types.h>
+     #endif
+     #ifdef HAVE_SYS_SOCKET_H
+     # include <sys/socket.h>
+     #endif
+     #ifdef HAVE_LINUX_TYPES_H
+     # include <linux/types.h>
+     #endif])
+
+AC_CHECK_HEADERS([mach-o/dyld_images.h],,,
+    [#ifdef HAVE_STDBOOL_H
+     # include <stdbool.h>
+     #endif
+     #ifdef HAVE_STDINT_H
+     # include <stdint.h>
+     #endif])
+
+AC_CHECK_HEADERS([resolv.h],,,
+    [#include <sys/types.h>
+     #ifdef HAVE_SYS_SOCKET_H
+     # include <sys/socket.h>
+     #endif
+     #ifdef HAVE_NETINET_IN_H
+     # include <netinet/in.h>
+     #endif
+     #ifdef HAVE_ARPA_NAMESER_H
+     # include <arpa/nameser.h>
+     #endif])
+
+AC_CHECK_HEADERS([ifaddrs.h],,,[#include <sys/types.h>])
+
+AC_CHECK_HEADERS(sys/ucontext.h,,,[#include <signal.h>])
+
+AC_CHECK_HEADERS([sys/thr.h],,,
+[#include <sys/types.h>
+#ifdef HAVE_SYS_UCONTEXT_H
+#include <sys/ucontext.h>
+#endif])
+
+AC_CHECK_HEADERS([pthread_np.h],,,
+[#ifdef HAVE_PTHREAD_H
+#include <pthread.h>
+#endif])
+
+AC_CHECK_HEADERS([linux/videodev.h linux/videodev2.h libv4l1.h],,,
+[#ifdef HAVE_SYS_TIME_H
+#include <sys/time.h>
+#endif
+#include <sys/types.h>
+#ifdef HAVE_ASM_TYPES_H
+#include <asm/types.h>
+#endif])
+
+AC_CHECK_HEADERS([libprocstat.h],,,
+[#ifdef HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_QUEUE_H
+#include <sys/queue.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+#include <sys/socket.h>
+#endif])
+
+if test "x$with_xattr" != "xno"
+then
+    AC_CHECK_HEADERS(attr/xattr.h sys/extattr.h, [HAVE_XATTR=1])
+    AC_CHECK_HEADERS(sys/xattr.h, [HAVE_XATTR=1]
+        [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/xattr.h>]], [[getxattr("", "", "", 0, 0, 0);]])],
+            [AC_DEFINE(XATTR_ADDITIONAL_OPTIONS, 1, [Define if xattr functions take additional arguments (Mac OS X)])])])
+fi
+if test "x$with_xattr" = "xyes"
+then
+    WINE_ERROR_WITH(xattr,[test "x$HAVE_XATTR" = "x"],[xattr ${notice_platform}development files \
+not found. Wine will be built without extended attribute support, which probably isn't what you \
+want. You will need to install ${notice_platform}development packages of libattr at the very least.])
+fi
+
+dnl **** Check for working dll ****
+
+AC_SUBST(dlldir,"\${libdir}/wine")
+AC_SUBST(DLLFLAGS,"-D_REENTRANT")
+AC_SUBST(LDRPATH_INSTALL,"")
+AC_SUBST(LDRPATH_LOCAL,"")
+AC_SUBST(LDEXECFLAGS,"")
+LIBEXT="so"
+DLLEXT=".so"
+IMPLIBEXT="def"
+WINE_PATH_SONAME_TOOLS
+WINE_CONFIG_HELPERS
+
+wine_binary="wine"
+test "x$enable_win64" != "xyes" || wine_binary="wine64"
+AC_SUBST(WINELOADER_PROGRAMS,"$wine_binary")
+libwine_soversion=`expr $libwine_version : '\([[0-9]]*\)\..*'`
+
+case $host_os in
+  cygwin*|mingw32*)
+    AC_CHECK_TOOL(DLLTOOL,dlltool,false)
+    LIBEXT="dll"
+    DLLEXT=""
+    IMPLIBEXT="a"
+    dnl Disable modules that can't be used on Windows
+    enable_iphlpapi=${enable_iphlpapi:-no}
+    enable_kernel32=${enable_kernel32:-no}
+    enable_msvcrt=${enable_msvcrt:-no}
+    enable_ntdll=${enable_ntdll:-no}
+    enable_ws2_32=${enable_ws2_32:-no}
+    enable_loader=${enable_loader:-no}
+    enable_server=${enable_server:-no}
+    dnl Disable dependencies that are not useful on Windows
+    with_x=${with_x:-no}
+    with_pthread=${with_pthread:-no}
+
+    dnl Mingw needs explicit msvcrt for linking libwine and winsock for wininet
+    crtlibs=""
+    case $host_os in
+        mingw32*)
+          crtlibs="-lmsvcrt"
+          AC_SUBST(SOCKET_LIBS,"-lws2_32") ;;
+    esac
+
+    AC_SUBST(LIBWINE_SHAREDLIB,"libwine.dll")
+    AC_SUBST(LIBWINE_IMPORTLIB,"libwine.a")
+    AC_SUBST(LIBWINE_INSTALL_LIB,"libwine.dll")
+    AC_SUBST(LIBWINE_INSTALL_DEV,"libwine.a")
+    AC_SUBST(LIBWINE_LDFLAGS,"-shared \$(srcdir)/wine.def")
+    AC_SUBST(LIBWINE_DEPENDS,"wine.def")
+    ;;
+
+  darwin*|macosx*)
+    AC_CHECK_HEADERS(libunwind.h)
+    LIBEXT="dylib"
+    DLLFLAGS="$DLLFLAGS -fPIC"
+    LDRPATH_INSTALL="-Wl,-rpath,@loader_path/\`\$(MAKEDEP) -R \${bindir} \${libdir}\`"
+    LDRPATH_LOCAL="-Wl,-rpath,@loader_path/\$(top_builddir)/libs/wine"
+    dnl declare needed frameworks
+    AC_SUBST(COREFOUNDATION_LIBS,"-framework CoreFoundation")
+    AC_SUBST(IOKIT_LIBS,"-framework IOKit -framework CoreFoundation")
+    AC_SUBST(FORCEFEEDBACK_LIBS,"-framework ForceFeedback -framework CoreFoundation")
+    AC_SUBST(APPLICATIONSERVICES_LIBS,"-framework ApplicationServices")
+    AC_SUBST(CORESERVICES_LIBS,"-framework CoreServices")
+    AC_SUBST(APPKIT_LIBS,"-framework AppKit")
+    LDEXECFLAGS="-image_base 0x7bf00000 -Wl,-pagezero_size,0x1000,-segaddr,WINE_DOS,0x00001000,-segaddr,WINE_SHAREDHEAP,0x7f000000,-sectcreate,__TEXT,__info_plist,wine_info.plist"
+    WINE_TRY_CFLAGS([-Wl,-no_pie],
+                    [LDEXECFLAGS="-Wl,-no_pie $LDEXECFLAGS"])
+    if test "$ac_cv_header_DiskArbitration_DiskArbitration_h" = "yes"
+    then
+        dnl DiskArbitration API is not public on Darwin < 8.0, use it only if header found
+        AC_SUBST(DISKARBITRATION_LIBS,"-framework DiskArbitration -framework CoreFoundation")
+    fi
+    if test "$ac_cv_header_Security_Security_h" = "yes"
+    then
+        AC_SUBST(SECURITY_LIBS,"-framework Security -framework CoreFoundation")
+        dnl Check for the SSLCopyPeerCertificates function
+        ac_save_LIBS="$LIBS"
+        LIBS="$LIBS $SECURITY_LIBS"
+        AC_CHECK_FUNCS(SSLCopyPeerCertificates)
+        LIBS="$ac_save_LIBS"
+        with_gnutls=${with_gnutls:-no}
+    fi
+    if test "$ac_cv_header_CoreAudio_CoreAudio_h" = "yes" -a "$ac_cv_header_AudioUnit_AudioUnit_h" = "yes"
+    then
+        if test "$ac_cv_header_AudioUnit_AudioComponent_h" = "yes"
+        then
+            AC_SUBST(COREAUDIO_LIBS,"-framework CoreFoundation -framework CoreAudio -framework AudioUnit -framework AudioToolbox -framework CoreMIDI")
+        else
+            dnl CoreServices needed by AudioUnit
+            AC_SUBST(COREAUDIO_LIBS,"-framework CoreAudio -framework AudioUnit -framework CoreServices -framework AudioToolbox -framework CoreMIDI")
+        fi
+        enable_winecoreaudio_drv=${enable_winecoreaudio_drv:-yes}
+        dnl Check for the AUGraphAddNode function
+        ac_save_LIBS="$LIBS"
+        LIBS="$LIBS $COREAUDIO_LIBS"
+        AC_CHECK_FUNCS(AUGraphAddNode)
+        LIBS="$ac_save_LIBS"
+    fi
+    if test "$ac_cv_header_OpenAL_al_h" = "yes"
+    then
+        AC_SUBST(OPENAL_LIBS,"-framework OpenAL")
+        AC_DEFINE_UNQUOTED(HAVE_OPENAL,1,[Define to 1 if OpenAL is available])
+        ac_cv_lib_openal=yes
+    fi
+    if test "$ac_cv_header_OpenCL_opencl_h" = "yes"
+    then
+        AC_SUBST(OPENCL_LIBS,"-framework OpenCL")
+        ac_cv_lib_OpenCL_clGetPlatformInfo=yes
+    fi
+    if test "$ac_cv_header_IOKit_hid_IOHIDLib_h" = "yes"
+    then
+        ac_save_LIBS="$LIBS"
+        LIBS="$LIBS $IOKIT_LIBS"
+        AC_CHECK_FUNCS(IOHIDManagerCreate)
+        LIBS="$ac_save_LIBS"
+    fi
+    if test "$ac_cv_header_QuickTime_ImageCompression_h" = "yes"
+    then
+        dnl Make sure we can actually use the QuickTime framework
+        ac_save_LIBS="$LIBS"
+        LIBS="-framework QuickTime -framework ApplicationServices -framework CoreVideo $LIBS"
+        AC_MSG_CHECKING([for the QuickTime framework])
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <QuickTime/ImageCompression.h>]],[[CodecManagerVersion(NULL);]])],
+                       [AC_MSG_RESULT([yes])
+                        AC_SUBST(QUICKTIME_LIBS,"-framework QuickTime -framework ApplicationServices -framework CoreVideo")
+                        enable_wineqtdecoder=${enable_wineqtdecoder:-yes}],
+                       [AC_MSG_RESULT([no])
+                        ac_cv_header_QuickTime_ImageCompression_h=no])
+        LIBS="$ac_save_LIBS"
+    fi
+    if test "$ac_cv_header_QuickTime_ImageCompression_h" != "yes"
+    then
+        WINE_NOTICE([QuickTime ${notice_platform}development files not found, video decoding won't be supported.])
+    fi
+    if test "$ac_cv_header_Carbon_Carbon_h" = "yes"
+    then
+        AC_SUBST(CARBON_LIBS,"-framework Carbon")
+    fi
+
+    dnl Enable Mac driver on Mac OS X 10.6 or later
+    if test "$ac_cv_header_ApplicationServices_ApplicationServices_h" = "yes"
+    then
+        ac_save_LIBS="$LIBS"
+        LIBS="$LIBS $APPLICATIONSERVICES_LIBS"
+        AC_CHECK_FUNC(CGDisplayModeGetWidth,enable_winemac_drv=${enable_winemac_drv:-yes})
+        LIBS="$ac_save_LIBS"
+    fi
+
+    dnl Check for Xcode 3.x broken 16-bit support
+    if test "x$enable_win16" = "xyes"
+    then
+        AC_MSG_CHECKING([whether 16-bit code can be built correctly])
+        AC_RUN_IFELSE([AC_LANG_PROGRAM([[asm(".text\n"
+                                            "bad:\tnop;nop\n"
+                                            "good:\tnop;nop\n\t"
+                                            ".globl _testfunc\n"
+                                            "_testfunc:\tcallw good");
+                                        extern void testfunc();]],
+                                      [[unsigned short *p = (unsigned short *)testfunc;
+                                        return p[0] != 0xe866 || p[1] != 0xfffa]])],
+                                      AC_MSG_RESULT(yes),
+                                      [AC_MSG_RESULT(no)
+                                       AC_MSG_ERROR([Xcode 3.x cannot build 16-bit code correctly. Use --disable-win16 if you don't need 16-bit support.])],
+                                       AC_MSG_RESULT([[cross-compiling, assuming yes]]))
+    fi
+
+    AC_SUBST(LIBWINE_SHAREDLIB,"libwine.$libwine_version.dylib")
+    AC_SUBST(LIBWINE_INSTALL_LIB,"libwine.$libwine_version.dylib libwine.$libwine_soversion.dylib")
+    AC_SUBST(LIBWINE_INSTALL_DEV,"libwine.dylib")
+    AC_SUBST(LIBWINE_LDFLAGS,["-dynamiclib -install_name @rpath/libwine.$libwine_soversion.dylib -Wl,-rpath,@loader_path/ -compatibility_version $libwine_soversion -current_version $libwine_version"])
+    AC_SUBST(WINELOADER_DEPENDS,"wine_info.plist")
+    ;;
+
+  linux-android*)
+    DLLFLAGS="$DLLFLAGS -fPIC"
+    WINE_TRY_CFLAGS([-fPIC -Wl,--export-dynamic],
+                    [LDEXECFLAGS="-Wl,--export-dynamic"])
+    WINE_TRY_CFLAGS([-fPIC -Wl,--rpath,\$ORIGIN/../lib],
+                    [LDRPATH_INSTALL="-Wl,--rpath,\\\$\$ORIGIN/\`\$(MAKEDEP) -R \${bindir} \${libdir}\`"
+                     LDRPATH_LOCAL="-Wl,--rpath,\\\$\$ORIGIN/\$(top_builddir)/libs/wine"],
+        [WINE_TRY_CFLAGS([-fPIC -Wl,-R,\$ORIGIN/../lib],
+                         [LDRPATH_INSTALL="-Wl,-R,\\\$\$ORIGIN/\`\$(MAKEDEP) -R \${bindir} \${libdir}\`"
+                          LDRPATH_LOCAL="-Wl,-R,\\\$\$ORIGIN/\$(top_builddir)/libs/wine"])])
+
+    WINE_TRY_CFLAGS([-Wl,--enable-new-dtags],
+                    [LDRPATH_INSTALL="$LDRPATH_INSTALL -Wl,--enable-new-dtags"])
+    WINE_TRY_CFLAGS([-Wl,-pie],
+                    [LDRPATH_INSTALL="$LDRPATH_INSTALL -Wl,-pie"])
+
+    AC_SUBST(LIBWINE_SHAREDLIB,"libwine.so")
+    AC_SUBST(LIBWINE_INSTALL_LIB,"libwine.so")
+    AC_SUBST(LIBWINE_LDFLAGS,"-shared")
+    ;;
+
+  *)
+    DLLFLAGS="$DLLFLAGS -fPIC"
+    LDEXECFLAGS=""
+    AC_CACHE_CHECK([whether we can build a GNU style ELF dll], ac_cv_c_dll_gnuelf,
+        [WINE_TRY_SHLIB_FLAGS([-fPIC -shared -Wl,-Bsymbolic],
+                              ac_cv_c_dll_gnuelf="yes",ac_cv_c_dll_gnuelf="no")])
+    if test "$ac_cv_c_dll_gnuelf" = "yes"
+    then
+      LIBWINE_LDFLAGS="-shared"
+      WINE_TRY_CFLAGS([-fPIC -shared -Wl,-soname,confest.so.1],
+                      [LIBWINE_LDFLAGS="-shared -Wl,-soname,libwine.so.$libwine_soversion"],
+                      [WINE_TRY_CFLAGS([-fPIC -shared -Wl,-h,confest.so.1],
+                                       [LIBWINE_LDFLAGS="-shared -Wl,-h,libwine.so.$libwine_soversion"])])
+
+      echo '{ global: *; };' >conftest.map
+      WINE_TRY_CFLAGS([-fPIC -shared -Wl,--version-script=conftest.map],
+                      [LIBWINE_LDFLAGS="$LIBWINE_LDFLAGS -Wl,--version-script=\$(srcdir)/wine.map"])
+      rm -f conftest.map
+
+      WINE_TRY_CFLAGS([-fPIC -Wl,--export-dynamic],
+                      [LDEXECFLAGS="-Wl,--export-dynamic"])
+
+      WINE_TRY_CFLAGS([-fPIC -Wl,--rpath,\$ORIGIN/../lib],
+                      [LDRPATH_INSTALL="-Wl,--rpath,\\\$\$ORIGIN/\`\$(MAKEDEP) -R \${bindir} \${libdir}\`:\$(DESTDIR)\${libdir}"
+                       LDRPATH_LOCAL="-Wl,--rpath,\\\$\$ORIGIN/\$(top_builddir)/libs/wine"],
+          [WINE_TRY_CFLAGS([-fPIC -Wl,-R,\$ORIGIN/../lib],
+                           [LDRPATH_INSTALL="-Wl,-R,\\\$\$ORIGIN/\`\$(MAKEDEP) -R \${bindir} \${libdir}\`:\$(DESTDIR)\${libdir}"
+                            LDRPATH_LOCAL="-Wl,-R,\\\$\$ORIGIN/\$(top_builddir)/libs/wine"])])
+
+      WINE_TRY_CFLAGS([-Wl,--enable-new-dtags],
+                      [LDRPATH_INSTALL="$LDRPATH_INSTALL -Wl,--enable-new-dtags"])
+
+      case $host_cpu in
+        *i[[3456789]]86* | x86_64)
+          WINE_TRY_CFLAGS([-Wl,-Ttext-segment=0x7bc00000],
+                          [case $host_os in
+                           freebsd* | kfreebsd*-gnu) LDEXECFLAGS="$LDEXECFLAGS -Wl,-Ttext-segment=0x60000000" ;;
+                           *) LDEXECFLAGS="$LDEXECFLAGS -Wl,-Ttext-segment=0x7c000000" ;;
+                           esac],
+                          [WINE_TRY_CFLAGS([-Wl,--section-start,.interp=0x7c000400],
+                                           [case $host_os in
+                                              freebsd* | kfreebsd*-gnu) LDEXECFLAGS="$LDEXECFLAGS -Wl,--section-start,.interp=0x60000400" ;;
+                                              *) LDEXECFLAGS="$LDEXECFLAGS -Wl,--section-start,.interp=0x7c000400" ;;
+                                           esac])
+                           AC_PATH_PROG(PRELINK, prelink, false, [/sbin /usr/sbin $PATH])
+                           if test "x$PRELINK" = xfalse
+                           then
+                               WINE_WARNING([prelink not found and linker does not support relocation, base address of core dlls won't be set correctly.])
+                           fi])
+          WINE_TRY_CFLAGS([-Wl,-z,max-page-size=0x1000],
+                          [LDEXECFLAGS="$LDEXECFLAGS -Wl,-z,max-page-size=0x1000"])
+          ;;
+      esac
+
+    else
+      AC_CACHE_CHECK(whether we can build a UnixWare (Solaris) dll, ac_cv_c_dll_unixware,
+          [WINE_TRY_SHLIB_FLAGS([-fPIC -Wl,-G,-h,conftest.so.1.0,-B,symbolic],
+                                ac_cv_c_dll_unixware="yes",ac_cv_c_dll_unixware="no")])
+      if test "$ac_cv_c_dll_unixware" = "yes"
+      then
+        LIBWINE_LDFLAGS="-Wl,-G,-h,libwine.so.$libwine_soversion"
+      fi
+    fi
+    AC_SUBST(LIBWINE_SHAREDLIB,"libwine.so.$libwine_version")
+    AC_SUBST(LIBWINE_INSTALL_LIB,"libwine.so.$libwine_version libwine.so.$libwine_soversion")
+    AC_SUBST(LIBWINE_INSTALL_DEV,"libwine.so")
+    AC_SUBST(LIBWINE_DEPENDS,"wine.map")
+    ;;
+esac
+
+enable_winecoreaudio_drv=${enable_winecoreaudio_drv:-no}
+enable_wineqtdecoder=${enable_wineqtdecoder:-no}
+enable_winemac_drv=${enable_winemac_drv:-no}
+test "$ac_cv_header_linux_joystick_h" = "yes" -o "$ac_cv_header_IOKit_hid_IOHIDLib_h" = "yes" || enable_winejoystick_drv=${enable_winejoystick_drv:-no}
+
+dnl Check for cross compiler to build test programs
+AC_SUBST(CROSSTARGET,"")
+if test "x$enable_tests" != xno -a "$LIBEXT" != "dll"
+then
+    WINE_CHECK_MINGW_PROG(CROSSCC,false)
+    if test "$CROSSCC" != "false"
+    then
+        ac_save_CC="$CC"
+        CC="$CROSSCC"
+        AC_MSG_CHECKING([whether $CROSSCC works])
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
+                          [AC_MSG_RESULT([yes])
+                           set x $CROSSCC
+                           shift
+                           while test $# -ge 1
+                           do
+                               case "$1" in
+                                 *-gcc) CROSSTARGET=`expr "$1" : '\(.*\)-gcc'` ;;
+                                 *-clang) CROSSTARGET=`expr "$1" : '\(.*\)-clang'` ;;
+                               esac
+                               shift
+                           done],
+                          [AC_MSG_RESULT([no])])
+        CC="$ac_save_CC"
+    fi
+fi
+
+dnl **** Check for pthread ****
+
+if test "$ac_cv_header_pthread_h" = "yes"
+then
+    AC_CHECK_FUNC(pthread_create,,[AC_CHECK_LIB(pthread,pthread_create,[AC_SUBST(PTHREAD_LIBS,"-lpthread")])])
+fi
+WINE_ERROR_WITH(pthread,[test "x$ac_cv_func_pthread_create" != xyes -a "x$PTHREAD_LIBS" = x],
+[pthread ${notice_platform}development files not found.
+Wine cannot support threads without libpthread.])
+
+dnl **** Check for X11 ****
+
+AC_PATH_XTRA
+
+if test "$have_x" = "yes"
+then
+    ac_save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$CPPFLAGS $X_CFLAGS"
+
+    WINE_CHECK_SONAME(X11,XCreateWindow,,,[$X_LIBS $X_EXTRA_LIBS])
+    WINE_CHECK_SONAME(Xext,XextCreateExtension,[X_LIBS="$X_LIBS -lXext"],,[$X_LIBS -lX11 $X_EXTRA_LIBS])
+    X_LIBS="$X_LIBS -lX11"
+
+    dnl *** All of the following tests require X11/Xlib.h
+    AC_CHECK_HEADERS([X11/Xlib.h \
+                      X11/Xlib-xcb.h \
+                      X11/XKBlib.h \
+                      X11/Xutil.h \
+                      X11/Xcursor/Xcursor.h \
+                      X11/extensions/shape.h \
+                      X11/extensions/XInput.h \
+                      X11/extensions/XInput2.h \
+                      X11/extensions/XShm.h \
+                      X11/extensions/Xcomposite.h \
+                      X11/extensions/Xinerama.h \
+                      X11/extensions/Xrandr.h \
+                      X11/extensions/Xrender.h \
+                      X11/extensions/xf86vmode.h \
+                      X11/extensions/xf86vmproto.h],,,
+[#ifdef HAVE_X11_XLIB_H
+# include <X11/Xlib.h>
+#endif
+#ifdef HAVE_X11_XUTIL_H
+# include <X11/Xutil.h>
+#endif])
+
+        dnl *** Check for X keyboard extension
+        if test "$ac_cv_header_X11_XKBlib_h" = "yes"
+        then
+              AC_CHECK_LIB(X11, XkbQueryExtension,
+              AC_DEFINE(HAVE_XKB, 1, [Define if you have the XKB extension]),,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+
+        dnl *** Check for X cursor
+        if test "$ac_cv_header_X11_Xcursor_Xcursor_h" = "yes"
+        then
+            WINE_CHECK_SONAME(Xcursor,XcursorImageLoadCursor,,,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xcursor,[test "x$ac_cv_lib_soname_Xcursor" = "x"],
+                         [libxcursor ${notice_platform}development files not found, the Xcursor extension won't be supported.])
+
+        dnl *** Check for X input extension
+        if test "$ac_cv_header_X11_extensions_XInput_h" = "yes"
+        then
+            WINE_CHECK_SONAME(Xi,XOpenDevice,,,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xinput,[test "x$ac_cv_lib_soname_Xi" = "x"],
+                         [libxi ${notice_platform}development files not found, the Xinput extension won't be supported.])
+
+        dnl *** Check for X input 2 extension
+        if test "x$ac_cv_lib_soname_Xi" != x
+        then
+            WINE_NOTICE_WITH(xinput2,[test "$ac_cv_header_X11_extensions_XInput2_h" != "yes"],
+                             [XInput2 headers not found, the XInput 2 extension won't be supported.])
+        fi
+
+        dnl *** Check for X Shm extension
+        if test "$ac_cv_header_X11_extensions_XShm_h" = "yes"
+        then
+              AC_CHECK_LIB(Xext, XShmQueryExtension,
+              AC_DEFINE(HAVE_LIBXXSHM, 1, [Define if you have the X Shm extension]),,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xshm,[test "$ac_cv_lib_Xext_XShmQueryExtension" != "yes"],
+                         [XShm ${notice_platform}development files not found, X Shared Memory won't be supported.])
+
+        dnl *** Check for X shape extension
+        if test "$ac_cv_header_X11_extensions_shape_h" = "yes"
+        then
+              AC_CHECK_LIB(Xext,XShapeQueryExtension,
+	      AC_DEFINE(HAVE_LIBXSHAPE, 1, [Define if you have the X Shape extension]),,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xshape,[test "$ac_cv_lib_Xext_XShapeQueryExtension" != "yes"],
+                         [XShape ${notice_platform}development files not found, XShape won't be supported.])
+
+        dnl *** Check for XFree86 VMODE extension
+        if test "$ac_cv_header_X11_extensions_xf86vmode_h" = "yes" -o "$ac_cv_header_X11_extensions_xf86vmproto_h" = "yes"
+        then
+            WINE_CHECK_SONAME(Xxf86vm,XF86VidModeQueryExtension,,,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xxf86vm,[test "x$ac_cv_lib_soname_Xxf86vm" = "x"],
+                         [libXxf86vm ${notice_platform}development files not found, XFree86 Vidmode won't be supported.])
+
+        dnl *** Check for Transform functions in Xrender
+        if test "$ac_cv_header_X11_extensions_Xrender_h" = "yes" -a "x$ac_cv_lib_soname_X11" != "x"
+        then
+            WINE_CHECK_SONAME(Xrender,XRenderQueryExtension,
+              [AC_CHECK_LIB(Xrender,XRenderSetPictureTransform,
+                [AC_DEFINE(HAVE_XRENDERSETPICTURETRANSFORM, 1,
+                 [Define if Xrender has the XRenderSetPictureTransform function])],,[$X_LIBS $X_EXTRA_LIBS])
+               AC_CHECK_LIB(Xrender,XRenderCreateLinearGradient,
+                [AC_DEFINE(HAVE_XRENDERCREATELINEARGRADIENT, 1,
+                 [Define if Xrender has the XRenderCreateLinearGradient function])],,[$X_LIBS $X_EXTRA_LIBS])],,[$X_LIBS $X_EXTRA_LIBS])
+
+        fi
+        WINE_WARNING_WITH(xrender,[test "x$ac_cv_lib_soname_Xrender" = "x"],
+                         [libxrender ${notice_platform}development files not found, XRender won't be supported.])
+
+        dnl *** Check for X RandR extension
+        if test "$ac_cv_header_X11_extensions_Xrandr_h" = "yes" -a "x$ac_cv_lib_soname_Xrender" != "x"
+        then
+                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <X11/Xlib.h>
+#include <X11/extensions/Xrandr.h>]], [[static typeof(XRRSetScreenConfigAndRate) * func; if (func) return 0;]])],
+                  [WINE_CHECK_SONAME(Xrandr,XRRQueryExtension,
+                    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <X11/Xlib.h>
+#include <X11/extensions/Xrandr.h>]], [[static typeof(XRRGetScreenResources) *f; if (f) return 0;]])],
+                      [AC_DEFINE(HAVE_XRRGETSCREENRESOURCES, 1,
+                        [Define if Xrandr has the XRRGetScreenResources function])])],,[$X_LIBS $X_EXTRA_LIBS])])
+        fi
+        WINE_NOTICE_WITH(xrandr,[test "x$ac_cv_lib_soname_Xrandr" = "x"],
+                         [libxrandr ${notice_platform}development files not found, XRandr won't be supported.])
+
+        dnl *** Check for Xinerama extension
+        if test "$ac_cv_header_X11_extensions_Xinerama_h" = "yes"
+        then
+                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <X11/Xlib.h>
+#include <X11/extensions/Xinerama.h>]], [[static typeof(XineramaQueryScreens) * func; if (func) return 0;]])],
+                  [WINE_CHECK_SONAME(Xinerama,XineramaQueryScreens,,,[$X_LIBS $X_EXTRA_LIBS])])
+        fi
+        WINE_NOTICE_WITH(xinerama,[test "x$ac_cv_lib_soname_Xinerama" = "x"],
+                         [libxinerama ${notice_platform}development files not found, multi-monitor setups won't be supported.])
+
+        dnl *** Check for X Composite extension
+        if test "$ac_cv_header_X11_extensions_Xcomposite_h" = "yes"
+        then
+            WINE_CHECK_SONAME(Xcomposite,XCompositeRedirectWindow,,,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xcomposite,[test "x$ac_cv_lib_soname_Xcomposite" = "x"],
+                         [libxcomposite ${notice_platform}development files not found, Xcomposite won't be supported.])
+
+        dnl *** Check for XCB extension
+        if test "$ac_cv_header_X11_Xlib_xcb_h" = "yes"
+        then
+            WINE_CHECK_SONAME(X11-xcb,XGetXCBConnection,,,[$X_LIBS $X_EXTRA_LIBS])
+        fi
+        WINE_NOTICE_WITH(xcb,[test "x$ac_cv_lib_soname_X11_xcb" = "x"],
+                         [X11-xcb ${notice_platform}development files not found, the XCB extension won't be supported.])
+
+        dnl *** Check for XICCallback struct
+        AC_CHECK_MEMBERS([XICCallback.callback, XEvent.xcookie],,,
+[#ifdef HAVE_X11_XLIB_H
+#include <X11/Xlib.h>
+#endif])
+
+    dnl *** End of X11/Xlib.h check
+
+    dnl Check for the presence of OpenGL
+    opengl_msg=""
+    if test "x$with_opengl" != "xno"
+    then
+	WINE_CHECK_SONAME(GL,glXCreateContext,
+		     [OPENGL_LIBS="-lGL"],
+                     [WINE_CHECK_SONAME(GL,glXCreateContext,
+			    [OPENGL_LIBS="-Xlinker -dylib_file -Xlinker /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib -lGL"],
+			    [if test -f /usr/X11R6/lib/libGL.a
+                            then
+	                        opengl_msg="/usr/X11R6/lib/libGL.a is present on your system.
+This probably prevents linking to OpenGL. Try deleting the file and restarting configure."
+                            else
+                                opengl_msg="No OpenGL library found on this system."
+                            fi],
+			    $X_LIBS -lm $X_EXTRA_LIBS -dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib)],
+		     $X_LIBS -lm $X_EXTRA_LIBS)
+        if test "x$with_glu" != "xno"
+        then
+            AC_CHECK_LIB(GLU,gluLookAt,[:],,[$OPENGL_LIBS $X_LIBS -lm $X_EXTRA_LIBS])
+            WINE_NOTICE_WITH(glu,[test "x$ac_cv_lib_GLU_gluLookAt" != xyes],
+                             [libGLU ${notice_platform}development files not found, GLU won't be supported.])
+        fi
+
+        if test "x$with_osmesa" != "xno"
+        then
+            WINE_CHECK_SONAME(OSMesa,glAccum,,,[$X_LIBS -lm $X_EXTRA_LIBS])
+            WINE_NOTICE_WITH(osmesa,[test "x$ac_cv_lib_soname_OSMesa" = "x"],
+                             [libOSMesa ${notice_platform}development files not found (or too old), OpenGL rendering in bitmaps won't be supported.])
+        fi
+    fi
+    WINE_WARNING_WITH(opengl,[test -n "$opengl_msg"],[$opengl_msg
+OpenGL and Direct3D won't be supported.])
+
+    dnl **** Check for libva ****
+    AC_CHECK_HEADERS([va/va_x11.h va/va_drm.h])
+    if test "$ac_cv_header_va_va_x11_h" = "yes" -a "$ac_cv_header_va_va_drm_h" = "yes"
+    then
+        WINE_CHECK_SONAME(va,vaQuerySurfaceAttributes,,,[$X_LIBS])
+        WINE_CHECK_SONAME(va-x11,vaGetDisplay,,,[$X_LIBS -lva])
+        WINE_CHECK_SONAME(va-drm,vaGetDisplayDRM,,,[$X_LIBS -lva])
+        if test "x$ac_cv_lib_soname_va" != "x" -a "x$ac_cv_lib_soname_va_x11" != "x" -a "x$ac_cv_lib_soname_va_drm" != "x"
+        then
+            AC_DEFINE(HAVE_VAAPI, 1, [Define if you have the libva development files])
+        fi
+    fi
+    WINE_NOTICE_WITH(va,[test "x$ac_cv_lib_soname_va" = "x" -o "x$ac_cv_lib_soname_va_x11" = "x" -o "x$ac_cv_lib_soname_va_drm" = "x"],
+                     [libva ${notice_platform}development files not found, GPU video acceleration won't be supported.])
+
+    CPPFLAGS="$ac_save_CPPFLAGS"
+else
+    X_CFLAGS=""
+    X_LIBS=""
+fi
+WINE_ERROR_WITH(x,[test "x$X_LIBS" = "x"],[X ${notice_platform}development files not found. Wine will be built
+without X support, which probably isn't what you want. You will need
+to install ${notice_platform}development packages of Xlib/Xfree86 at the very least.],
+[enable_winex11_drv])
+
+test "x$X_LIBS" = "x" && enable_vulkan=${enable_vulkan:-no}
+test "x$X_LIBS" = "x" && enable_vulkan_1=${enable_vulkan_1:-no}
+
+test "x$ac_cv_lib_GLU_gluLookAt" != xyes && enable_glu32=${enable_glu32:-no}
+
+dnl **** Check for OpenCL ****
+if test "$ac_cv_header_CL_cl_h" = "yes"
+then
+    AC_CHECK_LIB(OpenCL,clGetPlatformInfo,[AC_SUBST(OPENCL_LIBS,["-lOpenCL"])])
+fi
+WINE_NOTICE_WITH(opencl,[test "x$ac_cv_lib_OpenCL_clGetPlatformInfo" != xyes],
+                 [OpenCL ${notice_platform}development files not found, OpenCL won't be supported.],
+                 [enable_opencl])
+
+dnl **** Check for libpcap ****
+if test "$ac_cv_header_pcap_pcap_h" = "yes"
+then
+    WINE_CHECK_SONAME(pcap,pcap_create,,,)
+fi
+WINE_NOTICE_WITH(pcap,[test "x$ac_cv_lib_soname_pcap" = "x"],
+                 [pcap ${notice_platform}development files not found, wpcap won't be supported.],
+                 [enable_wpcap])
+
+dnl **** Check for libxml2 ****
+
+if test "x$with_xml" != "xno"
+then
+    WINE_PACKAGE_FLAGS(XML2,[libxml-2.0],[-lxml2],
+                       [`${XML2_CONFIG:-xml2-config} --cflags 2>/dev/null`],[`${XML2_CONFIG:-xml2-config} --libs 2>/dev/null`],
+        [AC_CHECK_HEADERS([libxml/parser.h libxml/xmlsave.h libxml/SAX2.h])
+        if test "$ac_cv_header_libxml_parser_h" = "yes" -a "$ac_cv_header_libxml_xmlsave_h" = "yes" -a "$ac_cv_header_libxml_SAX2_h" = "yes"
+        then
+            AC_CHECK_LIB(xml2, xmlParseMemory,
+                [AC_DEFINE(HAVE_LIBXML2, 1, [Define if you have the libxml2 library])],[XML2_LIBS=""],[$XML2_LIBS])
+            AC_CHECK_LIB(xml2, xmlReadMemory,
+                [AC_DEFINE(HAVE_XMLREADMEMORY,1,[Define if libxml2 has the xmlReadMemory function])],,[$XML2_LIBS])
+            AC_CHECK_LIB(xml2, xmlNewDocPI,
+                [AC_DEFINE(HAVE_XMLNEWDOCPI,1,[Define if libxml2 has the xmlNewDocPI function])],,[$XML2_LIBS])
+            AC_CHECK_LIB(xml2, xmlSchemaSetParserStructuredErrors,
+                [AC_DEFINE(HAVE_XMLSCHEMASSETPARSERSTRUCTUREDERRORS,1,[Define if libxml2 has the xmlSchemaSetParserStructuredErrors function])],,[$XML2_LIBS])
+            AC_CHECK_LIB(xml2, xmlSchemaSetValidStructuredErrors,
+                [AC_DEFINE(HAVE_XMLSCHEMASSETVALIDSTRUCTUREDERRORS,1,[Define if libxml2 has the xmlSchemaSetValidStructuredErrors function])],,[$XML2_LIBS])
+            AC_CHECK_LIB(xml2, xmlFirstElementChild,
+                [AC_DEFINE(HAVE_XMLFIRSTELEMENTCHILD,1,[Define if libxml2 has the xmlFirstElementChild function])],,[$XML2_LIBS])
+            AC_CHECK_TYPE([xmlDocProperties],
+                [AC_DEFINE(HAVE_XMLDOC_PROPERTIES,1,[Define if libxml2 has the xmlDocProperties enum])],,[[#include <libxml/tree.h>]])
+        else
+            XML2_CFLAGS=""
+            XML2_LIBS=""
+        fi])
+fi
+WINE_WARNING_WITH(xml,[test "$ac_cv_lib_xml2_xmlParseMemory" != "yes"],
+                 [libxml2 ${notice_platform}development files not found (or too old), XML won't be supported.])
+
+if test "x$with_xslt" != "xno"
+then
+    WINE_PACKAGE_FLAGS(XSLT,[libxslt],[-lxml2],
+                       [`${XSLT_CONFIG:-xslt-config} --cflags 2>/dev/null`],[`${XSLT_CONFIG:-xslt-config} --libs 2>/dev/null`],
+        [AC_CHECK_HEADERS([libxslt/pattern.h libxslt/transform.h],,,
+        [#ifdef HAVE_LIBXSLT_PATTERN_H
+# include <libxslt/pattern.h>
+#endif])
+        if test "$ac_cv_header_libxslt_transform_h" = "yes"
+        then
+            WINE_CHECK_SONAME(xslt,xsltCompilePattern,,,[$XSLT_LIBS])
+        else
+            XSLT_CFLAGS=""
+        fi])
+fi
+WINE_WARNING_WITH(xslt,[test "x$ac_cv_lib_soname_xslt" = "x"],
+                 [libxslt ${notice_platform}development files not found, xslt won't be supported.])
+
+dnl **** Check for libdbus ****
+if test "x$with_dbus" != "xno"
+then
+    WINE_PACKAGE_FLAGS(DBUS,[dbus-1],,,,
+        [AC_CHECK_HEADER([dbus/dbus.h],
+            [WINE_CHECK_SONAME(dbus-1, dbus_connection_close,,[DBUS_CFLAGS=""],[$DBUS_LIBS])],
+            [DBUS_CFLAGS=""])])
+fi
+WINE_NOTICE_WITH(dbus,[test "x$ac_cv_lib_soname_dbus_1" = "x" -a \
+                            "x$ac_cv_header_DiskArbitration_DiskArbitration_h" != "xyes"],
+                 [libdbus ${notice_platform}development files not found, no dynamic device support.])
+
+dnl **** Check for libhal ****
+if test "x$with_hal" != "xno" -a "x$ac_cv_lib_soname_dbus_1" != x
+then
+    WINE_PACKAGE_FLAGS(HAL,[hal],[-ldbus-1],,,
+        [AC_CHECK_HEADER([hal/libhal.h],
+            [WINE_CHECK_SONAME(hal, libhal_ctx_new,,[HAL_CFLAGS=""],[$HAL_LIBS])],
+            [HAL_CFLAGS=""])])
+    WINE_NOTICE_WITH(hal,[test "x$ac_cv_lib_soname_hal" = "x" -a \
+                               "x$ac_cv_header_DiskArbitration_DiskArbitration_h" != "xyes"],
+                     [libhal ${notice_platform}development files not found, no legacy dynamic device support.])
+fi
+
+dnl **** Check for libgnutls ****
+if test "x$with_gnutls" != "xno"
+then
+    WINE_PACKAGE_FLAGS(GNUTLS,[gnutls],,,,
+        [AC_CHECK_HEADER(gnutls/gnutls.h,
+            [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <gnutls/gnutls.h>
+#include <gnutls/crypto.h>]], [[static typeof(gnutls_mac_get_key_size) *func; if (func) return 0;]])],
+                [WINE_CHECK_SONAME(gnutls,gnutls_global_init,,[GNUTLS_CFLAGS=""],[$GNUTLS_LIBS],[[libgnutls\\(-deb0\\)\\{0,1\\}]])
+                 WINE_CHECK_LIB_FUNCS(gnutls_hash,[$GNUTLS_LIBS],,
+                                      [WINE_NOTICE([libgnutls ${notice_platform}development files too old, no bcrypt hash support.])])])],
+            [GNUTLS_CFLAGS=""])])
+fi
+WINE_WARNING_WITH(gnutls,[test "x$ac_cv_lib_soname_gnutls" = "x"],
+                 [libgnutls ${notice_platform}development files not found, no schannel support.])
+
+dnl **** Check which curses lib to use ***
+CURSES_LIBS=""
+if test "$ac_cv_header_ncurses_h" = "yes"
+then
+    WINE_CHECK_SONAME(ncurses,waddch,[CURSES_LIBS="-lncurses"],,,[[libncursesw\\{0,1\\}]])
+elif test "$ac_cv_header_curses_h" = "yes"
+then
+    WINE_CHECK_SONAME(curses,waddch,[CURSES_LIBS="-lcurses"])
+fi
+ac_save_LIBS="$LIBS"
+LIBS="$LIBS $CURSES_LIBS"
+AC_CHECK_FUNCS(mousemask)
+LIBS="$ac_save_LIBS"
+WINE_NOTICE_WITH(curses,[test "x$ac_cv_lib_soname_curses$ac_cv_lib_soname_ncurses" = "x"],
+                 [lib(n)curses ${notice_platform}development files not found, curses won't be supported.])
+
+dnl **** Check for SANE ****
+if test "x$with_sane" != "xno"
+then
+    WINE_PACKAGE_FLAGS(SANE,[libsane],,[`${SANE_CONFIG:-sane-config} --cflags 2>/dev/null`],[`${SANE_CONFIG:-sane-config} --ldflags 2>/dev/null`],
+        [AC_CHECK_HEADER(sane/sane.h,
+            [WINE_CHECK_SONAME(sane,sane_init,,[SANE_CFLAGS=""],[$SANE_LIBS])],
+            [SANE_CFLAGS=""])])
+fi
+WINE_NOTICE_WITH(sane,[test "x$ac_cv_lib_soname_sane" = "x"],
+                 [libsane ${notice_platform}development files not found, scanners won't be supported.])
+
+dnl **** Check for libv4l1 ****
+if test "x$with_v4l" != "xno"
+then
+    WINE_CHECK_SONAME(v4l1,v4l1_open,,,)
+fi
+WINE_NOTICE_WITH(v4l,[test "x$ac_cv_lib_soname_v4l1" = "x"],
+                 [libv4l ${notice_platform}development files not found.])
+
+dnl **** Check for libgphoto2 ****
+if test "x$with_gphoto" != "xno"
+then
+    WINE_PACKAGE_FLAGS(GPHOTO2,[libgphoto2],[-lgphoto2],
+                       [`${GPHOTO2_CONFIG:-gphoto2-config} --cflags 2>/dev/null`],[`${GPHOTO2_CONFIG:-gphoto2-config} --libs 2>/dev/null`],
+        [AC_CHECK_HEADER(gphoto2-camera.h,
+                        [AC_CHECK_LIB(gphoto2,gp_camera_new,
+                                      [AC_DEFINE(HAVE_GPHOTO2, 1, [Define if we have the libgphoto2 development environment])],
+                                      [GPHOTO2_LIBS=""; GPHOTO2_CFLAGS=""],
+                                      [$GPHOTO2_LIBS])],
+                        [GPHOTO2_LIBS=""; GPHOTO2_CFLAGS=""])])
+    WINE_PACKAGE_FLAGS(GPHOTO2_PORT,[libgphoto2_port],[-lgphoto2_port],
+                       [`${GPHOTO2_PORT_CONFIG:-gphoto2-port-config} --cflags 2>/dev/null`],
+                       [`${GPHOTO2_PORT_CONFIG:-gphoto2-port-config} --libs 2>/dev/null`],
+        [AC_CHECK_HEADER(gphoto2-port.h,
+                        [AC_CHECK_LIB(gphoto2_port,gp_port_info_list_new,
+                                      [AC_DEFINE(HAVE_GPHOTO2_PORT, 1, [Define if we have the libgphoto2_port development environment])],
+                                      [GPHOTO2_PORT_LIBS=""; GPHOTO2_PORT_CFLAGS=""],
+                                      [$GPHOTO2_PORT_LIBS])],
+                        [GPHOTO2_PORT_LIBS=""; GPHOTO2_PORT_CFLAGS=""])])
+fi
+WINE_NOTICE_WITH(gphoto,[test "$ac_cv_lib_gphoto2_gp_camera_new" != "yes"],
+                 [libgphoto2 ${notice_platform}development files not found, digital cameras won't be supported.])
+WINE_NOTICE_WITH(gphoto,[test "$ac_cv_lib_gphoto2_port_gp_port_info_list_new" != "yes"],
+                 [libgphoto2_port ${notice_platform}development files not found, digital cameras won't be auto-detected.])
+
+
+dnl **** Check for resolver library ***
+if test "$ac_cv_header_resolv_h" = "yes"
+then
+    AC_CACHE_CHECK([for resolver library], ac_cv_have_resolv,
+      [ac_save_LIBS="$LIBS"
+       for lib in '' -lresolv
+       do
+         LIBS="$lib $ac_save_LIBS"
+         AC_LINK_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#include <resolv.h>]],[[if (!(_res.options & RES_INIT)) res_init(); res_query("foo",ns_c_in,0,0,0)]])],
+           [ac_cv_have_resolv=${lib:-"none required"}],[ac_cv_have_resolv="not found"])
+         test "x$ac_cv_have_resolv" = "xnot found" || break
+       done
+       LIBS="$ac_save_LIBS"])
+
+    case "$ac_cv_have_resolv" in
+      "not found") ;;
+      "none required")
+        AC_DEFINE(HAVE_RESOLV, 1, [Define if you have the resolver library and header]) ;;
+      *)
+        AC_DEFINE(HAVE_RESOLV, 1)
+        AC_SUBST(RESOLV_LIBS,$ac_cv_have_resolv) ;;
+    esac
+fi
+
+dnl **** Check for LittleCMS ***
+if test "x$with_cms" != "xno"
+then
+    WINE_PACKAGE_FLAGS(LCMS2,[lcms2],[-llcms2],,,
+        [AC_CHECK_HEADERS([lcms2.h])
+        if test "$ac_cv_header_lcms2_h" = "yes"
+        then
+            AC_CHECK_LIB(lcms2, cmsOpenProfileFromFile,
+                [AC_DEFINE(HAVE_LCMS2, 1, [Define if you have the LittleCMS development environment])],[LCMS2_LIBS=""],[$LCMS2_LIBS])
+        else
+            LCMS2_CFLAGS=""
+            LCMS2_LIBS=""
+        fi])
+fi
+WINE_NOTICE_WITH(cms,[test "$ac_cv_lib_lcms2_cmsOpenProfileFromFile" != "yes"],
+                 [liblcms2 ${notice_platform}development files not found, Color Management won't be supported.])
+
+dnl **** Check for GTK3 ****
+if test "x$with_gtk3" != "xno";
+then
+    WINE_PACKAGE_INCLUDE_FLAGS(GTK3, [gtk+-3.0],,
+        [AC_CHECK_HEADERS([gtk/gtk.h])
+        if test "$ac_cv_header_gtk_gtk_h" = "yes"
+        then
+            WINE_CHECK_SONAME(gobject-2.0,g_object_unref,
+                [WINE_CHECK_SONAME(cairo,cairo_destroy,
+                    [WINE_CHECK_SONAME(gtk-3,gtk_style_context_save,
+                            [AC_DEFINE(HAVE_GTK3, 1, [Define if GTK 3 is installed])])])])
+            test "x$ac_cv_lib_soname_gtk_3" != "x" || GTK3_CFLAGS=""
+        else
+            GTK3_CFLAGS=""
+        fi])
+fi
+WINE_NOTICE_WITH(gtk3,[test "x$ac_cv_lib_soname_gtk_3" = x],
+                 [GTK3 ${notice_platform}development files not found, GTK themes won't be supported.])
+test "x$ac_cv_lib_soname_gtk_3" != "x" || enable_uxtheme_gtk=${enable_uxtheme_gtk:-no}
+
+dnl **** Check for FreeType 2 ****
+if test "x$with_freetype" != "xno"
+then
+    WINE_PACKAGE_FLAGS(FREETYPE,[freetype2],[-lfreetype],
+                       [`(${FREETYPE_CONFIG:-freetype-config} --cflags || ${FREETYPE2_CONFIG:-freetype2-config} --cflags) 2>/dev/null`],
+                       [`(${FREETYPE_CONFIG:-freetype-config} --libs || ${FREETYPE2_CONFIG:-freetype2-config} --libs) 2>/dev/null`],
+        [AC_CHECK_HEADERS([ft2build.h])
+        if test "$ac_cv_header_ft2build_h" = "yes"
+        then
+            WINE_CHECK_SONAME(freetype,FT_Init_FreeType,
+                [AC_DEFINE(HAVE_FREETYPE, 1, [Define if FreeType 2 is installed])
+                 AC_CHECK_TYPES(FT_TrueTypeEngineType,,,[#include <ft2build.h>
+#include FT_MODULE_H])],
+                [FREETYPE_LIBS=""],[$FREETYPE_LIBS])
+        else
+            FREETYPE_CFLAGS=""
+            FREETYPE_LIBS=""
+        fi])
+fi
+WINE_ERROR_WITH(freetype,[test "x$ac_cv_lib_soname_freetype" = x],
+                [FreeType ${notice_platform}development files not found. Fonts will not be built.],
+                [enable_fonts])
+
+dnl **** Check for parport (currently Linux only) ****
+AC_CACHE_CHECK([for parport header/ppdev.h], ac_cv_c_ppdev,
+ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_SYS_IOCTL_H
+# include <sys/ioctl.h>
+#endif
+#include <linux/ppdev.h>]], [[ioctl (1,PPCLAIM,0)]])],
+    [ac_cv_c_ppdev="yes"],[ac_cv_c_ppdev="no"]))
+if test "$ac_cv_c_ppdev" = "yes"
+then
+    AC_DEFINE(HAVE_PPDEV, 1, [Define if we can use ppdev.h for parallel port access])
+fi
+
+dnl **** Check for pthread functions ****
+WINE_CHECK_LIB_FUNCS(\
+        pthread_attr_get_np \
+        pthread_getattr_np \
+        pthread_getthreadid_np \
+        pthread_get_stackaddr_np \
+        pthread_get_stacksize_np,
+        [$PTHREAD_LIBS])
+
+dnl **** Check for zlib ****
+if test "$ac_cv_header_zlib_h" = "yes"
+then
+    AC_CHECK_LIB(z,inflate,[AC_DEFINE(HAVE_ZLIB,1,[Define to 1 if you have the `z' library (-lz).])
+                            AC_SUBST(Z_LIBS,"-lz")])
+fi
+WINE_NOTICE_WITH(zlib,[test "x$Z_LIBS" = "x"],[libz ${notice_platform}development files not found, data compression won't be supported.])
+
+dnl **** Check for gettextpo ****
+if test "x$enable_tools" != xno -a "x$with_gettextpo" = xyes
+then
+    if test "$ac_cv_header_gettext_po_h" = "yes"
+    then
+        AC_CHECK_LIB(gettextpo,po_message_msgctxt,
+                     [AC_DEFINE(HAVE_LIBGETTEXTPO,1,[Define to 1 if you have the `gettextpo' library (-lgettextpo).])
+                      AC_SUBST(GETTEXTPO_LIBS,"-lgettextpo")])
+    fi
+    WINE_NOTICE_WITH(gettextpo,[test "x$GETTEXTPO_LIBS" = "x"],
+      [GetText ${notice_platform}development files not found (or too old), po files can't be rebuilt.])
+    WINE_NOTICE_WITH(gettextpo,[test "$srcdir" != .],
+      [Rebuilding po files is not supported for out of tree builds.])
+fi
+
+dnl **** Check for PulseAudio ****
+if test "x$with_pulse" != "xno";
+then
+    WINE_PACKAGE_FLAGS(PULSE,[libpulse],,,,
+        [AC_CHECK_HEADERS(pulse/pulseaudio.h,
+            [AC_CHECK_LIB(pulse, pa_stream_is_corked,[:],[PULSE_LIBS=""],[$PULSE_LIBS])],
+            [PULSE_LIBS=""])])
+fi
+WINE_NOTICE_WITH(pulse, [test -z "$PULSE_LIBS"],
+        [libpulse ${notice_platform}development files not found or too old, Pulse won't be supported.],
+        [enable_winepulse_drv])
+
+dnl **** Check for gstreamer ****
+if test "x$with_gstreamer" != "xno"
+then
+    WINE_PACKAGE_FLAGS(GSTREAMER,[gstreamer-1.0 gstreamer-video-1.0 gstreamer-audio-1.0],,,,
+        [ac_gst_incl=""
+        for i in $GSTREAMER_CFLAGS
+        do
+            case "$i" in
+                -I*) ac_gst_incl="$ac_gst_incl $i";;
+            esac
+        done
+        GSTREAMER_CFLAGS=$ac_gst_incl
+        CPPFLAGS="$ac_save_CPPFLAGS $GSTREAMER_CFLAGS"
+        AC_CHECK_HEADER([gst/gst.h],
+            [AC_MSG_CHECKING([whether gint64 defined by gst/gst.h is indeed 64-bit])
+              AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <gst/gst.h>]],
+                                                 [[static int a[sizeof(gint64) > 4 ? 1 : -1]; if (a[0]) return 0;]])],
+                [AC_MSG_RESULT([yes])
+                 AC_CHECK_LIB(gstreamer-1.0,gst_pad_new,[:],,[$GSTREAMER_LIBS])],
+                [AC_MSG_RESULT([no])
+                 ac_glib2_broken=yes
+                 WINE_NOTICE([glib-2.0 pkgconfig configuration is for the wrong architecture, winegstreamer won't be built.])])])])
+fi
+WINE_NOTICE_WITH(gstreamer,[test "x$ac_glib2_broken" != xyes -a "x$ac_cv_lib_gstreamer_1_0_gst_pad_new" != xyes -a "x$ac_cv_header_QuickTime_ImageCompression_h" != xyes ],
+                 [gstreamer-1.0 base plugins ${notice_platform}development files not found, gstreamer support disabled])
+test "x$ac_cv_lib_gstreamer_1_0_gst_pad_new" = xyes || enable_winegstreamer=${enable_winegstreamer:-no}
+
+dnl **** Check for ALSA 1.x ****
+AC_SUBST(ALSA_LIBS,"")
+if test "$ac_cv_header_sys_asoundlib_h" = "yes" -o "$ac_cv_header_alsa_asoundlib_h" = "yes"
+then
+    AC_CHECK_LIB(asound,snd_pcm_hw_params_get_access_mask,
+        [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_ALSA_ASOUNDLIB_H
+#include <alsa/asoundlib.h>
+#elif defined(HAVE_SYS_ASOUNDLIB_H)
+#include <sys/asoundlib.h>
+#endif]], [[snd_pcm_hw_params_get_access_mask(NULL, NULL)]])],
+                        [ALSA_LIBS="-lasound"])])
+fi
+test -n "$ALSA_LIBS" || enable_winealsa_drv=${enable_winealsa_drv:-no}
+
+dnl **** Check for OSSv4 ****
+if test "x$with_oss" != xno
+then
+    ac_save_CPPFLAGS="$CPPFLAGS"
+    if test -f /etc/oss.conf
+    then
+        . /etc/oss.conf
+    fi
+    ac_oss_incl="-I${OSSLIBDIR:-/usr/lib/oss}/include"
+    CPPFLAGS="$CPPFLAGS $ac_oss_incl"
+    AC_CHECK_HEADER([sys/soundcard.h],
+        [AC_CHECK_MEMBERS([oss_sysinfo.numaudioengines],
+                          [AC_SUBST(OSS4_CFLAGS,"$ac_oss_incl")],,
+                          [#include <sys/soundcard.h>])])
+    CPPFLAGS="$ac_save_CPPFLAGS"
+fi
+WINE_NOTICE_WITH(oss,[test "x$ac_cv_member_oss_sysinfo_numaudioengines" != xyes],
+                 [OSS sound system found but too old (OSSv4 needed), OSS won't be supported.],
+                 [enable_wineoss_drv])
+
+dnl **** Check for capi4linux ****
+if test "x$with_capi" != "xno"
+then
+    WINE_PACKAGE_FLAGS(CAPI20,[capi20],,,,
+     dnl Check for broken kernel header that doesn't define __user
+    [AC_CHECK_HEADERS([capi20.h linux/capi.h],,,[#define __user])
+    if test "$ac_cv_header_capi20_h" = "yes" -a "$ac_cv_header_linux_capi_h" = "yes"
+    then
+        WINE_CHECK_SONAME(capi20,capi20_register,,,[$CAPI20_LIBS])
+    fi])
+fi
+WINE_NOTICE_WITH(capi,[test "x$ac_cv_lib_soname_capi20" = "x"],
+                 [libcapi20 ${notice_platform}development files not found, ISDN won't be supported.])
+
+dnl **** Check for cups ****
+AC_SUBST(CUPS_CFLAGS,"")
+if test "x$with_cups" != "xno"
+then
+    ac_save_CPPFLAGS="$CPPFLAGS"
+    ac_cups_cflags=`${CUPS_CONFIG:-cups-config} --cflags 2>/dev/null`
+    ac_cups_libs=`${CUPS_CONFIG:-cups-config} --ldflags 2>/dev/null`
+    CPPFLAGS="$CPPFLAGS $ac_cups_cflags"
+    AC_CHECK_HEADERS(cups/cups.h,
+            [WINE_CHECK_SONAME(cups,cupsGetDefault,
+                       [CUPS_CFLAGS="$ac_cups_cflags"],,
+                       [$ac_cups_libs])
+             AC_CHECK_HEADERS(cups/ppd.h)])
+    CPPFLAGS="$ac_save_CPPFLAGS"
+fi
+WINE_NOTICE_WITH(cups,[test "x$ac_cv_lib_soname_cups" = "x"],
+                 [libcups ${notice_platform}development files not found, CUPS won't be supported.])
+
+dnl **** Check for fontconfig ****
+if test "x$with_fontconfig" != "xno"
+then
+    WINE_PACKAGE_FLAGS(FONTCONFIG,[fontconfig],,[$X_CFLAGS],[$X_LIBS],
+        [AC_CHECK_HEADERS([fontconfig/fontconfig.h])
+        if test "$ac_cv_header_fontconfig_fontconfig_h" = "yes"
+        then
+            WINE_CHECK_SONAME(fontconfig,FcInit,,[FONTCONFIG_CFLAGS=""],[$FONTCONFIG_LIBS])
+        else
+            FONTCONFIG_CFLAGS=""
+        fi])
+fi
+WINE_NOTICE_WITH(fontconfig,[test "x$ac_cv_lib_soname_fontconfig" = "x"],
+                 [fontconfig ${notice_platform}development files not found, fontconfig won't be supported.])
+
+dnl **** Check for gsm codec ****
+if test "$ac_cv_header_gsm_h" = "yes" -o "$ac_cv_header_gsm_gsm_h" = "yes"
+then
+    WINE_CHECK_SONAME(gsm,gsm_create)
+fi
+WINE_NOTICE_WITH(gsm,[test "x$ac_cv_lib_soname_gsm" = "x"],
+                 [libgsm ${notice_platform}development files not found, gsm 06.10 codec won't be supported.])
+
+dnl **** Check for libjpeg ****
+if test "x$with_jpeg" != "xno"
+then
+    WINE_PACKAGE_FLAGS(JPEG,[libjpeg],,,,
+        [AC_CHECK_HEADERS([jpeglib.h])
+        if test "$ac_cv_header_jpeglib_h" = "yes"
+        then
+            WINE_CHECK_SONAME(jpeg,jpeg_start_decompress,,[JPEG_CFLAGS=""],[$JPEG_LIBS])
+        else
+            JPEG_CFLAGS=""
+        fi])
+fi
+WINE_WARNING_WITH(jpeg,[test "x$ac_cv_lib_soname_jpeg" = "x"],
+                 [libjpeg ${notice_platform}development files not found, JPEG won't be supported.])
+
+dnl **** Check for libpng ****
+if test "x$with_png" != "xno"
+then
+    WINE_PACKAGE_FLAGS(PNG,[libpng],,[$X_CFLAGS],[$X_LIBS],
+        [AC_CHECK_HEADERS([png.h])
+        if test "$ac_cv_header_png_h" = "yes"
+        then
+            WINE_CHECK_SONAME(png,png_create_read_struct,
+                [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <png.h>]],[[typeof(png_set_expand_gray_1_2_4_to_8) *p]])],
+                    [AC_DEFINE(HAVE_PNG_SET_EXPAND_GRAY_1_2_4_TO_8,1,[Define to 1 if libpng has the png_set_expand_gray_1_2_4_to_8 function.])])],
+                [PNG_CFLAGS=""],[$PNG_LIBS -lm -lz],[[libpng[[0-9]]*]])
+        else
+            PNG_CFLAGS=""
+        fi])
+fi
+WINE_WARNING_WITH(png,[test "x$ac_cv_lib_soname_png" = "x"],
+                 [libpng ${notice_platform}development files not found, PNG won't be supported.])
+
+dnl **** Check for libtiff ****
+if test "x$with_tiff" != "xno"
+then
+    WINE_PACKAGE_FLAGS(TIFF,[libtiff-4],,,,
+        [AC_CHECK_HEADERS([tiffio.h])
+        if test "$ac_cv_header_tiffio_h" = "yes"
+        then
+            WINE_CHECK_SONAME(tiff,TIFFClientOpen,,,[$TIFF_LIBS])
+        fi])
+fi
+WINE_NOTICE_WITH(tiff,[test "x$ac_cv_lib_soname_tiff" = "x"],
+                 [libtiff ${notice_platform}development files not found, TIFF won't be supported.])
+
+dnl **** Check for libtxc_dxtn ****
+WINE_CHECK_SONAME(txc_dxtn,tx_compress_dxtn,,,,[[libtxc_dxtn\\(_s2tc\\)\\{0,1\\}]])
+
+dnl **** Check for mpg123 ****
+if test "x$with_mpg123" != "xno"
+then
+    WINE_PACKAGE_FLAGS(MPG123,[libmpg123],[-lmpg123],,,
+        [AC_CHECK_HEADERS([mpg123.h])
+        if test "$ac_cv_header_mpg123_h" = "yes"
+        then
+            AC_CHECK_LIB(mpg123,mpg123_feed,[:],[MPG123_LIBS=""],[$MPG123_LIBS])
+        else
+            MPG123_CFLAGS=""
+            MPG123_LIBS=""
+        fi])
+fi
+WINE_NOTICE_WITH(mpg123,[test "x$ac_cv_lib_mpg123_mpg123_feed" != xyes -a x"$ac_cv_header_CoreAudio_CoreAudio_h" != xyes],
+                 [libmpg123 ${notice_platform}development files not found (or too old), mp3 codec won't be supported.],
+                 [enable_winemp3_acm])
+
+dnl **** Check for OpenAL 1.1 ****
+if test "$ac_cv_header_AL_al_h" = "yes"
+then
+    WINE_CHECK_SONAME(openal,alGetSource3i,[AC_SUBST(OPENAL_LIBS,"-lopenal")
+                      ac_cv_lib_openal=yes
+                      AC_DEFINE_UNQUOTED(HAVE_OPENAL,1,[Define to 1 if OpenAL is available])],,)
+fi
+WINE_NOTICE_WITH(openal,[test "x$ac_cv_lib_openal" != xyes],
+                 [libopenal ${notice_platform}development files not found (or too old), OpenAL won't be supported],
+                 [enable_openal32])
+
+dnl **** Check for openal-soft ****
+if test "x$ac_cv_lib_openal" = xyes
+then
+    AC_CACHE_CHECK([for openal-soft], ac_cv_have_openalsoft,
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+            [[#include <AL/al.h>
+#include <AL/alc.h>
+#include <AL/alext.h>
+LPALCRENDERSAMPLESSOFT x;]])],[ac_cv_have_openalsoft=yes],[ac_cv_have_openalsoft=no]))
+fi
+if test "x$ac_cv_have_openalsoft" != xyes
+then
+    WINE_NOTICE([openal-soft ${notice_platform}development files not found (or too old), XAudio2 won't be supported])
+    enable_x3daudio1_0=${enable_x3daudio1_0:-no}
+    enable_x3daudio1_1=${enable_x3daudio1_1:-no}
+    enable_x3daudio1_2=${enable_x3daudio1_2:-no}
+    enable_x3daudio1_3=${enable_x3daudio1_3:-no}
+    enable_x3daudio1_4=${enable_x3daudio1_4:-no}
+    enable_x3daudio1_5=${enable_x3daudio1_5:-no}
+    enable_x3daudio1_6=${enable_x3daudio1_6:-no}
+    enable_x3daudio1_7=${enable_x3daudio1_7:-no}
+    enable_xapofx1_1=${enable_xapofx1_1:-no}
+    enable_xapofx1_2=${enable_xapofx1_2:-no}
+    enable_xapofx1_3=${enable_xapofx1_3:-no}
+    enable_xapofx1_4=${enable_xapofx1_4:-no}
+    enable_xapofx1_5=${enable_xapofx1_5:-no}
+    enable_xaudio2_0=${enable_xaudio2_0:-no}
+    enable_xaudio2_1=${enable_xaudio2_1:-no}
+    enable_xaudio2_2=${enable_xaudio2_2:-no}
+    enable_xaudio2_3=${enable_xaudio2_3:-no}
+    enable_xaudio2_4=${enable_xaudio2_4:-no}
+    enable_xaudio2_5=${enable_xaudio2_5:-no}
+    enable_xaudio2_6=${enable_xaudio2_6:-no}
+    enable_xaudio2_7=${enable_xaudio2_7:-no}
+    enable_xaudio2_8=${enable_xaudio2_8:-no}
+    enable_xaudio2_9=${enable_xaudio2_9:-no}
+fi
+
+dnl **** Check for libkstat ****
+if test "$ac_cv_header_kstat_h" = "yes"
+then
+    AC_CHECK_LIB(kstat,kstat_open,
+                 [AC_DEFINE(HAVE_LIBKSTAT, 1, [Define to 1 if you have the `kstat' library (-lkstat).])
+                  AC_SUBST(KSTAT_LIBS,"-lkstat")])
+fi
+
+dnl **** Check for libprocstat ****
+if test "$ac_cv_header_libprocstat_h" = "yes"
+then
+    AC_CHECK_LIB(procstat,procstat_open_sysctl,
+                 [AC_DEFINE(HAVE_LIBPROCSTAT, 1, [Define to 1 if you have the `procstat' library (-lprocstat).])
+                  AC_SUBST(PROCSTAT_LIBS,"-lprocstat")])
+fi
+
+dnl **** Check for libodbc ****
+WINE_CHECK_SONAME(odbc,SQLConnect,,[AC_DEFINE_UNQUOTED(SONAME_LIBODBC,["libodbc.$LIBEXT"])])
+
+dnl **** Check for libnetapi ****
+if test "x$with_netapi" != "xno"
+then
+    WINE_PACKAGE_FLAGS(NETAPI,[netapi],,,,
+      [WINE_CHECK_SONAME(netapi,libnetapi_init,,[AC_DEFINE_UNQUOTED(SONAME_LIBNETAPI,["libnetapi.$LIBEXT"])],[$NETAPI_LIBS])])
+fi
+
+dnl **** Check for any sound system ****
+if test "x$enable_winealsa_drv$enable_winecoreaudio_drv$enable_winepulse_drv$enable_wineoss_drv" = xnononono -a \
+        "x$with_alsa$with_coreaudio$with_oss$with_pulse" != xnononono
+then
+    WINE_WARNING([No sound system was found. Windows applications will be silent.])
+fi
+
+dnl **** Check for gcc specific options ****
+
+AC_SUBST(EXTRACFLAGS,"")
+if test "x${GCC}" = "xyes"
+then
+  EXTRACFLAGS="-Wall -pipe"
+
+  dnl Check for strength-reduce bug
+  AC_CACHE_CHECK( [for gcc strength-reduce bug], ac_cv_c_gcc_strength_bug,
+                  AC_RUN_IFELSE([AC_LANG_PROGRAM([[int L[[4]] = {0,1,2,3};]],
+[[static int Array[[3]];
+  unsigned int B = 3;
+  int i;
+  for(i=0; i<B; i++) Array[[i]] = i - 3;
+  for(i=0; i<4 - 1; i++) L[[i]] = L[[i + 1]];
+  L[[i]] = 4;
+  return (Array[[1]] != -2 || L[[2]] != 3)]])],
+    [ac_cv_c_gcc_strength_bug="no"],[ac_cv_c_gcc_strength_bug="yes"],[ac_cv_c_gcc_strength_bug="no"]) )
+  if test "$ac_cv_c_gcc_strength_bug" = "yes"
+  then
+    EXTRACFLAGS="$EXTRACFLAGS -fno-strength-reduce"
+  fi
+
+  dnl Check for some compiler flags
+  WINE_TRY_CFLAGS([-fno-builtin],[AC_SUBST(BUILTINFLAG,"-fno-builtin")])
+  WINE_TRY_CFLAGS([-fno-strict-aliasing])
+  WINE_TRY_CFLAGS([-fexcess-precision=standard],[AC_SUBST(EXCESS_PRECISION_CFLAGS,"-fexcess-precision=standard")])
+  dnl clang needs to be told to fail on unknown options
+  saved_CFLAGS=$CFLAGS
+  WINE_TRY_CFLAGS([-Werror=unknown-warning-option],[CFLAGS="$CFLAGS -Werror=unknown-warning-option"])
+  WINE_TRY_CFLAGS([-Wdeclaration-after-statement])
+  WINE_TRY_CFLAGS([-Wempty-body])
+  WINE_TRY_CFLAGS([-Wignored-qualifiers])
+  WINE_TRY_CFLAGS([-Wshift-overflow=2])
+  WINE_TRY_CFLAGS([-Wstrict-prototypes])
+  WINE_TRY_CFLAGS([-Wtype-limits])
+  WINE_TRY_CFLAGS([-Wunused-but-set-parameter])
+  WINE_TRY_CFLAGS([-Wvla])
+  WINE_TRY_CFLAGS([-Wwrite-strings])
+
+  dnl Check for noisy string.h
+  WINE_TRY_CFLAGS([-Wpointer-arith],
+     [saved_string_h_CFLAGS=$CFLAGS
+      CFLAGS="$CFLAGS -Wpointer-arith -Werror"
+      AC_CACHE_CHECK([for broken string.h that generates warnings with -Wpointer-arith], ac_cv_c_string_h_warnings,
+          AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <string.h>]])],[ac_cv_c_string_h_warnings=no],[ac_cv_c_string_h_warnings=yes]))
+      test "$ac_cv_c_string_h_warnings" = yes || EXTRACFLAGS="$EXTRACFLAGS -Wpointer-arith"
+      CFLAGS=$saved_string_h_CFLAGS])
+
+  dnl Check for noisy string.h on logical ops
+  WINE_TRY_CFLAGS([-Wlogical-op],
+     [saved_string_h_CFLAGS=$CFLAGS
+      CFLAGS="$CFLAGS -Wlogical-op -Werror"
+      AC_CACHE_CHECK([for broken string.h that generates warnings with -Wlogical-op], ac_cv_c_logicalop_noisy,
+          AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <string.h>
+char*f(const char *h,char n) {return strchr(h,n);}]])],[ac_cv_c_logicalop_noisy=no],[ac_cv_c_logicalop_noisy=yes]))
+      CFLAGS=$saved_string_h_CFLAGS
+      test "$ac_cv_c_logicalop_noisy" = yes || EXTRACFLAGS="$EXTRACFLAGS -Wlogical-op"])
+
+  CFLAGS=$saved_CFLAGS
+
+  dnl Default to dwarf-2 debug info
+  for ac_flag in $CFLAGS; do
+    case $ac_flag in
+      -g) WINE_TRY_CFLAGS([-gdwarf-2])
+          WINE_TRY_CFLAGS([-gstrict-dwarf]) ;;
+    esac
+  done
+
+  dnl gcc-4.6+ omits frame pointers by default, breaking some copy protections
+  case $host_cpu in
+    *i[[3456789]]86*) WINE_TRY_CFLAGS([-fno-omit-frame-pointer]) ;;
+  esac
+
+  dnl mingw uses Windows 64-bit types, not Unix ones
+  case $host in
+    x86_64-*mingw32*|x86_64-*cygwin*) WINE_TRY_CFLAGS([-Wno-format]) ;;
+  esac
+
+  dnl Enable -Werror for maintainer mode
+  if test "x$enable_maintainer_mode" = "xyes"
+  then
+      WINE_TRY_CFLAGS([-Werror])
+  fi
+
+  dnl Check for ms_hook_prologue support
+  saved_CFLAGS="$CFLAGS"
+  CFLAGS="$CFLAGS -Werror"
+  AC_CACHE_CHECK([for ms_hook_prologue attribute], ac_cv_have_ms_hook_prologue,
+                 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[int __attribute__((__ms_hook_prologue__)) test(void) { return 0; }]])],
+                                   [ac_cv_have_ms_hook_prologue="yes"],[ac_cv_have_ms_hook_prologue="no"]))
+  CFLAGS="$saved_CFLAGS"
+  if test "$ac_cv_have_ms_hook_prologue" = "yes"
+  then
+      AC_DEFINE(DECLSPEC_HOTPATCH, [__attribute__((__ms_hook_prologue__))],
+                [Define to a function attribute for Microsoft hotpatch assembly prefix.])
+  else
+      AC_DEFINE(DECLSPEC_HOTPATCH, [/* */])
+  fi
+fi
+
+dnl **** Disable Fortify, it has too many false positives
+
+AC_CACHE_CHECK([for the need to disable Fortify], ac_cv_c_fortify_enabled,
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <string.h>]],
+[[#if (defined(__USE_FORTIFY_LEVEL) && __USE_FORTIFY_LEVEL > 0) || (defined(_FORTIFY_SOURCE) && _FORTIFY_SOURCE > 0)
+#error Fortify enabled
+#endif]])],
+        [ac_cv_c_fortify_enabled=no],[ac_cv_c_fortify_enabled=yes]))
+if test "$ac_cv_c_fortify_enabled" = yes
+then
+    CFLAGS="$CFLAGS -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"
+fi
+
+dnl **** Check for underscore on external symbols ****
+
+AC_CACHE_CHECK([whether external symbols need an underscore prefix], ac_cv_c_extern_prefix,
+    WINE_TRY_ASM_LINK([".globl _ac_test\n_ac_test:\t.long 0"],
+                      [extern int ac_test;],
+                      [if (ac_test) return 1],
+                      ac_cv_c_extern_prefix="yes",ac_cv_c_extern_prefix="no"))
+
+case $host_cpu in
+  *i[[3456789]]86*)
+    AC_CACHE_CHECK([whether external symbols need stdcall decoration], ac_cv_c_stdcall_suffix,
+        WINE_TRY_ASM_LINK(["jmp _ac_test@4"],
+[#ifndef _MSC_VER
+#define __stdcall __attribute__((__stdcall__))
+#endif
+int __stdcall ac_test(int i) { return i; }],
+                          [if (ac_test(1)) return 1],
+                          ac_cv_c_stdcall_suffix="yes",ac_cv_c_stdcall_suffix="no")) ;;
+  *) ac_cv_c_stdcall_suffix="no" ;;
+esac
+
+AH_TEMPLATE(__ASM_NAME,[Define to a macro to generate an assembly name from a C symbol])
+if test "$ac_cv_c_extern_prefix" = "yes"
+then
+    AC_DEFINE([__ASM_NAME(name)], ["_" name])
+    asm_name_prefix="_"
+else
+    AC_DEFINE([__ASM_NAME(name)], [name])
+    asm_name_prefix=""
+fi
+
+AH_TEMPLATE(__ASM_STDCALL,[Define to a macro to generate an stdcall suffix])
+if test "$ac_cv_c_stdcall_suffix" = "yes"
+then
+    AC_DEFINE([__ASM_STDCALL(args)],["@" #args])
+else
+    AC_DEFINE([__ASM_STDCALL(args)],[""])
+fi
+
+dnl **** Check how to define a function in assembly code ****
+
+AC_CACHE_CHECK([how to define a function in assembly code], ac_cv_asm_func_def,
+  WINE_TRY_ASM_LINK(
+      ["\t.globl _ac_test\n\t.def _ac_test; .scl 2; .type 32; .endef\n_ac_test:\t.long 0"],,,
+      ac_cv_asm_func_def=".def",
+    [WINE_TRY_ASM_LINK(["\t.globl _ac_test\n\t.type _ac_test,@function\n_ac_test:\t.long 0"],,,
+      ac_cv_asm_func_def=".type @function",
+    [WINE_TRY_ASM_LINK(["\t.globl _ac_test\n\t.type _ac_test,2\n_ac_test:\t.long 0"],,,
+      ac_cv_asm_func_def=".type 2",
+      ac_cv_asm_func_def="unknown")])]))
+
+AH_TEMPLATE(__ASM_FUNC,[Define to a macro to generate an assembly function directive])
+case "$ac_cv_asm_func_def" in
+  ".def")
+     AC_DEFINE([__ASM_FUNC(name)], [".def " __ASM_NAME(name) "; .scl 2; .type 32; .endef"])
+     asm_func_header=".def $asm_name_prefix\" #name suffix \"; .scl 2; .type 32; .endef" ;;
+  ".type @function")
+     AC_DEFINE([__ASM_FUNC(name)], [".type " __ASM_NAME(name) ",@function"])
+     asm_func_header=".type $asm_name_prefix\" #name suffix \",@function" ;;
+  ".type 2")
+     AC_DEFINE([__ASM_FUNC(name)], [".type " __ASM_NAME(name) ",2"])
+     asm_func_header=".type $asm_name_prefix\" #name suffix \",2" ;;
+  *)
+     AC_DEFINE([__ASM_FUNC(name)], [""])
+     asm_func_header="" ;;
+esac
+
+AC_CACHE_CHECK([whether asm() works outside of functions], ac_cv_c_asm_outside_funcs,
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[asm(".text\n\t.long 0");]],)],
+                      ac_cv_c_asm_outside_funcs="yes",ac_cv_c_asm_outside_funcs="no"))
+
+AC_CACHE_CHECK([whether .previous is supported in assembly code], ac_cv_c_dot_previous,
+    WINE_TRY_ASM_LINK([".text\nac_test:\t.long 0\n\t.previous"],,,
+                      ac_cv_c_dot_previous="yes",ac_cv_c_dot_previous="no"))
+
+AC_CACHE_CHECK([whether CFI directives are supported in assembly code], ac_cv_c_cfi_support,
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[asm(".text\nac_test:\t.cfi_startproc\n\t.long 0\n\t.cfi_endproc");]])],
+                      ac_cv_c_cfi_support="yes",ac_cv_c_cfi_support="no"))
+
+asm_func_header=".globl $asm_name_prefix\" #name suffix \"\\n\\t$asm_func_header\\n$asm_name_prefix\" #name suffix \":\\n\\t"
+asm_func_trailer=""
+if test "$ac_cv_c_dot_previous" = "yes"
+then
+   asm_func_trailer="\\n\\t.previous"
+fi
+if test "$ac_cv_c_cfi_support" = "yes"
+then
+   asm_func_header="$asm_func_header.cfi_startproc\\n\\t"
+   asm_func_trailer="\\n\\t.cfi_endproc$asm_func_trailer"
+   AC_DEFINE([__ASM_CFI(str)],[str],[Define to a macro to output a .cfi assembly pseudo-op])
+   AC_SUBST([UNWINDFLAGS],[-fasynchronous-unwind-tables])
+else
+   AC_DEFINE([__ASM_CFI(str)],[""])
+   if test "x$enable_win64" = "xyes"
+   then
+      WINE_WARNING([building 64-bit Wine without support for CFI directives; exception handling will not work properly.])
+   fi
+fi
+
+asm_func_code="$asm_func_header\" code \"$asm_func_trailer"
+
+AH_TEMPLATE(__ASM_DEFINE_FUNC,[Define to a macro to define an assembly function])
+if test "$ac_cv_c_asm_outside_funcs" = "yes"
+then
+    AC_DEFINE_UNQUOTED([__ASM_DEFINE_FUNC(name,suffix,code)],[asm(".text\n\t.align 4\n\t$asm_func_code");])
+else
+    AC_DEFINE_UNQUOTED([__ASM_DEFINE_FUNC(name,suffix,code)],[void __asm_dummy_##name(void) { asm(".text\n\t.align 4\n\t$asm_func_code"); }])
+fi
+AC_DEFINE([__ASM_GLOBAL_FUNC(name,code)],[__ASM_DEFINE_FUNC(name,"",code)],
+          [Define to a macro to generate an assembly function with C calling convention])
+AC_DEFINE([__ASM_STDCALL_FUNC(name,args,code)],[__ASM_DEFINE_FUNC(name,__ASM_STDCALL(args),code)],
+          [Define to a macro to generate an assembly function with stdcall calling convention])
+
+dnl **** Platform-specific checks ****
+
+case $build_os in
+  cygwin*|mingw32*) AC_SUBST(TOOLSEXT,".exe") ;;
+esac
+
+case $host_os in
+  linux-android*) ;;
+  linux*)
+    case $host_cpu in
+      *i[[3456789]]86*|x86_64*)
+        test "$wine_binary" = wine || WINE_IGNORE_FILE("loader/wine-preloader")
+        WINELOADER_PROGRAMS="$WINELOADER_PROGRAMS $wine_binary-preloader"
+        ;;
+    esac
+    ;;
+esac
+
+dnl **** Check for functions ****
+
+ac_save_CFLAGS="$CFLAGS"
+CFLAGS="$CFLAGS $BUILTINFLAG"
+AC_CHECK_FUNCS(\
+        __res_get_state \
+        __res_getservers \
+	_finite \
+	_isnan \
+	_pclose \
+	_popen \
+	_snprintf \
+	_spawnvp \
+	_strdup \
+	_stricmp \
+	_strnicmp \
+	_strtoi64 \
+	_strtoui64 \
+	_vsnprintf \
+	asctime_r \
+	chsize \
+	dlopen \
+	epoll_create \
+	ffs \
+	finitef \
+	fnmatch \
+	fork \
+	fpclass \
+	fstatfs \
+	fstatvfs \
+	ftruncate \
+	futimens \
+	futimes \
+	futimesat \
+	getattrlist \
+	getopt_long_only \
+	getpwuid \
+	gettimeofday \
+	getuid \
+	if_nameindex \
+	isnanf \
+	kqueue \
+	lstat \
+	memmove \
+	mmap \
+	pclose \
+	pipe2 \
+	poll \
+	popen \
+	port_create \
+	prctl \
+	pread \
+	proc_pidinfo \
+	pwrite \
+	readdir \
+	readlink \
+	sched_yield \
+	select \
+	setproctitle \
+	setprogname \
+	setrlimit \
+	settimeofday \
+	sigaltstack \
+	sigprocmask \
+	snprintf \
+	statfs \
+	statvfs \
+	strcasecmp \
+	strdup \
+	strerror \
+	strncasecmp \
+	strtold \
+	strtoll \
+	strtoull \
+	symlink \
+	tcdrain \
+	thr_kill2 \
+	timegm \
+	usleep \
+	vsnprintf
+)
+CFLAGS="$ac_save_CFLAGS"
+
+dnl Check for -ldl
+if test "$ac_cv_func_dlopen" = no
+then
+    AC_CHECK_LIB(dl,dlopen,[AC_DEFINE(HAVE_DLOPEN,1) AC_SUBST(DL_LIBS,"-ldl")])
+fi
+WINE_CHECK_LIB_FUNCS(dladdr,[$DL_LIBS])
+
+dnl Check for -lpoll for Mac OS X/Darwin
+if test "$ac_cv_func_poll" = no
+then
+    AC_CHECK_LIB(poll,poll,[AC_DEFINE(HAVE_POLL,1) AC_SUBST(POLL_LIBS,"-lpoll")])
+fi
+
+dnl Check for -lnsl for Solaris
+AC_SEARCH_LIBS(gethostbyname, nsl)
+
+dnl Check for -lsocket for Solaris
+AC_SEARCH_LIBS(connect, socket)
+
+dnl Check for -lresolv for Solaris
+AC_SEARCH_LIBS(inet_aton, resolv)
+
+dnl **** Check for functions which may rely on -lsocket on Solaris.
+AC_CHECK_FUNCS(\
+	getaddrinfo \
+	getnameinfo \
+	getnetbyname \
+	getprotobyname \
+	getprotobynumber \
+	getservbyport \
+	inet_addr \
+	inet_network \
+	inet_ntop \
+	inet_pton \
+	sendmsg \
+	socketpair \
+)
+
+dnl Check for clock_gettime which may be in -lrt
+ac_save_LIBS=$LIBS
+AC_SEARCH_LIBS(clock_gettime, rt,
+               [AC_DEFINE(HAVE_CLOCK_GETTIME, 1, [Define to 1 if you have the `clock_gettime' function.])
+                test "$ac_res" = "none required" || AC_SUBST(RT_LIBS,"$ac_res")])
+LIBS=$ac_save_LIBS
+
+dnl **** Check for OpenLDAP ***
+AC_SUBST(LDAP_LIBS,"")
+if test "$ac_cv_header_ldap_h" = "yes" -a "$ac_cv_header_lber_h" = "yes"
+then
+    AC_CHECK_TYPE(LDAPSortKey,
+        [AC_CHECK_LIB(ldap_r, ldap_initialize,
+            [AC_CHECK_LIB(lber, ber_init,
+                [AC_DEFINE(HAVE_LDAP, 1, [Define if you have the OpenLDAP development environment])
+                 LDAP_LIBS="-lldap_r -llber"],,
+                 [$PTHREAD_LIBS])],,
+                 [$PTHREAD_LIBS])],,
+        [#include <ldap.h>])
+    WINE_CHECK_LIB_FUNCS(\
+	ldap_count_references \
+	ldap_first_reference \
+	ldap_next_reference \
+	ldap_parse_reference \
+	ldap_parse_sort_control \
+	ldap_parse_sortresponse_control \
+	ldap_parse_vlv_control \
+	ldap_parse_vlvresponse_control,
+        [$LDAP_LIBS $PTHREAD_LIBS])
+fi
+WINE_NOTICE_WITH(ldap,[test "x$LDAP_LIBS" = "x"],
+                 [libldap (OpenLDAP) ${notice_platform}development files not found, LDAP won't be supported.])
+
+AC_CACHE_CHECK([whether mkdir takes only one argument],
+   	wine_cv_one_arg_mkdir,
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/stat.h>]],[[mkdir("foo");]])],
+                          [wine_cv_one_arg_mkdir=yes],[wine_cv_one_arg_mkdir=no]))
+if test "$wine_cv_one_arg_mkdir" = "yes"
+then
+  AC_DEFINE(HAVE_ONE_ARG_MKDIR, 1, [Define if mkdir takes only one argument])
+fi
+
+AC_CACHE_CHECK([for sched_setaffinity],wine_cv_have_sched_setaffinity,
+                AC_LINK_IFELSE([AC_LANG_PROGRAM(
+[[#define _GNU_SOURCE
+#include <sched.h>]], [[sched_setaffinity(0, 0, 0);]])],[wine_cv_have_sched_setaffinity=yes],[wine_cv_have_sched_setaffinity=no]))
+if test "$wine_cv_have_sched_setaffinity" = "yes"
+then
+  AC_DEFINE(HAVE_SCHED_SETAFFINITY, 1, [Define to 1 if you have the `sched_setaffinity' function.])
+fi
+
+AC_CACHE_CHECK([for fallocate],wine_cv_have_fallocate,
+                AC_LINK_IFELSE([AC_LANG_PROGRAM(
+[[#define _GNU_SOURCE
+#include <fcntl.h>]], [[fallocate(-1, 0, 0, 0);]])],[wine_cv_have_fallocate=yes],[wine_cv_have_fallocate=no]))
+if test "$wine_cv_have_fallocate" = "yes"
+then
+  AC_DEFINE(HAVE_FALLOCATE, 1, [Define to 1 if you have the `fallocate' function.])
+fi
+
+dnl **** Check for types ****
+
+AC_C_INLINE
+AC_CHECK_TYPES([mode_t, off_t, pid_t, size_t, ssize_t, long long, fsblkcnt_t, fsfilcnt_t])
+AC_CHECK_TYPES([sigset_t],,,[#include <sys/types.h>
+#include <signal.h>])
+AC_CHECK_TYPES([request_sense],,,[#include <linux/cdrom.h>])
+
+AC_CHECK_TYPES([struct xinpgen],,,
+[#include <sys/types.h>
+#ifdef HAVE_SYS_SOCKET_H
+#include <sys/socket.h>
+#endif
+#ifdef HAVE_SYS_SOCKETVAR_H
+#include <sys/socketvar.h>
+#endif
+#ifdef HAVE_NET_ROUTE_H
+#include <net/route.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#ifdef HAVE_NETINET_IN_SYSTM_H
+#include <netinet/in_systm.h>
+#endif
+#ifdef HAVE_NETINET_IP_H
+#include <netinet/ip.h>
+#endif
+#ifdef HAVE_NETINET_IN_PCB_H
+#include <netinet/in_pcb.h>
+#endif])
+
+AC_CHECK_TYPES([struct r_debug, struct link_map],,,
+[#ifdef HAVE_LINK_H
+#include <link.h>
+#endif
+#ifdef HAVE_SYS_LINK_H
+#include <sys/link.h>
+#endif])
+
+AC_CHECK_MEMBERS([struct ff_effect.direction],,,
+[#ifdef HAVE_LINUX_INPUT_H
+#include <linux/input.h>
+#endif])
+
+AC_CACHE_CHECK([for sigaddset],wine_cv_have_sigaddset,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]], [[sigset_t set; sigaddset(&set,SIGTERM);]])],[wine_cv_have_sigaddset=yes],[wine_cv_have_sigaddset=no]))
+if test "$wine_cv_have_sigaddset" = "yes"
+then
+  AC_DEFINE(HAVE_SIGADDSET, 1, [Define if sigaddset is supported])
+fi
+
+
+AC_CACHE_CHECK([whether we can use re-entrant gethostbyname_r Linux style],
+   	wine_cv_linux_gethostbyname_r_6,
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]],[[
+    char *name=0;
+    struct hostent he;
+    struct hostent *result;
+    char *buf=0;
+    int bufsize=0;
+    int errnr;
+    char *addr=0;
+    int addrlen=0;
+    int addrtype=0;
+    gethostbyname_r(name,&he,buf,bufsize,&result,&errnr);
+    gethostbyaddr_r(addr, addrlen, addrtype,&he,buf,bufsize,&result,&errnr);
+    ]])],[wine_cv_linux_gethostbyname_r_6=yes],[wine_cv_linux_gethostbyname_r_6=no
+	])
+   )
+   if test "$wine_cv_linux_gethostbyname_r_6" = "yes"
+   then
+      AC_DEFINE(HAVE_LINUX_GETHOSTBYNAME_R_6, 1,
+                [Define if Linux-style gethostbyname_r and gethostbyaddr_r are available])
+   fi
+
+if test "$ac_cv_header_linux_joystick_h" = "yes"
+then
+   AC_CACHE_CHECK([whether linux/joystick.h uses the Linux 2.2+ API],
+   	wine_cv_linux_joystick_22_api,
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+	#include <sys/ioctl.h>
+	#include <sys/types.h>
+	#include <linux/joystick.h>
+
+	struct js_event blub;
+	#if !defined(JS_EVENT_AXIS) || !defined(JS_EVENT_BUTTON)
+	#error "no 2.2 header"
+	#endif
+	]], [[/*empty*/]])],[wine_cv_linux_joystick_22_api=yes],[wine_cv_linux_joystick_22_api=no])
+   )
+   if test "$wine_cv_linux_joystick_22_api" = "yes"
+   then
+      AC_DEFINE(HAVE_LINUX_22_JOYSTICK_API, 1,
+                [Define if <linux/joystick.h> defines the Linux 2.2 joystick API])
+   fi
+fi
+
+dnl **** FIXME: what about mixed cases, where we need two of them? ***
+
+dnl Check for statfs members
+AC_CHECK_MEMBERS([struct statfs.f_bfree, struct statfs.f_bavail, struct statfs.f_frsize, struct statfs.f_ffree, struct statfs.f_favail, struct statfs.f_namelen],,,
+[#include <sys/types.h>
+#ifdef HAVE_SYS_PARAM_H
+# include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_MOUNT_H
+# include <sys/mount.h>
+#endif
+#ifdef HAVE_SYS_VFS_H
+# include <sys/vfs.h>
+#endif
+#ifdef HAVE_SYS_STATFS_H
+# include <sys/statfs.h>
+#endif])
+
+AC_CHECK_MEMBERS([struct statvfs.f_blocks],,,
+[#ifdef HAVE_SYS_STATVFS_H
+#include <sys/statvfs.h>
+#endif])
+
+dnl Check for dirent.d_reclen
+AC_CHECK_MEMBERS([struct dirent.d_reclen],,,
+[#ifdef HAVE_DIRENT_H
+#include <dirent.h>
+#endif])
+
+dnl Check for socket structure members
+AC_CHECK_MEMBERS([struct msghdr.msg_accrights, struct sockaddr.sa_len, struct sockaddr_un.sun_len],,,
+[#include <sys/types.h>
+#ifdef HAVE_SYS_SOCKET_H
+# include <sys/socket.h>
+#endif
+#ifdef HAVE_SYS_UN_H
+# include <sys/un.h>
+#endif])
+
+dnl Check for scsireq_t and sg_io_hdr_t members
+AC_CHECK_MEMBERS([scsireq_t.cmd, sg_io_hdr_t.interface_id],,,
+[#include <sys/types.h>
+#ifdef HAVE_SCSI_SG_H
+#include <scsi/sg.h>
+#endif])
+
+dnl Check for siginfo_t members
+AC_CHECK_MEMBERS([siginfo_t.si_fd],,,[#include <signal.h>])
+
+dnl Check for struct mtget members
+AC_CHECK_MEMBERS([struct mtget.mt_blksiz, struct mtget.mt_gstat, struct mtget.mt_blkno],,,
+[#include <sys/types.h>
+#ifdef HAVE_SYS_MTIO_H
+#include <sys/mtio.h>
+#endif])
+
+dnl Check for struct option
+AC_CHECK_MEMBERS([struct option.name],,,
+[#ifdef HAVE_GETOPT_H
+#include <getopt.h>
+#endif])
+
+dnl Check for stat.st_blocks and ns-resolved times
+AC_CHECK_MEMBERS([
+	struct stat.st_blocks,
+	struct stat.st_mtim,
+	struct stat.st_mtimespec,
+	struct stat.st_ctim,
+	struct stat.st_ctimespec,
+	struct stat.st_atim,
+	struct stat.st_atimespec,
+	struct stat.st_birthtime,
+	struct stat.st_birthtim,
+	struct stat.st_birthtimespec,
+	struct stat.__st_birthtime,
+	struct stat.__st_birthtim])
+
+dnl Check for sin6_scope_id
+AC_CHECK_MEMBERS([struct sockaddr_in6.sin6_scope_id],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif])
+
+dnl Check for struct __res_state
+AC_CHECK_TYPES([struct __res_state],,,
+[#ifdef HAVE_RESOLV_H
+#include <resolv.h>
+#endif])
+
+dnl Check for _u._ext.nscount6
+AC_CHECK_MEMBERS([struct __res_state._u._ext.nscount6],,,
+[#ifdef HAVE_RESOLV_H
+#include <resolv.h>
+#endif])
+
+dnl Check for ns_msg ptr member
+AC_CHECK_MEMBERS([ns_msg._msg_ptr],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+# include <netinet/in.h>
+#endif
+#ifdef HAVE_ARPA_NAMESER_H
+# include <arpa/nameser.h>
+#endif])
+
+dnl Check for struct icmpstat
+AC_CHECK_MEMBERS([struct icmpstat.icps_inhist],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_NETINET_IP_H
+#include <netinet/ip.h>
+#endif
+#ifdef HAVE_NETINET_IP_ICMP_H
+#include <netinet/ip_icmp.h>
+#endif
+#ifdef HAVE_NETINET_ICMP_VAR_H
+#include <netinet/icmp_var.h>
+#endif])
+
+dnl Check for struct icmpstat.icps_outhist
+AC_CHECK_MEMBERS([struct icmpstat.icps_outhist],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_ALIAS_H
+#include <alias.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+#include <sys/socket.h>
+#endif
+#ifdef HAVE_SYS_SOCKETVAR_H
+#include <sys/socketvar.h>
+#endif
+#ifdef HAVE_SYS_TIMEOUT_H
+#include <sys/timeout.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#ifdef HAVE_NETINET_IN_SYSTM_H
+#include <netinet/in_systm.h>
+#endif
+#ifdef HAVE_NETINET_IP_H
+#include <netinet/ip.h>
+#endif
+#ifdef HAVE_NETINET_IP_VAR_H
+#include <netinet/ip_var.h>
+#endif
+#ifdef HAVE_NETINET_IP_ICMP_H
+#include <netinet/ip_icmp.h>
+#endif
+#ifdef HAVE_NETINET_ICMP_VAR_H
+#include <netinet/icmp_var.h>
+#endif])
+
+dnl Check for struct ipstat
+AC_CHECK_MEMBERS([struct ipstat.ips_total],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKETVAR_H
+#include <sys/socketvar.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#ifdef HAVE_NETINET_IP_VAR_H
+#include <netinet/ip_var.h>
+#endif])
+
+dnl Check for struct ip_stats
+AC_CHECK_MEMBERS([struct ip_stats.ips_total],,,
+[#ifdef HAVE_NETINET_IP_VAR_H
+#include <netinet/ip_var.h>
+#endif])
+
+dnl Check for struct tcpstat
+AC_CHECK_MEMBERS([struct tcpstat.tcps_connattempt],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKETVAR_H
+#include <sys/socketvar.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#ifdef HAVE_NETINET_TCP_H
+#include <netinet/tcp.h>
+#endif
+#ifdef HAVE_NETINET_TCP_VAR_H
+#include <netinet/tcp_var.h>
+#endif])
+
+dnl Check for struct tcp_stats
+AC_CHECK_MEMBERS([struct tcp_stats.tcps_connattempt],,,
+[#ifdef HAVE_NETINET_TCP_VAR_H
+#include <netinet/tcp_var.h>
+#endif])
+
+dnl Check for struct udpstat
+AC_CHECK_MEMBERS([struct udpstat.udps_ipackets],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
+#ifdef HAVE_NETINET_IP_VAR_H
+#include <netinet/ip_var.h>
+#endif
+#ifdef HAVE_NETINET_UDP_H
+#include <netinet/udp.h>
+#endif
+#ifdef HAVE_NETINET_UDP_VAR_H
+#include <netinet/udp_var.h>
+#endif])
+
+dnl Check for struct ifreq.ifr_hwaddr
+AC_CHECK_MEMBERS([struct ifreq.ifr_hwaddr],,,
+[#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_NET_IF_H
+# include <net/if.h>
+#endif])
+
+dnl Check for the external timezone variables timezone and daylight
+AC_CACHE_CHECK([for timezone variable], ac_cv_have_timezone,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[timezone = 1]])],[ac_cv_have_timezone="yes"],[ac_cv_have_timezone="no"]))
+if test "$ac_cv_have_timezone" = "yes"
+then
+    AC_DEFINE(HAVE_TIMEZONE, 1, [Define if you have the timezone variable])
+fi
+AC_CACHE_CHECK([for daylight variable], ac_cv_have_daylight,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[daylight = 1]])],[ac_cv_have_daylight="yes"],[ac_cv_have_daylight="no"]))
+if test "$ac_cv_have_daylight" = "yes"
+then
+    AC_DEFINE(HAVE_DAYLIGHT, 1, [Define if you have the daylight variable])
+fi
+
+dnl Check for isfinite
+ac_save_LIBS="$LIBS"
+LIBS="$LIBS -lm"
+AC_CACHE_CHECK([for isfinite], ac_cv_have_isfinite,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#define _GNU_SOURCE
+#include <math.h>]], [[float f = 0.0; return isfinite(f)]])],[ac_cv_have_isfinite="yes"],[ac_cv_have_isfinite="no"]))
+if test "$ac_cv_have_isfinite" = "yes"
+then
+    AC_DEFINE(HAVE_ISFINITE, 1, [Define to 1 if you have the `isfinite' function.])
+fi
+
+dnl Check for isinf
+AC_CACHE_CHECK([for isinf], ac_cv_have_isinf,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]], [[float f = 0.0; return isinf(f)]])],[ac_cv_have_isinf="yes"],[ac_cv_have_isinf="no"]))
+if test "$ac_cv_have_isinf" = "yes"
+then
+    AC_DEFINE(HAVE_ISINF, 1, [Define to 1 if you have the `isinf' function.])
+fi
+
+dnl Check for isnan
+AC_CACHE_CHECK([for isnan], ac_cv_have_isnan,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]], [[float f = 0.0; return isnan(f)]])],[ac_cv_have_isnan="yes"],[ac_cv_have_isnan="no"]))
+if test "$ac_cv_have_isnan" = "yes"
+then
+    AC_DEFINE(HAVE_ISNAN, 1, [Define to 1 if you have the `isnan' function.])
+fi
+
+AC_CHECK_FUNCS(\
+	asinh \
+	asinhf \
+	cbrt \
+	cbrtf \
+	erf \
+	erff \
+	exp2 \
+	exp2f \
+	llrint \
+	llrintf \
+	llround \
+	llroundf \
+	log2 \
+	log2f \
+	lrint \
+	lrintf \
+	lround \
+	lroundf \
+	remainder \
+	remainderf \
+	rint \
+	rintf \
+	round \
+	roundf \
+	trunc \
+	truncf
+)
+LIBS="$ac_save_LIBS"
+
+dnl Check for __builtin_clz
+AC_CACHE_CHECK([for __builtin_clz], ac_cv_have___builtin_clz,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM(,[[return __builtin_clz(1)]])],
+               [ac_cv_have___builtin_clz="yes"], [ac_cv_have___builtin_clz="no"]))
+if test "$ac_cv_have___builtin_clz" = "yes"
+then
+    AC_DEFINE(HAVE___BUILTIN_CLZ, 1, [Define to 1 if you have the `__builtin_clz' built-in function.])
+fi
+
+dnl Check for __builtin_popcount
+AC_CACHE_CHECK([for __builtin_popcount], ac_cv_have___builtin_popcount,
+               AC_LINK_IFELSE([AC_LANG_PROGRAM(,[[return __builtin_popcount(1)]])],
+               [ac_cv_have___builtin_popcount="yes"], [ac_cv_have___builtin_popcount="no"]))
+if test "$ac_cv_have___builtin_popcount" = "yes"
+then
+    AC_DEFINE(HAVE___BUILTIN_POPCOUNT, 1, [Define to 1 if you have the `__builtin_popcount' built-in function.])
+fi
+
+dnl *** check for the need to define platform-specific symbols
+
+case $host_cpu in
+  *i[[3456789]]86*) WINE_CHECK_DEFINE([__i386__]) ;;
+  *x86_64*)         WINE_CHECK_DEFINE([__x86_64__]) ;;
+  *sparc64*)        WINE_CHECK_DEFINE([__sparc64__]) ;;
+  *sparc*)          WINE_CHECK_DEFINE([__sparc__]) ;;
+  *powerpc64*)      WINE_CHECK_DEFINE([__powerpc64__]) ;;
+  *powerpc*)        WINE_CHECK_DEFINE([__powerpc__]) ;;
+  *aarch64*)        WINE_CHECK_DEFINE([__aarch64__]) ;;
+  *arm*)            WINE_CHECK_DEFINE([__arm__]) ;;
+esac
+
+case $host_vendor in
+  *sun*) WINE_CHECK_DEFINE([__sun__]) ;;
+esac
+
+dnl **** Generate output files ****
+
+AH_TOP([#ifndef __WINE_CONFIG_H
+#define __WINE_CONFIG_H
+#ifndef WINE_CROSSTEST])
+AH_BOTTOM([#endif /* WINE_CROSSTEST */
+#endif /* __WINE_CONFIG_H */])
+
+AC_CONFIG_COMMANDS([include/stamp-h], [echo timestamp > include/stamp-h])
+AS_ECHO_N("creating Makefile rules...") >&AS_MESSAGE_FD
+
+AC_SUBST([ALL_VARS_RULES],
+"m4_set_foreach([_AC_SUBST_VARS],[var],[m4_if(m4_bregexp(m4_defn([var]),[\(_CFLAGS\|_LIBS\)$]),-1,,[var = $var
+])])")
+
+dnl Main makefile
+
+WINE_APPEND_RULE([
+# Rules automatically generated by configure
+
+CLEAN_FILES = *.o *.a *.so *.res *.fake *.ok *.tab.[[ch]] *.yy.c
+
+.INIT: Makefile
+.MAKEFILEDEPS:
+all: Makefile
+Makefile: $srcdir/Makefile.in config.status \$(MAKEDEP)
+	@./config.status Make.tmp Makefile
+depend: \$(MAKEDEP) dummy
+	\$(MAKEDEP)])
+
+test -n "$CROSSTARGET" || WINE_APPEND_RULE(
+[crosstest:
+	@echo \"crosstest is not supported (mingw not installed?)\" && false])
+
+WINE_CONFIG_SYMLINK(fonts,fonts,[marlett.ttf,symbol.ttf,tahoma.ttf,tahomabd.ttf,wingding.ttf],enable_fonts)
+WINE_CONFIG_SYMLINK(loader,loader,[l_intl.nls])
+WINE_CONFIG_SYMLINK(,tools,[wine],,winewrapper)
+WINE_CONFIG_SYMLINK(,tools,[wine64],enable_win64,winewrapper)
+
+WINE_CONFIG_DLL(acledit)
+WINE_CONFIG_DLL(aclui,,[implib])
+WINE_CONFIG_DLL(activeds,,[implib])
+WINE_CONFIG_DLL(actxprxy,,[clean])
+WINE_CONFIG_LIB(adsiid)
+WINE_CONFIG_DLL(advapi32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/advapi32/tests)
+WINE_CONFIG_DLL(advpack,,[implib])
+WINE_CONFIG_TEST(dlls/advpack/tests)
+WINE_CONFIG_DLL(amstream,,[clean])
+WINE_CONFIG_TEST(dlls/amstream/tests)
+WINE_CONFIG_DLL(api-ms-win-appmodel-runtime-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-apiquery-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-com-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-com-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-console-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-datetime-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-datetime-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-debug-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-debug-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-delayload-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-errorhandling-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-errorhandling-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-errorhandling-l1-1-2)
+WINE_CONFIG_DLL(api-ms-win-core-fibers-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-fibers-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-file-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-file-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-file-l1-2-1)
+WINE_CONFIG_DLL(api-ms-win-core-file-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-file-l2-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-handle-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-heap-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-heap-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-heap-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-heap-obsolete-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-interlocked-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-interlocked-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-io-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-kernel32-legacy-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-kernel32-legacy-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-libraryloader-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-libraryloader-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-libraryloader-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-localization-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-localization-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-localization-l1-2-1)
+WINE_CONFIG_DLL(api-ms-win-core-localization-obsolete-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-localregistry-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-memory-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-memory-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-memory-l1-1-2)
+WINE_CONFIG_DLL(api-ms-win-core-misc-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-namedpipe-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-namedpipe-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-path-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-processenvironment-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-processenvironment-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-processthreads-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-processthreads-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-processthreads-l1-1-2)
+WINE_CONFIG_DLL(api-ms-win-core-profile-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-psapi-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-quirks-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-registry-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-rtlsupport-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-rtlsupport-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-shlwapi-legacy-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-shlwapi-obsolete-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-string-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-string-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-synch-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-synch-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-sysinfo-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-sysinfo-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-sysinfo-l1-2-1)
+WINE_CONFIG_DLL(api-ms-win-core-threadpool-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-core-threadpool-legacy-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-timezone-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-url-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-util-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-version-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-winrt-error-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-winrt-error-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-core-winrt-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-winrt-registration-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-winrt-string-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-wow64-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-core-xstate-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-conio-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-convert-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-environment-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-filesystem-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-heap-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-locale-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-math-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-multibyte-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-private-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-process-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-runtime-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-stdio-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-string-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-time-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-crt-utility-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-advapi32-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-advapi32-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-normaliz-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-ole32-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-shell32-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-shlwapi-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-shlwapi-l2-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-user32-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-downlevel-version-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-eventing-classicprovider-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-eventing-provider-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-ntuser-dc-access-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-rtcore-ntuser-draw-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-rtcore-ntuser-window-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-security-base-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-security-base-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-security-lsalookup-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-security-lsalookup-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-security-sddl-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-service-core-l1-1-1)
+WINE_CONFIG_DLL(api-ms-win-service-management-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-service-winsvc-l1-2-0)
+WINE_CONFIG_DLL(api-ms-win-shcore-obsolete-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-shcore-stream-l1-1-0)
+WINE_CONFIG_DLL(api-ms-win-shcore-thread-l1-1-0)
+WINE_CONFIG_DLL(apphelp)
+WINE_CONFIG_TEST(dlls/apphelp/tests)
+WINE_CONFIG_DLL(appwiz.cpl,,[clean])
+WINE_CONFIG_DLL(atl,,[clean,implib])
+WINE_CONFIG_TEST(dlls/atl/tests)
+WINE_CONFIG_DLL(atl100,,[clean,implib])
+WINE_CONFIG_TEST(dlls/atl100/tests)
+WINE_CONFIG_DLL(atl110,,[clean])
+WINE_CONFIG_DLL(atl80,,[clean,implib])
+WINE_CONFIG_TEST(dlls/atl80/tests)
+WINE_CONFIG_DLL(atl90,,[clean])
+WINE_CONFIG_DLL(authz)
+WINE_CONFIG_DLL(avicap32,,[implib])
+WINE_CONFIG_DLL(avifil32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/avifil32/tests)
+WINE_CONFIG_DLL(avifile.dll16,enable_win16)
+WINE_CONFIG_DLL(avrt,,[implib])
+WINE_CONFIG_DLL(bcrypt,,[implib])
+WINE_CONFIG_TEST(dlls/bcrypt/tests)
+WINE_CONFIG_DLL(bluetoothapis)
+WINE_CONFIG_DLL(browseui,,[clean])
+WINE_CONFIG_TEST(dlls/browseui/tests)
+WINE_CONFIG_DLL(bthprops.cpl)
+WINE_CONFIG_DLL(cabinet,,[implib])
+WINE_CONFIG_TEST(dlls/cabinet/tests)
+WINE_CONFIG_DLL(capi2032,,[implib])
+WINE_CONFIG_DLL(cards,,[implib])
+WINE_CONFIG_DLL(cfgmgr32,,[implib])
+WINE_CONFIG_DLL(clusapi,,[implib])
+WINE_CONFIG_DLL(combase)
+WINE_CONFIG_TEST(dlls/combase/tests)
+WINE_CONFIG_DLL(comcat)
+WINE_CONFIG_TEST(dlls/comcat/tests)
+WINE_CONFIG_DLL(comctl32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/comctl32/tests)
+WINE_CONFIG_DLL(comdlg32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/comdlg32/tests)
+WINE_CONFIG_DLL(comm.drv16,enable_win16)
+WINE_CONFIG_DLL(commdlg.dll16,enable_win16)
+WINE_CONFIG_DLL(compobj.dll16,enable_win16)
+WINE_CONFIG_DLL(compstui,,[implib])
+WINE_CONFIG_DLL(comsvcs,,[implib])
+WINE_CONFIG_DLL(connect)
+WINE_CONFIG_DLL(credui,,[clean,implib])
+WINE_CONFIG_TEST(dlls/credui/tests)
+WINE_CONFIG_DLL(crtdll)
+WINE_CONFIG_DLL(crypt32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/crypt32/tests)
+WINE_CONFIG_DLL(cryptdlg,,[clean])
+WINE_CONFIG_DLL(cryptdll,,[implib])
+WINE_CONFIG_DLL(cryptext)
+WINE_CONFIG_DLL(cryptnet,,[implib])
+WINE_CONFIG_TEST(dlls/cryptnet/tests)
+WINE_CONFIG_DLL(cryptui,,[clean,implib])
+WINE_CONFIG_TEST(dlls/cryptui/tests)
+WINE_CONFIG_DLL(ctapi32)
+WINE_CONFIG_DLL(ctl3d.dll16,enable_win16)
+WINE_CONFIG_DLL(ctl3d32)
+WINE_CONFIG_DLL(ctl3dv2.dll16,enable_win16)
+WINE_CONFIG_DLL(d2d1,,[implib])
+WINE_CONFIG_TEST(dlls/d2d1/tests)
+WINE_CONFIG_DLL(d3d10,,[implib])
+WINE_CONFIG_TEST(dlls/d3d10/tests)
+WINE_CONFIG_DLL(d3d10_1,,[implib])
+WINE_CONFIG_TEST(dlls/d3d10_1/tests)
+WINE_CONFIG_DLL(d3d10core,,[implib])
+WINE_CONFIG_TEST(dlls/d3d10core/tests)
+WINE_CONFIG_DLL(d3d11,,[implib])
+WINE_CONFIG_TEST(dlls/d3d11/tests)
+WINE_CONFIG_DLL(d3d8,,[implib])
+WINE_CONFIG_TEST(dlls/d3d8/tests)
+WINE_CONFIG_DLL(d3d9,,[implib])
+WINE_CONFIG_TEST(dlls/d3d9/tests)
+WINE_CONFIG_DLL(d3dcompiler_33)
+WINE_CONFIG_DLL(d3dcompiler_34)
+WINE_CONFIG_DLL(d3dcompiler_35)
+WINE_CONFIG_DLL(d3dcompiler_36)
+WINE_CONFIG_DLL(d3dcompiler_37)
+WINE_CONFIG_DLL(d3dcompiler_38)
+WINE_CONFIG_DLL(d3dcompiler_39)
+WINE_CONFIG_DLL(d3dcompiler_40)
+WINE_CONFIG_DLL(d3dcompiler_41)
+WINE_CONFIG_DLL(d3dcompiler_42)
+WINE_CONFIG_DLL(d3dcompiler_43,,[implib],[d3dcompiler])
+WINE_CONFIG_TEST(dlls/d3dcompiler_43/tests)
+WINE_CONFIG_DLL(d3dcompiler_46)
+WINE_CONFIG_DLL(d3dcompiler_47)
+WINE_CONFIG_DLL(d3dim)
+WINE_CONFIG_DLL(d3drm,,[implib])
+WINE_CONFIG_TEST(dlls/d3drm/tests)
+WINE_CONFIG_DLL(d3dx10_33)
+WINE_CONFIG_DLL(d3dx10_34)
+WINE_CONFIG_DLL(d3dx10_35)
+WINE_CONFIG_DLL(d3dx10_36)
+WINE_CONFIG_DLL(d3dx10_37)
+WINE_CONFIG_DLL(d3dx10_38)
+WINE_CONFIG_DLL(d3dx10_39)
+WINE_CONFIG_DLL(d3dx10_40)
+WINE_CONFIG_DLL(d3dx10_41)
+WINE_CONFIG_DLL(d3dx10_42)
+WINE_CONFIG_DLL(d3dx10_43,,[implib],[d3dx10])
+WINE_CONFIG_TEST(dlls/d3dx10_43/tests)
+WINE_CONFIG_DLL(d3dx11_42)
+WINE_CONFIG_DLL(d3dx11_43,,[implib],[d3dx11])
+WINE_CONFIG_DLL(d3dx9_24)
+WINE_CONFIG_DLL(d3dx9_25)
+WINE_CONFIG_DLL(d3dx9_26)
+WINE_CONFIG_DLL(d3dx9_27)
+WINE_CONFIG_DLL(d3dx9_28)
+WINE_CONFIG_DLL(d3dx9_29)
+WINE_CONFIG_DLL(d3dx9_30)
+WINE_CONFIG_DLL(d3dx9_31)
+WINE_CONFIG_DLL(d3dx9_32)
+WINE_CONFIG_DLL(d3dx9_33)
+WINE_CONFIG_DLL(d3dx9_34)
+WINE_CONFIG_DLL(d3dx9_35)
+WINE_CONFIG_DLL(d3dx9_36,,[implib],[d3dx9])
+WINE_CONFIG_TEST(dlls/d3dx9_36/tests)
+WINE_CONFIG_DLL(d3dx9_37)
+WINE_CONFIG_DLL(d3dx9_38)
+WINE_CONFIG_DLL(d3dx9_39)
+WINE_CONFIG_DLL(d3dx9_40)
+WINE_CONFIG_DLL(d3dx9_41)
+WINE_CONFIG_DLL(d3dx9_42)
+WINE_CONFIG_DLL(d3dx9_43)
+WINE_CONFIG_DLL(d3dxof,,[clean,implib])
+WINE_CONFIG_TEST(dlls/d3dxof/tests)
+WINE_CONFIG_DLL(davclnt)
+WINE_CONFIG_DLL(dbgeng,,[implib])
+WINE_CONFIG_DLL(dbghelp,,[implib])
+WINE_CONFIG_DLL(dciman32,,[implib])
+WINE_CONFIG_DLL(ddeml.dll16,enable_win16)
+WINE_CONFIG_DLL(ddraw,,[clean,implib])
+WINE_CONFIG_TEST(dlls/ddraw/tests)
+WINE_CONFIG_DLL(ddrawex,,[clean])
+WINE_CONFIG_TEST(dlls/ddrawex/tests)
+WINE_CONFIG_DLL(devenum,,[clean])
+WINE_CONFIG_TEST(dlls/devenum/tests)
+WINE_CONFIG_DLL(dhcpcsvc)
+WINE_CONFIG_DLL(difxapi)
+WINE_CONFIG_DLL(dinput,,[clean,implib,staticimplib])
+WINE_CONFIG_TEST(dlls/dinput/tests)
+WINE_CONFIG_DLL(dinput8,,[clean,implib])
+WINE_CONFIG_TEST(dlls/dinput8/tests)
+WINE_CONFIG_DLL(dispdib.dll16,enable_win16)
+WINE_CONFIG_DLL(dispex,,[clean])
+WINE_CONFIG_TEST(dlls/dispex/tests)
+WINE_CONFIG_DLL(display.drv16,enable_win16)
+WINE_CONFIG_DLL(dmband,,[clean])
+WINE_CONFIG_TEST(dlls/dmband/tests)
+WINE_CONFIG_DLL(dmcompos,,[clean])
+WINE_CONFIG_TEST(dlls/dmcompos/tests)
+WINE_CONFIG_DLL(dmime,,[clean])
+WINE_CONFIG_TEST(dlls/dmime/tests)
+WINE_CONFIG_DLL(dmloader,,[clean])
+WINE_CONFIG_TEST(dlls/dmloader/tests)
+WINE_CONFIG_DLL(dmscript,,[clean])
+WINE_CONFIG_TEST(dlls/dmscript/tests)
+WINE_CONFIG_DLL(dmstyle,,[clean])
+WINE_CONFIG_TEST(dlls/dmstyle/tests)
+WINE_CONFIG_DLL(dmsynth,,[clean])
+WINE_CONFIG_TEST(dlls/dmsynth/tests)
+WINE_CONFIG_DLL(dmusic,,[clean])
+WINE_CONFIG_TEST(dlls/dmusic/tests)
+WINE_CONFIG_DLL(dmusic32)
+WINE_CONFIG_DLL(dnsapi,,[implib])
+WINE_CONFIG_TEST(dlls/dnsapi/tests)
+WINE_CONFIG_DLL(dplay)
+WINE_CONFIG_DLL(dplayx,,[clean,implib])
+WINE_CONFIG_TEST(dlls/dplayx/tests)
+WINE_CONFIG_DLL(dpnaddr)
+WINE_CONFIG_DLL(dpnet,,[clean,implib])
+WINE_CONFIG_TEST(dlls/dpnet/tests)
+WINE_CONFIG_DLL(dpnhpast)
+WINE_CONFIG_DLL(dpnlobby)
+WINE_CONFIG_DLL(dpvoice,,[clean])
+WINE_CONFIG_TEST(dlls/dpvoice/tests)
+WINE_CONFIG_DLL(dpwsockx)
+WINE_CONFIG_DLL(drmclien)
+WINE_CONFIG_DLL(dsound,,[clean,implib])
+WINE_CONFIG_TEST(dlls/dsound/tests)
+WINE_CONFIG_DLL(dssenh)
+WINE_CONFIG_TEST(dlls/dssenh/tests)
+WINE_CONFIG_DLL(dswave,,[clean])
+WINE_CONFIG_TEST(dlls/dswave/tests)
+WINE_CONFIG_DLL(dwmapi,,[implib])
+WINE_CONFIG_DLL(dwrite,,[implib])
+WINE_CONFIG_TEST(dlls/dwrite/tests)
+WINE_CONFIG_DLL(dxdiagn,,[clean])
+WINE_CONFIG_TEST(dlls/dxdiagn/tests)
+WINE_CONFIG_LIB(dxerr8)
+WINE_CONFIG_LIB(dxerr9)
+WINE_CONFIG_DLL(dxgi,,[implib])
+WINE_CONFIG_TEST(dlls/dxgi/tests)
+WINE_CONFIG_LIB(dxguid)
+WINE_CONFIG_DLL(dxva2)
+WINE_CONFIG_TEST(dlls/dxva2/tests)
+WINE_CONFIG_DLL(esent)
+WINE_CONFIG_DLL(evr)
+WINE_CONFIG_DLL(explorerframe,,[clean])
+WINE_CONFIG_TEST(dlls/explorerframe/tests)
+WINE_CONFIG_DLL(ext-ms-win-appmodel-usercontext-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-gdi-devcaps-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-kernel32-package-current-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-ntuser-mouse-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-rtcore-ntuser-syscolors-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-rtcore-ntuser-sysparams-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-uxtheme-themes-l1-1-0)
+WINE_CONFIG_DLL(ext-ms-win-xaml-pal-l1-1-0)
+WINE_CONFIG_DLL(faultrep,,[implib])
+WINE_CONFIG_TEST(dlls/faultrep/tests)
+WINE_CONFIG_DLL(feclient)
+WINE_CONFIG_DLL(fltlib)
+WINE_CONFIG_DLL(fltmgr.sys)
+WINE_CONFIG_DLL(fntcache)
+WINE_CONFIG_DLL(fontsub)
+WINE_CONFIG_DLL(fusion)
+WINE_CONFIG_TEST(dlls/fusion/tests)
+WINE_CONFIG_DLL(fwpuclnt)
+WINE_CONFIG_DLL(gameux,,[clean])
+WINE_CONFIG_TEST(dlls/gameux/tests)
+WINE_CONFIG_DLL(gdi.exe16,enable_win16)
+WINE_CONFIG_DLL(gdi32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/gdi32/tests)
+WINE_CONFIG_DLL(gdiplus,,[implib])
+WINE_CONFIG_TEST(dlls/gdiplus/tests)
+WINE_CONFIG_DLL(glu32,,[implib])
+WINE_CONFIG_DLL(gphoto2.ds,,[clean])
+WINE_CONFIG_DLL(gpkcsp)
+WINE_CONFIG_DLL(hal)
+WINE_CONFIG_DLL(hhctrl.ocx,,[clean,implib],[htmlhelp])
+WINE_CONFIG_DLL(hid,,[implib])
+WINE_CONFIG_DLL(hidclass.sys,,[implib],[hidclass])
+WINE_CONFIG_DLL(hlink,,[clean,implib])
+WINE_CONFIG_TEST(dlls/hlink/tests)
+WINE_CONFIG_DLL(hnetcfg,,[clean])
+WINE_CONFIG_DLL(httpapi)
+WINE_CONFIG_DLL(iccvid,,[clean])
+WINE_CONFIG_DLL(icmp)
+WINE_CONFIG_DLL(ieframe,,[clean,implib])
+WINE_CONFIG_TEST(dlls/ieframe/tests)
+WINE_CONFIG_DLL(iertutil)
+WINE_CONFIG_DLL(ifsmgr.vxd,enable_win16)
+WINE_CONFIG_DLL(imaadp32.acm)
+WINE_CONFIG_DLL(imagehlp,,[implib])
+WINE_CONFIG_TEST(dlls/imagehlp/tests)
+WINE_CONFIG_DLL(imm.dll16,enable_win16)
+WINE_CONFIG_DLL(imm32,,[implib])
+WINE_CONFIG_TEST(dlls/imm32/tests)
+WINE_CONFIG_DLL(inetcomm,,[clean,implib])
+WINE_CONFIG_TEST(dlls/inetcomm/tests)
+WINE_CONFIG_DLL(inetcpl.cpl,,[clean])
+WINE_CONFIG_DLL(inetmib1)
+WINE_CONFIG_TEST(dlls/inetmib1/tests)
+WINE_CONFIG_DLL(infosoft,,[clean])
+WINE_CONFIG_TEST(dlls/infosoft/tests)
+WINE_CONFIG_DLL(initpki)
+WINE_CONFIG_DLL(inkobj)
+WINE_CONFIG_DLL(inseng,,[clean])
+WINE_CONFIG_DLL(iphlpapi,,[implib])
+WINE_CONFIG_TEST(dlls/iphlpapi/tests)
+WINE_CONFIG_DLL(irprops.cpl)
+WINE_CONFIG_DLL(itircl)
+WINE_CONFIG_DLL(itss,,[clean])
+WINE_CONFIG_TEST(dlls/itss/tests)
+WINE_CONFIG_DLL(joy.cpl,,[clean])
+WINE_CONFIG_DLL(jscript,,[clean])
+WINE_CONFIG_TEST(dlls/jscript/tests)
+WINE_CONFIG_DLL(jsproxy,,[implib])
+WINE_CONFIG_TEST(dlls/jsproxy/tests)
+WINE_CONFIG_DLL(kernel32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/kernel32/tests)
+WINE_CONFIG_DLL(kernelbase)
+WINE_CONFIG_DLL(keyboard.drv16,enable_win16)
+WINE_CONFIG_DLL(krnl386.exe16,enable_win16,[implib],[kernel])
+WINE_CONFIG_DLL(ksuser)
+WINE_CONFIG_DLL(ktmw32)
+WINE_CONFIG_DLL(loadperf,,[implib])
+WINE_CONFIG_DLL(localspl,,[clean])
+WINE_CONFIG_TEST(dlls/localspl/tests)
+WINE_CONFIG_DLL(localui,,[clean])
+WINE_CONFIG_TEST(dlls/localui/tests)
+WINE_CONFIG_DLL(lz32,,[implib])
+WINE_CONFIG_TEST(dlls/lz32/tests)
+WINE_CONFIG_DLL(lzexpand.dll16,enable_win16)
+WINE_CONFIG_DLL(mapi32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/mapi32/tests)
+WINE_CONFIG_DLL(mapistub)
+WINE_CONFIG_DLL(mciavi32)
+WINE_CONFIG_DLL(mcicda)
+WINE_CONFIG_DLL(mciqtz32)
+WINE_CONFIG_DLL(mciseq)
+WINE_CONFIG_DLL(mciwave)
+WINE_CONFIG_DLL(mf)
+WINE_CONFIG_DLL(mfplat)
+WINE_CONFIG_TEST(dlls/mfplat/tests)
+WINE_CONFIG_DLL(mfreadwrite)
+WINE_CONFIG_DLL(mgmtapi)
+WINE_CONFIG_DLL(midimap)
+WINE_CONFIG_DLL(mlang,,[clean,implib])
+WINE_CONFIG_TEST(dlls/mlang/tests)
+WINE_CONFIG_DLL(mmcndmgr,,[clean])
+WINE_CONFIG_TEST(dlls/mmcndmgr/tests)
+WINE_CONFIG_DLL(mmdevapi,,[clean])
+WINE_CONFIG_TEST(dlls/mmdevapi/tests)
+WINE_CONFIG_DLL(mmdevldr.vxd,enable_win16)
+WINE_CONFIG_DLL(mmsystem.dll16,enable_win16)
+WINE_CONFIG_DLL(monodebg.vxd,enable_win16)
+WINE_CONFIG_DLL(mountmgr.sys)
+WINE_CONFIG_DLL(mouse.drv16,enable_win16)
+WINE_CONFIG_DLL(mpr,,[clean,implib])
+WINE_CONFIG_TEST(dlls/mpr/tests)
+WINE_CONFIG_DLL(mprapi,,[implib])
+WINE_CONFIG_DLL(msacm.dll16,enable_win16)
+WINE_CONFIG_DLL(msacm32.drv)
+WINE_CONFIG_DLL(msacm32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/msacm32/tests)
+WINE_CONFIG_DLL(msadp32.acm)
+WINE_CONFIG_DLL(msasn1,,[implib])
+WINE_CONFIG_DLL(mscat32)
+WINE_CONFIG_DLL(mscms,,[implib])
+WINE_CONFIG_TEST(dlls/mscms/tests)
+WINE_CONFIG_DLL(mscoree,,[clean])
+WINE_CONFIG_TEST(dlls/mscoree/tests)
+WINE_CONFIG_DLL(msctf,,[clean])
+WINE_CONFIG_TEST(dlls/msctf/tests)
+WINE_CONFIG_DLL(msctfp,,[clean])
+WINE_CONFIG_DLL(msdaps,,[clean])
+WINE_CONFIG_DLL(msdelta)
+WINE_CONFIG_DLL(msdmo,,[implib])
+WINE_CONFIG_TEST(dlls/msdmo/tests)
+WINE_CONFIG_DLL(msdrm)
+WINE_CONFIG_DLL(msftedit)
+WINE_CONFIG_DLL(msg711.acm)
+WINE_CONFIG_DLL(msgsm32.acm)
+WINE_CONFIG_DLL(mshtml.tlb,,[clean])
+WINE_CONFIG_DLL(mshtml,,[clean,implib])
+WINE_CONFIG_TEST(dlls/mshtml/tests,[clean])
+WINE_CONFIG_DLL(msi,,[clean,implib])
+WINE_CONFIG_TEST(dlls/msi/tests)
+WINE_CONFIG_DLL(msident,,[clean])
+WINE_CONFIG_DLL(msimg32,,[implib])
+WINE_CONFIG_DLL(msimsg)
+WINE_CONFIG_DLL(msimtf,,[clean])
+WINE_CONFIG_DLL(msisip)
+WINE_CONFIG_DLL(msisys.ocx)
+WINE_CONFIG_DLL(msls31)
+WINE_CONFIG_DLL(msnet32)
+WINE_CONFIG_DLL(mspatcha,,[implib])
+WINE_CONFIG_DLL(msrle32,,[clean])
+WINE_CONFIG_TEST(dlls/msrle32/tests)
+WINE_CONFIG_DLL(msscript.ocx,,[clean])
+WINE_CONFIG_TEST(dlls/msscript.ocx/tests,[clean])
+WINE_CONFIG_DLL(mssign32)
+WINE_CONFIG_DLL(mssip32)
+WINE_CONFIG_DLL(mstask,,[clean])
+WINE_CONFIG_TEST(dlls/mstask/tests)
+WINE_CONFIG_DLL(msvcirt)
+WINE_CONFIG_TEST(dlls/msvcirt/tests)
+WINE_CONFIG_DLL(msvcm80)
+WINE_CONFIG_DLL(msvcm90)
+WINE_CONFIG_DLL(msvcp100)
+WINE_CONFIG_TEST(dlls/msvcp100/tests)
+WINE_CONFIG_DLL(msvcp110)
+WINE_CONFIG_TEST(dlls/msvcp110/tests)
+WINE_CONFIG_DLL(msvcp120)
+WINE_CONFIG_TEST(dlls/msvcp120/tests)
+WINE_CONFIG_DLL(msvcp120_app)
+WINE_CONFIG_DLL(msvcp60)
+WINE_CONFIG_TEST(dlls/msvcp60/tests)
+WINE_CONFIG_DLL(msvcp70)
+WINE_CONFIG_DLL(msvcp71)
+WINE_CONFIG_DLL(msvcp80)
+WINE_CONFIG_DLL(msvcp90)
+WINE_CONFIG_TEST(dlls/msvcp90/tests)
+WINE_CONFIG_DLL(msvcr100,,[implib])
+WINE_CONFIG_TEST(dlls/msvcr100/tests)
+WINE_CONFIG_DLL(msvcr110,,[implib])
+WINE_CONFIG_DLL(msvcr120,,[implib])
+WINE_CONFIG_TEST(dlls/msvcr120/tests)
+WINE_CONFIG_DLL(msvcr120_app)
+WINE_CONFIG_DLL(msvcr70,,[implib])
+WINE_CONFIG_DLL(msvcr71,,[implib])
+WINE_CONFIG_DLL(msvcr80,,[implib])
+WINE_CONFIG_DLL(msvcr90,,[implib])
+WINE_CONFIG_TEST(dlls/msvcr90/tests)
+WINE_CONFIG_DLL(msvcrt,,[implib])
+WINE_CONFIG_TEST(dlls/msvcrt/tests)
+WINE_CONFIG_DLL(msvcrt20)
+WINE_CONFIG_DLL(msvcrt40)
+WINE_CONFIG_DLL(msvcrtd,,[implib])
+WINE_CONFIG_TEST(dlls/msvcrtd/tests)
+WINE_CONFIG_DLL(msvfw32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/msvfw32/tests)
+WINE_CONFIG_DLL(msvidc32,,[clean])
+WINE_CONFIG_DLL(msvideo.dll16,enable_win16)
+WINE_CONFIG_DLL(mswsock,,[implib])
+WINE_CONFIG_DLL(msxml,,[clean])
+WINE_CONFIG_DLL(msxml2,,[clean])
+WINE_CONFIG_DLL(msxml3,,[clean])
+WINE_CONFIG_TEST(dlls/msxml3/tests,[clean])
+WINE_CONFIG_DLL(msxml4,,[clean])
+WINE_CONFIG_DLL(msxml6,,[clean])
+WINE_CONFIG_DLL(ncrypt)
+WINE_CONFIG_DLL(nddeapi,,[implib])
+WINE_CONFIG_DLL(ndis.sys)
+WINE_CONFIG_DLL(netapi32,,[implib])
+WINE_CONFIG_TEST(dlls/netapi32/tests)
+WINE_CONFIG_DLL(netcfgx,,[clean])
+WINE_CONFIG_TEST(dlls/netcfgx/tests)
+WINE_CONFIG_DLL(netprofm,,[clean])
+WINE_CONFIG_TEST(dlls/netprofm/tests)
+WINE_CONFIG_DLL(newdev,,[implib])
+WINE_CONFIG_DLL(normaliz,,[implib])
+WINE_CONFIG_DLL(npmshtml)
+WINE_CONFIG_DLL(npptools)
+WINE_CONFIG_DLL(ntdll,,[implib])
+WINE_CONFIG_TEST(dlls/ntdll/tests)
+WINE_CONFIG_DLL(ntdsapi,,[implib])
+WINE_CONFIG_TEST(dlls/ntdsapi/tests)
+WINE_CONFIG_DLL(ntoskrnl.exe,,[implib],[ntoskrnl])
+WINE_CONFIG_TEST(dlls/ntoskrnl.exe/tests)
+WINE_CONFIG_RESOURCE(dlls/ntoskrnl.exe/tests/driver.sys)
+WINE_CONFIG_DLL(ntprint)
+WINE_CONFIG_TEST(dlls/ntprint/tests)
+WINE_CONFIG_DLL(nvapi,enable_win32)
+WINE_CONFIG_TEST(dlls/nvapi/tests)
+WINE_CONFIG_DLL(nvapi64,enable_win64)
+WINE_CONFIG_DLL(nvcuda)
+WINE_CONFIG_TEST(dlls/nvcuda/tests)
+WINE_CONFIG_DLL(nvcuvid)
+WINE_CONFIG_DLL(nvencodeapi,enable_win32)
+WINE_CONFIG_DLL(nvencodeapi64,enable_win64)
+WINE_CONFIG_DLL(objsel,,[clean])
+WINE_CONFIG_DLL(odbc32,,[implib])
+WINE_CONFIG_DLL(odbccp32,,[implib])
+WINE_CONFIG_TEST(dlls/odbccp32/tests)
+WINE_CONFIG_DLL(odbccu32)
+WINE_CONFIG_DLL(ole2.dll16,enable_win16)
+WINE_CONFIG_DLL(ole2conv.dll16,enable_win16)
+WINE_CONFIG_DLL(ole2disp.dll16,enable_win16)
+WINE_CONFIG_DLL(ole2nls.dll16,enable_win16)
+WINE_CONFIG_DLL(ole2prox.dll16,enable_win16)
+WINE_CONFIG_DLL(ole2thk.dll16,enable_win16)
+WINE_CONFIG_DLL(ole32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/ole32/tests)
+WINE_CONFIG_DLL(oleacc,,[clean,implib])
+WINE_CONFIG_TEST(dlls/oleacc/tests)
+WINE_CONFIG_DLL(oleaut32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/oleaut32/tests,[clean])
+WINE_CONFIG_DLL(olecli.dll16,enable_win16)
+WINE_CONFIG_DLL(olecli32,,[implib])
+WINE_CONFIG_DLL(oledb32,,[clean])
+WINE_CONFIG_TEST(dlls/oledb32/tests,[clean])
+WINE_CONFIG_DLL(oledlg,,[clean,implib])
+WINE_CONFIG_TEST(dlls/oledlg/tests)
+WINE_CONFIG_DLL(olepro32,,[clean,implib])
+WINE_CONFIG_DLL(olesvr.dll16,enable_win16)
+WINE_CONFIG_DLL(olesvr32,,[implib])
+WINE_CONFIG_DLL(olethk32)
+WINE_CONFIG_DLL(openal32)
+WINE_CONFIG_DLL(opencl)
+WINE_CONFIG_DLL(opengl32,,[implib])
+WINE_CONFIG_TEST(dlls/opengl32/tests)
+WINE_CONFIG_DLL(packager,,[clean])
+WINE_CONFIG_TEST(dlls/packager/tests)
+WINE_CONFIG_DLL(pdh,,[implib])
+WINE_CONFIG_TEST(dlls/pdh/tests)
+WINE_CONFIG_DLL(photometadatahandler)
+WINE_CONFIG_DLL(pidgen)
+WINE_CONFIG_DLL(powrprof,,[implib])
+WINE_CONFIG_DLL(printui)
+WINE_CONFIG_DLL(prntvpt)
+WINE_CONFIG_DLL(propsys,,[clean,implib])
+WINE_CONFIG_TEST(dlls/propsys/tests)
+WINE_CONFIG_DLL(psapi,,[implib])
+WINE_CONFIG_TEST(dlls/psapi/tests)
+WINE_CONFIG_DLL(pstorec,,[clean])
+WINE_CONFIG_DLL(qcap)
+WINE_CONFIG_TEST(dlls/qcap/tests)
+WINE_CONFIG_DLL(qedit,,[clean])
+WINE_CONFIG_TEST(dlls/qedit/tests)
+WINE_CONFIG_DLL(qmgr,,[clean])
+WINE_CONFIG_TEST(dlls/qmgr/tests)
+WINE_CONFIG_DLL(qmgrprxy,,[clean])
+WINE_CONFIG_DLL(quartz,,[clean,implib])
+WINE_CONFIG_TEST(dlls/quartz/tests,[clean])
+WINE_CONFIG_DLL(query)
+WINE_CONFIG_DLL(rasapi16.dll16,enable_win16)
+WINE_CONFIG_DLL(rasapi32,,[implib])
+WINE_CONFIG_TEST(dlls/rasapi32/tests)
+WINE_CONFIG_DLL(rasdlg,,[implib])
+WINE_CONFIG_DLL(regapi)
+WINE_CONFIG_DLL(resutils,,[implib])
+WINE_CONFIG_DLL(riched20,,[clean,implib])
+WINE_CONFIG_TEST(dlls/riched20/tests)
+WINE_CONFIG_DLL(riched32)
+WINE_CONFIG_TEST(dlls/riched32/tests)
+WINE_CONFIG_DLL(rpcrt4,,[clean,implib])
+WINE_CONFIG_TEST(dlls/rpcrt4/tests,[clean])
+WINE_CONFIG_DLL(rsabase)
+WINE_CONFIG_DLL(rsaenh,,[implib])
+WINE_CONFIG_TEST(dlls/rsaenh/tests)
+WINE_CONFIG_DLL(rstrtmgr)
+WINE_CONFIG_DLL(rtutils,,[implib])
+WINE_CONFIG_DLL(samlib)
+WINE_CONFIG_DLL(sane.ds,,[clean])
+WINE_CONFIG_DLL(scarddlg)
+WINE_CONFIG_DLL(sccbase)
+WINE_CONFIG_DLL(schannel)
+WINE_CONFIG_TEST(dlls/schannel/tests)
+WINE_CONFIG_DLL(schedsvc,,[clean])
+WINE_CONFIG_TEST(dlls/schedsvc/tests,[clean])
+WINE_CONFIG_DLL(scrrun,,[clean])
+WINE_CONFIG_TEST(dlls/scrrun/tests,[clean])
+WINE_CONFIG_DLL(scsiport.sys)
+WINE_CONFIG_DLL(secur32,,[implib])
+WINE_CONFIG_TEST(dlls/secur32/tests)
+WINE_CONFIG_DLL(security)
+WINE_CONFIG_DLL(sensapi,,[implib])
+WINE_CONFIG_DLL(serialui,,[clean])
+WINE_CONFIG_TEST(dlls/serialui/tests)
+WINE_CONFIG_DLL(setupapi,,[clean,implib])
+WINE_CONFIG_TEST(dlls/setupapi/tests)
+WINE_CONFIG_DLL(setupx.dll16,enable_win16)
+WINE_CONFIG_DLL(sfc,,[implib])
+WINE_CONFIG_DLL(sfc_os,,[implib])
+WINE_CONFIG_DLL(shcore)
+WINE_CONFIG_DLL(shdoclc,,[clean])
+WINE_CONFIG_DLL(shdocvw,,[clean,implib])
+WINE_CONFIG_TEST(dlls/shdocvw/tests)
+WINE_CONFIG_DLL(shell.dll16,enable_win16)
+WINE_CONFIG_DLL(shell32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/shell32/tests)
+WINE_CONFIG_DLL(shfolder,,[implib])
+WINE_CONFIG_DLL(shlwapi,,[clean,implib])
+WINE_CONFIG_TEST(dlls/shlwapi/tests)
+WINE_CONFIG_DLL(slbcsp)
+WINE_CONFIG_DLL(slc,,[implib])
+WINE_CONFIG_TEST(dlls/slc/tests)
+WINE_CONFIG_DLL(snmpapi,,[implib])
+WINE_CONFIG_TEST(dlls/snmpapi/tests)
+WINE_CONFIG_DLL(softpub)
+WINE_CONFIG_DLL(sound.drv16,enable_win16)
+WINE_CONFIG_DLL(spoolss,,[implib])
+WINE_CONFIG_TEST(dlls/spoolss/tests)
+WINE_CONFIG_DLL(stdole2.tlb,,[clean])
+WINE_CONFIG_DLL(stdole32.tlb,,[clean])
+WINE_CONFIG_DLL(sti,,[clean,implib])
+WINE_CONFIG_TEST(dlls/sti/tests)
+WINE_CONFIG_DLL(storage.dll16,enable_win16)
+WINE_CONFIG_DLL(stress.dll16,enable_win16)
+WINE_CONFIG_LIB(strmbase)
+WINE_CONFIG_LIB(strmiids)
+WINE_CONFIG_DLL(svrapi)
+WINE_CONFIG_DLL(sxs,,[implib])
+WINE_CONFIG_TEST(dlls/sxs/tests)
+WINE_CONFIG_DLL(system.drv16,enable_win16)
+WINE_CONFIG_DLL(t2embed,,[implib])
+WINE_CONFIG_TEST(dlls/t2embed/tests)
+WINE_CONFIG_DLL(tapi32,,[implib])
+WINE_CONFIG_DLL(taskschd,,[clean])
+WINE_CONFIG_TEST(dlls/taskschd/tests)
+WINE_CONFIG_DLL(tdi.sys)
+WINE_CONFIG_DLL(toolhelp.dll16,enable_win16)
+WINE_CONFIG_DLL(traffic)
+WINE_CONFIG_DLL(twain.dll16,enable_win16)
+WINE_CONFIG_DLL(twain_32)
+WINE_CONFIG_TEST(dlls/twain_32/tests)
+WINE_CONFIG_DLL(typelib.dll16,enable_win16)
+WINE_CONFIG_DLL(ucrtbase)
+WINE_CONFIG_TEST(dlls/ucrtbase/tests)
+WINE_CONFIG_DLL(uiautomationcore)
+WINE_CONFIG_DLL(unicows,,[implib])
+WINE_CONFIG_DLL(updspapi)
+WINE_CONFIG_DLL(url,,[implib])
+WINE_CONFIG_DLL(urlmon,,[clean,implib])
+WINE_CONFIG_TEST(dlls/urlmon/tests)
+WINE_CONFIG_DLL(usbd.sys,,[implib],[usbd])
+WINE_CONFIG_DLL(user.exe16,enable_win16)
+WINE_CONFIG_DLL(user32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/user32/tests)
+WINE_CONFIG_DLL(userenv,,[implib])
+WINE_CONFIG_TEST(dlls/userenv/tests)
+WINE_CONFIG_DLL(usp10,,[implib])
+WINE_CONFIG_TEST(dlls/usp10/tests)
+WINE_CONFIG_LIB(uuid)
+WINE_CONFIG_DLL(uxtheme-gtk)
+WINE_CONFIG_DLL(uxtheme,,[implib])
+WINE_CONFIG_TEST(dlls/uxtheme/tests)
+WINE_CONFIG_DLL(vbscript,,[clean])
+WINE_CONFIG_TEST(dlls/vbscript/tests,[clean])
+WINE_CONFIG_DLL(vcomp)
+WINE_CONFIG_TEST(dlls/vcomp/tests)
+WINE_CONFIG_DLL(vcomp100)
+WINE_CONFIG_DLL(vcomp110)
+WINE_CONFIG_DLL(vcomp120)
+WINE_CONFIG_DLL(vcomp90)
+WINE_CONFIG_DLL(vcruntime140)
+WINE_CONFIG_DLL(vdhcp.vxd,enable_win16)
+WINE_CONFIG_DLL(vdmdbg,,[implib])
+WINE_CONFIG_DLL(ver.dll16,enable_win16)
+WINE_CONFIG_DLL(version,,[implib])
+WINE_CONFIG_TEST(dlls/version/tests)
+WINE_CONFIG_DLL(vmm.vxd,enable_win16)
+WINE_CONFIG_DLL(vnbt.vxd,enable_win16)
+WINE_CONFIG_DLL(vnetbios.vxd,enable_win16)
+WINE_CONFIG_DLL(vssapi)
+WINE_CONFIG_DLL(vtdapi.vxd,enable_win16)
+WINE_CONFIG_DLL(vulkan-1)
+WINE_CONFIG_DLL(vulkan)
+WINE_CONFIG_DLL(vwin32.vxd,enable_win16)
+WINE_CONFIG_DLL(w32skrnl,enable_win16)
+WINE_CONFIG_DLL(w32sys.dll16,enable_win16)
+WINE_CONFIG_DLL(wbemdisp,,[clean])
+WINE_CONFIG_TEST(dlls/wbemdisp/tests)
+WINE_CONFIG_DLL(wbemprox,,[clean])
+WINE_CONFIG_TEST(dlls/wbemprox/tests)
+WINE_CONFIG_DLL(webservices,,[implib])
+WINE_CONFIG_TEST(dlls/webservices/tests)
+WINE_CONFIG_DLL(wer,,[implib])
+WINE_CONFIG_TEST(dlls/wer/tests)
+WINE_CONFIG_DLL(wevtapi)
+WINE_CONFIG_DLL(wiaservc,,[clean])
+WINE_CONFIG_TEST(dlls/wiaservc/tests)
+WINE_CONFIG_DLL(wimgapi)
+WINE_CONFIG_DLL(win32s16.dll16,enable_win16)
+WINE_CONFIG_DLL(win87em.dll16,enable_win16)
+WINE_CONFIG_DLL(winaspi.dll16,enable_win16)
+WINE_CONFIG_DLL(windebug.dll16,enable_win16)
+WINE_CONFIG_DLL(windowscodecs,,[clean,implib])
+WINE_CONFIG_TEST(dlls/windowscodecs/tests)
+WINE_CONFIG_DLL(windowscodecsext,,[implib])
+WINE_CONFIG_TEST(dlls/windowscodecsext/tests)
+WINE_CONFIG_DLL(winealsa.drv)
+WINE_CONFIG_DLL(winecoreaudio.drv)
+WINE_CONFIG_LIB(winecrt0)
+WINE_CONFIG_DLL(wined3d-csmt)
+WINE_CONFIG_DLL(wined3d,,[implib])
+WINE_CONFIG_DLL(winegstreamer)
+WINE_CONFIG_DLL(winejoystick.drv)
+WINE_CONFIG_DLL(winemac.drv,,[clean])
+WINE_CONFIG_DLL(winemapi)
+WINE_CONFIG_DLL(winemp3.acm)
+WINE_CONFIG_DLL(wineoss.drv)
+WINE_CONFIG_DLL(wineps.drv,,[clean])
+WINE_CONFIG_DLL(wineps16.drv16,enable_win16)
+WINE_CONFIG_DLL(winepulse.drv)
+WINE_CONFIG_DLL(wineqtdecoder)
+WINE_CONFIG_DLL(winex11.drv)
+WINE_CONFIG_DLL(wing.dll16,enable_win16)
+WINE_CONFIG_DLL(wing32)
+WINE_CONFIG_DLL(winhttp,,[clean,implib])
+WINE_CONFIG_TEST(dlls/winhttp/tests)
+WINE_CONFIG_DLL(wininet,,[clean,implib])
+WINE_CONFIG_TEST(dlls/wininet/tests)
+WINE_CONFIG_DLL(winmm,,[clean,implib])
+WINE_CONFIG_TEST(dlls/winmm/tests)
+WINE_CONFIG_DLL(winnls.dll16,enable_win16)
+WINE_CONFIG_DLL(winnls32,,[implib])
+WINE_CONFIG_DLL(winscard,,[implib])
+WINE_CONFIG_DLL(winsock.dll16,enable_win16)
+WINE_CONFIG_DLL(winspool.drv,,[clean,implib],[winspool])
+WINE_CONFIG_TEST(dlls/winspool.drv/tests)
+WINE_CONFIG_DLL(winsta)
+WINE_CONFIG_DLL(wintab.dll16,enable_win16)
+WINE_CONFIG_DLL(wintab32,,[implib])
+WINE_CONFIG_TEST(dlls/wintab32/tests)
+WINE_CONFIG_DLL(wintrust,,[implib])
+WINE_CONFIG_TEST(dlls/wintrust/tests)
+WINE_CONFIG_DLL(wlanapi)
+WINE_CONFIG_DLL(wldap32,,[clean,implib])
+WINE_CONFIG_TEST(dlls/wldap32/tests)
+WINE_CONFIG_DLL(wmasf)
+WINE_CONFIG_DLL(wmi)
+WINE_CONFIG_DLL(wmiutils,,[clean])
+WINE_CONFIG_TEST(dlls/wmiutils/tests)
+WINE_CONFIG_DLL(wmp,,[clean])
+WINE_CONFIG_TEST(dlls/wmp/tests)
+WINE_CONFIG_DLL(wmvcore)
+WINE_CONFIG_DLL(wnaspi32,,[implib])
+WINE_CONFIG_DLL(wow32,enable_win16,[implib])
+WINE_CONFIG_DLL(wpcap)
+WINE_CONFIG_DLL(ws2_32,,[implib])
+WINE_CONFIG_TEST(dlls/ws2_32/tests)
+WINE_CONFIG_DLL(wshom.ocx,,[clean])
+WINE_CONFIG_TEST(dlls/wshom.ocx/tests,[clean])
+WINE_CONFIG_DLL(wsnmp32,,[implib])
+WINE_CONFIG_TEST(dlls/wsnmp32/tests)
+WINE_CONFIG_DLL(wsock32,,[implib])
+WINE_CONFIG_DLL(wtsapi32,,[implib])
+WINE_CONFIG_TEST(dlls/wtsapi32/tests)
+WINE_CONFIG_DLL(wuapi,,[clean])
+WINE_CONFIG_DLL(wuaueng)
+WINE_CONFIG_DLL(x3daudio1_0)
+WINE_CONFIG_DLL(x3daudio1_1)
+WINE_CONFIG_DLL(x3daudio1_2)
+WINE_CONFIG_DLL(x3daudio1_3)
+WINE_CONFIG_DLL(x3daudio1_4)
+WINE_CONFIG_DLL(x3daudio1_5)
+WINE_CONFIG_DLL(x3daudio1_6)
+WINE_CONFIG_DLL(x3daudio1_7)
+WINE_CONFIG_DLL(xapofx1_1)
+WINE_CONFIG_DLL(xapofx1_2)
+WINE_CONFIG_DLL(xapofx1_3)
+WINE_CONFIG_DLL(xapofx1_4)
+WINE_CONFIG_DLL(xapofx1_5)
+WINE_CONFIG_DLL(xaudio2_0,,[clean])
+WINE_CONFIG_DLL(xaudio2_1,,[clean])
+WINE_CONFIG_DLL(xaudio2_2,,[clean])
+WINE_CONFIG_DLL(xaudio2_3,,[clean])
+WINE_CONFIG_DLL(xaudio2_4,,[clean])
+WINE_CONFIG_DLL(xaudio2_5,,[clean])
+WINE_CONFIG_DLL(xaudio2_6,,[clean])
+WINE_CONFIG_DLL(xaudio2_7,,[clean])
+WINE_CONFIG_TEST(dlls/xaudio2_7/tests)
+WINE_CONFIG_DLL(xaudio2_8,,[clean])
+WINE_CONFIG_DLL(xaudio2_9,,[clean])
+WINE_CONFIG_DLL(xinput1_1)
+WINE_CONFIG_DLL(xinput1_2)
+WINE_CONFIG_DLL(xinput1_3,,[implib],[xinput])
+WINE_CONFIG_TEST(dlls/xinput1_3/tests)
+WINE_CONFIG_DLL(xinput1_4)
+WINE_CONFIG_DLL(xinput9_1_0)
+WINE_CONFIG_DLL(xmllite,,[implib])
+WINE_CONFIG_TEST(dlls/xmllite/tests)
+WINE_CONFIG_DLL(xolehlp)
+WINE_CONFIG_DLL(xpsprint)
+WINE_CONFIG_DLL(xpssvcs)
+WINE_CONFIG_MAKEFILE([fonts],,[clean,install-lib])
+WINE_CONFIG_MAKEFILE([include],,[clean,install-dev])
+WINE_CONFIG_MAKEFILE([libs/port])
+WINE_CONFIG_MAKEFILE([libs/wine],,[clean,implib,install-dev,install-lib])
+WINE_CONFIG_MAKEFILE([libs/wpp])
+WINE_CONFIG_MAKEFILE([loader],,[clean,install-lib])
+WINE_CONFIG_MAKEFILE([po],,[clean])
+WINE_CONFIG_PROGRAM(arp,,[install])
+WINE_CONFIG_PROGRAM(aspnet_regiis,,[install])
+WINE_CONFIG_PROGRAM(attrib,,[clean,install])
+WINE_CONFIG_PROGRAM(cabarc,,[install])
+WINE_CONFIG_PROGRAM(cacls,,[install])
+WINE_CONFIG_PROGRAM(clock,,[clean,install])
+WINE_CONFIG_PROGRAM(cmd,,[clean,install])
+WINE_CONFIG_TEST(programs/cmd/tests)
+WINE_CONFIG_PROGRAM(conhost,,[install])
+WINE_CONFIG_PROGRAM(control,,[install])
+WINE_CONFIG_PROGRAM(cscript,,[clean,install])
+WINE_CONFIG_PROGRAM(dpnsvr,,[install])
+WINE_CONFIG_PROGRAM(dxdiag,,[clean,install])
+WINE_CONFIG_PROGRAM(eject,,[install])
+WINE_CONFIG_PROGRAM(expand,,[install])
+WINE_CONFIG_PROGRAM(explorer,,[clean,install])
+WINE_CONFIG_PROGRAM(extrac32,,[install])
+WINE_CONFIG_PROGRAM(findstr,,[install])
+WINE_CONFIG_PROGRAM(fsutil,,[clean,install])
+WINE_CONFIG_PROGRAM(hh,,[install])
+WINE_CONFIG_PROGRAM(hostname,,[clean,install])
+WINE_CONFIG_PROGRAM(icacls,,[install])
+WINE_CONFIG_PROGRAM(icinfo,,[install])
+WINE_CONFIG_PROGRAM(iexplore,,[install])
+WINE_CONFIG_PROGRAM(ipconfig,,[clean,install])
+WINE_CONFIG_PROGRAM(lodctr,,[install])
+WINE_CONFIG_PROGRAM(mofcomp,,[install])
+WINE_CONFIG_PROGRAM(mshta,,[install])
+WINE_CONFIG_PROGRAM(msidb,,[install,installbin])
+WINE_CONFIG_PROGRAM(msiexec,,[install,installbin,manpage])
+WINE_CONFIG_PROGRAM(net,,[clean,install])
+WINE_CONFIG_PROGRAM(netsh,,[install])
+WINE_CONFIG_PROGRAM(netstat,,[clean,install])
+WINE_CONFIG_PROGRAM(ngen,,[install])
+WINE_CONFIG_PROGRAM(notepad,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(oleview,,[clean,install])
+WINE_CONFIG_PROGRAM(ping,,[install])
+WINE_CONFIG_PROGRAM(plugplay,,[install])
+WINE_CONFIG_PROGRAM(presentationfontcache,,[install])
+WINE_CONFIG_PROGRAM(progman,,[clean,install])
+WINE_CONFIG_PROGRAM(reg,,[clean,install])
+WINE_CONFIG_TEST(programs/reg/tests)
+WINE_CONFIG_PROGRAM(regasm,,[install])
+WINE_CONFIG_PROGRAM(regedit,,[clean,install,installbin,manpage])
+WINE_CONFIG_TEST(programs/regedit/tests)
+WINE_CONFIG_PROGRAM(regsvcs,,[install])
+WINE_CONFIG_PROGRAM(regsvr32,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(rpcss,,[clean,install])
+WINE_CONFIG_PROGRAM(rundll.exe16,enable_win16,[install])
+WINE_CONFIG_PROGRAM(rundll32,,[install])
+WINE_CONFIG_PROGRAM(sc,,[install])
+WINE_CONFIG_PROGRAM(schtasks,,[install])
+WINE_CONFIG_PROGRAM(sdbinst,,[install])
+WINE_CONFIG_PROGRAM(secedit,,[install])
+WINE_CONFIG_PROGRAM(servicemodelreg,,[install])
+WINE_CONFIG_PROGRAM(services,,[clean,install])
+WINE_CONFIG_TEST(programs/services/tests)
+WINE_CONFIG_PROGRAM(shutdown,,[install])
+WINE_CONFIG_PROGRAM(spoolsv,,[install])
+WINE_CONFIG_PROGRAM(start,,[clean,install])
+WINE_CONFIG_PROGRAM(svchost,,[install])
+WINE_CONFIG_PROGRAM(systeminfo,,[install])
+WINE_CONFIG_PROGRAM(taskkill,,[clean,install])
+WINE_CONFIG_PROGRAM(tasklist,,[install])
+WINE_CONFIG_PROGRAM(taskmgr,,[clean,install])
+WINE_CONFIG_PROGRAM(termsv,,[install])
+WINE_CONFIG_PROGRAM(uninstaller,,[clean,install])
+WINE_CONFIG_PROGRAM(unlodctr,,[install])
+WINE_CONFIG_PROGRAM(view,,[clean,install])
+WINE_CONFIG_PROGRAM(wevtutil,,[install])
+WINE_CONFIG_PROGRAM(wineboot,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winebrowser,,[install])
+WINE_CONFIG_PROGRAM(winecfg,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(wineconsole,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winedbg,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winedevice,,[install])
+WINE_CONFIG_PROGRAM(winefile,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winemenubuilder,,[install])
+WINE_CONFIG_PROGRAM(winemine,,[clean,install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winemsibuilder,,[install])
+WINE_CONFIG_PROGRAM(winepath,,[install,installbin,manpage])
+WINE_CONFIG_PROGRAM(winetest,,[clean])
+WINE_CONFIG_PROGRAM(winevdm,enable_win16,[install])
+WINE_CONFIG_PROGRAM(winhelp.exe16,enable_win16,[install])
+WINE_CONFIG_PROGRAM(winhlp32,,[clean,install])
+WINE_CONFIG_PROGRAM(winoldap.mod16,enable_win16,[install])
+WINE_CONFIG_PROGRAM(winver,,[install])
+WINE_CONFIG_PROGRAM(wmic,,[clean,install])
+WINE_CONFIG_PROGRAM(wmplayer,,[install])
+WINE_CONFIG_PROGRAM(wordpad,,[clean,install])
+WINE_CONFIG_PROGRAM(write,,[clean,install])
+WINE_CONFIG_PROGRAM(wscript,,[clean,install])
+WINE_CONFIG_TEST(programs/wscript/tests)
+WINE_CONFIG_PROGRAM(wuauserv,,[install])
+WINE_CONFIG_PROGRAM(wusa,,[install])
+WINE_CONFIG_PROGRAM(xcopy,,[clean,install])
+WINE_CONFIG_TEST(programs/xcopy/tests)
+WINE_CONFIG_MAKEFILE([server],,[clean,install-lib])
+WINE_CONFIG_TOOL(tools,[clean])
+WINE_CONFIG_TOOL(tools/sfnt2fon,[clean])
+WINE_CONFIG_TOOL(tools/widl,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/winebuild,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/winedump,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/winegcc,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/winemaker,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/wmc,[clean,install-dev])
+WINE_CONFIG_TOOL(tools/wrc,[clean,install-dev])
+dnl End of auto-generated output commands
+
+dnl Main ignore file
+
+WINE_IGNORE_FILE("TAGS")
+WINE_IGNORE_FILE("tags")
+WINE_IGNORE_FILE("autom4te.cache")
+WINE_IGNORE_FILE("config.log")
+WINE_IGNORE_FILE("config.status")
+WINE_IGNORE_FILE("include/config.h")
+WINE_IGNORE_FILE("include/stamp-h")
+test "$wine_binary" = wine || WINE_IGNORE_FILE("loader/wine")
+
+if test "x$enable_tools" != xno
+then
+    WINE_IGNORE_FILE("tools/makedep$ac_exeext")
+    AC_CONFIG_COMMANDS([tools/makedep],[wine_fn_output_makedep || AS_EXIT],
+[wine_fn_output_makedep ()
+{
+    AS_MKDIR_P(tools)
+    $CC -Iinclude -I$srcdir/include -D__WINESRC__ $EXTRACFLAGS $CPPFLAGS $CFLAGS -o tools/makedep$ac_exeext $srcdir/tools/makedep.c $LDFLAGS
+}])
+fi
+
+AC_CONFIG_COMMANDS([Makefile], [wine_fn_output_makefile Makefile],
+[wine_fn_output_makefile ()
+{
+    cat Make.tmp - <<\_WINE_EOF >\$tmp/makefile && mv -f \$tmp/makefile \$[]1 && rm -f Make.tmp && "$wine_makedep" && return
+`cat $wine_rules_file`
+_WINE_EOF
+    AS_ERROR([could not create Makefile])
+}])
+
+AC_CONFIG_FILES([Make.tmp:Makefile.in])
+
+dnl Some final makefile rules
+
+if test "x$enable_maintainer_mode" = xyes
+then
+    WINE_APPEND_RULE(
+[configure: configure.ac aclocal.m4
+	autoconf --warnings=all
+include/config.h.in: include/stamp-h.in
+include/stamp-h.in: configure.ac aclocal.m4
+	autoheader --warnings=all
+	@echo timestamp > \$[@]])
+fi
+
+if test "x$enable_tools" != xno
+then
+    WINE_APPEND_RULE(
+[tools/makedep$ac_exeext: $srcdir/tools/makedep.c include/config.h config.status
+	@./config.status tools/makedep
+Makefile: tools/makedep$ac_exeext])
+else
+    WINE_APPEND_RULE(
+[\$(MAKEDEP):
+	@echo \"You need to run make in $TOOLSDIR first\" && false])
+fi
+
+if test -n "$with_wine64"
+then
+    WINE_APPEND_RULE(
+[all: fonts server $with_wine64/loader/wine $with_wine64/loader/wine-preloader
+fonts server:
+	\$(RM) \$[@] && \$(LN_S) $with_wine64/\$[@] \$[@]
+$with_wine64/loader/wine:
+	\$(RM) \$[@] && \$(LN_S) $ac_pwd/loader/wine \$[@]
+$with_wine64/loader/wine-preloader:
+	\$(RM) \$[@] && \$(LN_S) $ac_pwd/loader/wine-preloader \$[@]
+clean::
+	\$(RM) fonts server $with_wine64/loader/wine $with_wine64/loader/wine-preloader])
+else
+    AC_SUBST(WINELOADER_INSTALL,"wine.inf")
+    WINE_APPEND_RULE(
+[install install-lib::
+	\$(INSTALL_DATA) $srcdir/loader/l_intl.nls \$(DESTDIR)\$(datadir)/wine/l_intl.nls
+uninstall::
+	\$(RM) \$(DESTDIR)\$(datadir)/wine/l_intl.nls])
+    case $host_os in
+      cygwin*|mingw32*|darwin*|macosx*|linux-android*) ;;
+      *) WINE_APPEND_RULE(
+[install install-lib::
+	\$(INSTALL_DATA) $srcdir/loader/wine.desktop \$(DESTDIR)\$(datadir)/applications/wine.desktop
+uninstall::
+	\$(RM) \$(DESTDIR)\$(datadir)/applications/wine.desktop]) ;;
+    esac
+fi
+
+AS_ECHO(" done") >&AS_MESSAGE_FD
+AC_OUTPUT
+
+if test "$no_create" = "yes"
+then
+  exit 0
+fi
+
+WINE_PRINT_MESSAGES
+
+AS_ECHO("
+$as_me: Finished.  Do '${ac_make}' to compile Wine.
+") >&AS_MESSAGE_FD
+
+dnl Local Variables:
+dnl comment-start: "dnl "
+dnl comment-end: ""
+dnl comment-start-skip: "\\bdnl\\b\\s *"
+dnl compile-command: "autoreconf --warnings=all"
+dnl End:
diff --git a/dlls/d3d9-nine/Makefile.in b/dlls/d3d9-nine/Makefile.in
new file mode 100644
index 0000000..47db963
--- /dev/null
+++ b/dlls/d3d9-nine/Makefile.in
@@ -0,0 +1,14 @@
+MODULE    = d3d9-nine.dll
+IMPORTS   = dxguid uuid advapi32 gdi32 user32
+EXTRAINCL = $(X_CFLAGS) $(D3D_CFLAGS)
+EXTRALIBS = $(D3DADAPTER9_LIBS)
+
+C_SRCS = \
+        d3d9_main.c \
+        d3dadapter9.c \
+        device_wrap.c \
+        present.c \
+        dri3.c \
+        wndproc.c
+
+RC_SRCS = version.rc
diff --git a/dlls/d3d9-nine/d3d9-nine.spec b/dlls/d3d9-nine/d3d9-nine.spec
new file mode 100644
index 0000000..a33cba5
--- /dev/null
+++ b/dlls/d3d9-nine/d3d9-nine.spec
@@ -0,0 +1,14 @@
+@ stdcall Direct3DShaderValidatorCreate9()
+@ stub PSGPError
+@ stub PSGPSampleTexture
+@ stdcall D3DPERF_BeginEvent(long wstr)
+@ stdcall D3DPERF_EndEvent()
+@ stdcall D3DPERF_GetStatus()
+@ stdcall D3DPERF_QueryRepeatFrame()
+@ stdcall D3DPERF_SetMarker(long wstr)
+@ stdcall D3DPERF_SetOptions(long)
+@ stdcall D3DPERF_SetRegion(long wstr)
+@ stub DebugSetLevel
+@ stdcall DebugSetMute()
+@ stdcall Direct3DCreate9(long)
+@ stdcall Direct3DCreate9Ex(long ptr)
diff --git a/dlls/d3d9-nine/d3d9_main.c b/dlls/d3d9-nine/d3d9_main.c
new file mode 100644
index 0000000..f01c70f
--- /dev/null
+++ b/dlls/d3d9-nine/d3d9_main.c
@@ -0,0 +1,164 @@
+/*
+ * Direct3D 9
+ *
+ * Copyright 2002-2003 Jason Edmeades
+ * Copyright 2002-2003 Raphael Junqueira
+ * Copyright 2005 Oliver Stieber
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ *
+ */
+
+#include "config.h"
+#include "initguid.h"
+#include "wine/debug.h"
+
+#include <fcntl.h>
+
+#include <d3dadapter/d3dadapter9.h>
+
+#include "d3dadapter9.h"
+#include "wndproc.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+static int D3DPERF_event_level = 0;
+static Display *gdi_display;
+
+void WINAPI DebugSetMute(void) {
+    /* nothing to do */
+}
+
+IDirect3D9 * WINAPI DECLSPEC_HOTPATCH Direct3DCreate9(UINT sdk_version)
+{
+    IDirect3D9 *native;
+    TRACE("sdk_version %#x.\n", sdk_version);
+
+    if (SUCCEEDED(d3dadapter9_new(gdi_display, FALSE, (IDirect3D9Ex **)&native))) {
+        return native;
+    }
+
+    return NULL;
+}
+
+HRESULT WINAPI DECLSPEC_HOTPATCH Direct3DCreate9Ex(UINT sdk_version, IDirect3D9Ex **d3d9ex)
+{
+    TRACE("sdk_version %#x, d3d9ex %p.\n", sdk_version, d3d9ex);
+
+    return d3dadapter9_new(gdi_display, TRUE, d3d9ex);
+}
+
+/*******************************************************************
+ *       Direct3DShaderValidatorCreate9 (D3D9.@)
+ *
+ * No documentation available for this function.
+ * SDK only says it is internal and shouldn't be used.
+ */
+void* WINAPI Direct3DShaderValidatorCreate9(void)
+{
+    static int once;
+
+    if (!once++) FIXME("stub\n");
+    return NULL;
+}
+
+/*******************************************************************
+ *       DllMain
+ */
+BOOL WINAPI DllMain(HINSTANCE inst, DWORD reason, void *reserved)
+{
+    switch (reason)
+    {
+        case DLL_PROCESS_ATTACH:
+            if (!(gdi_display = XOpenDisplay( NULL ))) {
+                ERR("Failed to open display\n");
+                return FALSE;
+            }
+
+            fcntl( ConnectionNumber(gdi_display), F_SETFD, 1 ); /* set close on exec flag */
+
+            nine_dll_init(inst);
+            break;
+        case DLL_PROCESS_DETACH:
+            if (!reserved)
+                return nine_dll_destroy(inst);
+            break;
+    }
+
+    return TRUE;
+}
+
+/***********************************************************************
+ *              D3DPERF_BeginEvent (D3D9.@)
+ */
+int WINAPI D3DPERF_BeginEvent(D3DCOLOR color, const WCHAR *name)
+{
+    TRACE("color 0x%08x, name %s.\n", color, debugstr_w(name));
+
+    return D3DPERF_event_level++;
+}
+
+/***********************************************************************
+ *              D3DPERF_EndEvent (D3D9.@)
+ */
+int WINAPI D3DPERF_EndEvent(void) {
+    TRACE("(void) : stub\n");
+
+    return --D3DPERF_event_level;
+}
+
+/***********************************************************************
+ *              D3DPERF_GetStatus (D3D9.@)
+ */
+DWORD WINAPI D3DPERF_GetStatus(void) {
+    FIXME("(void) : stub\n");
+
+    return 0;
+}
+
+/***********************************************************************
+ *              D3DPERF_SetOptions (D3D9.@)
+ *
+ */
+void WINAPI D3DPERF_SetOptions(DWORD options)
+{
+  FIXME("(%#x) : stub\n", options);
+}
+
+/***********************************************************************
+ *              D3DPERF_QueryRepeatFrame (D3D9.@)
+ */
+BOOL WINAPI D3DPERF_QueryRepeatFrame(void) {
+    FIXME("(void) : stub\n");
+
+    return FALSE;
+}
+
+/***********************************************************************
+ *              D3DPERF_SetMarker (D3D9.@)
+ */
+void WINAPI D3DPERF_SetMarker(D3DCOLOR color, const WCHAR *name)
+{
+    FIXME("color 0x%08x, name %s stub!\n", color, debugstr_w(name));
+}
+
+/***********************************************************************
+ *              D3DPERF_SetRegion (D3D9.@)
+ */
+void WINAPI D3DPERF_SetRegion(D3DCOLOR color, const WCHAR *name)
+{
+    FIXME("color 0x%08x, name %s stub!\n", color, debugstr_w(name));
+}
diff --git a/dlls/d3d9-nine/d3dadapter9.c b/dlls/d3d9-nine/d3dadapter9.c
new file mode 100644
index 0000000..4b9ad9e
--- /dev/null
+++ b/dlls/d3d9-nine/d3dadapter9.c
@@ -0,0 +1,874 @@
+/*
+ * Wine IDirect3D9 interface using ID3DAdapter9
+ *
+ * Copyright 2013 Joakim Sindholt
+ *                Christoph Bumiller
+ * Copyright 2014 David Heidelberger
+ * Copyright 2014-2015 Axel Davy
+ * Copyright 2015 Nick Sarnie
+ *                Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+#include <d3dadapter/d3dadapter9.h>
+#include "present.h"
+#include "device_wrap.h"
+
+/* this represents a snapshot taken at the moment of creation */
+struct output
+{
+    D3DDISPLAYROTATION rotation; /* current rotation */
+    D3DDISPLAYMODEEX *modes;
+    unsigned nmodes;
+    unsigned nmodesalloc;
+    unsigned current; /* current mode num */
+
+    HMONITOR monitor;
+};
+
+struct adapter_group
+{
+    struct output *outputs;
+    unsigned noutputs;
+    unsigned noutputsalloc;
+
+    /* override driver provided DeviceName with this to homogenize device names
+     * with wine */
+    WCHAR devname[32];
+
+    /* driver stuff */
+    ID3DAdapter9 *adapter;
+};
+
+struct adapter_map
+{
+    unsigned group;
+    unsigned master;
+};
+
+struct d3dadapter9
+{
+    /* COM vtable */
+    void *vtable;
+    /* IUnknown reference count */
+    LONG refs;
+
+    /* adapter groups and mappings */
+    struct adapter_group *groups;
+    struct adapter_map *map;
+    unsigned nadapters;
+    unsigned ngroups;
+    unsigned ngroupsalloc;
+
+    /* true if it implements IDirect3D9Ex */
+    boolean ex;
+    Display *gdi_display;
+};
+
+/* convenience wrapper for calls into ID3D9Adapter */
+#define ADAPTER_GROUP \
+    This->groups[This->map[Adapter].group]
+
+#define ADAPTER_PROC(name, ...) \
+    ID3DAdapter9_##name(ADAPTER_GROUP.adapter, ## __VA_ARGS__)
+
+#define ADAPTER_OUTPUT \
+    ADAPTER_GROUP.outputs[Adapter-This->map[Adapter].master]
+
+static HRESULT WINAPI
+d3dadapter9_CheckDeviceFormat( struct d3dadapter9 *This,
+                               UINT Adapter,
+                               D3DDEVTYPE DeviceType,
+                               D3DFORMAT AdapterFormat,
+                               DWORD Usage,
+                               D3DRESOURCETYPE RType,
+                               D3DFORMAT CheckFormat );
+
+static ULONG WINAPI
+d3dadapter9_AddRef( struct d3dadapter9 *This )
+{
+    ULONG refs = InterlockedIncrement(&This->refs);
+    TRACE("%p increasing refcount to %u.\n", This, refs);
+    return refs;
+}
+
+static ULONG WINAPI
+d3dadapter9_Release( struct d3dadapter9 *This )
+{
+    ULONG refs = InterlockedDecrement(&This->refs);
+    TRACE("%p decreasing refcount to %u.\n", This, refs);
+    if (refs == 0) {
+        /* dtor */
+        if (This->map) {
+            HeapFree(GetProcessHeap(), 0, This->map);
+        }
+
+        if (This->groups) {
+            int i, j;
+            for (i = 0; i < This->ngroups; ++i) {
+                if (This->groups[i].outputs) {
+                    for (j = 0; j < This->groups[i].noutputs; ++j) {
+                        if (This->groups[i].outputs[j].modes) {
+                            HeapFree(GetProcessHeap(), 0,
+                                     This->groups[i].outputs[j].modes);
+                        }
+                    }
+                    HeapFree(GetProcessHeap(), 0, This->groups[i].outputs);
+                }
+
+                if (This->groups[i].adapter) {
+                    ID3DAdapter9_Release(This->groups[i].adapter);
+                }
+            }
+            HeapFree(GetProcessHeap(), 0, This->groups);
+        }
+
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+    return refs;
+}
+
+static HRESULT WINAPI
+d3dadapter9_QueryInterface( struct d3dadapter9 *This,
+                            REFIID riid,
+                            void **ppvObject )
+{
+    if (!ppvObject) { return E_POINTER; }
+    if ((IsEqualGUID(&IID_IDirect3D9Ex, riid) && This->ex) ||
+         IsEqualGUID(&IID_IDirect3D9, riid) ||
+         IsEqualGUID(&IID_IUnknown, riid)) {
+        *ppvObject = This;
+        d3dadapter9_AddRef(This);
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+    *ppvObject = NULL;
+
+    return E_NOINTERFACE;
+}
+
+static HRESULT WINAPI
+d3dadapter9_RegisterSoftwareDevice( struct d3dadapter9 *This,
+                                    void *pInitializeFunction )
+{
+    FIXME("(%p, %p), stub!\n", This, pInitializeFunction);
+    return D3DERR_INVALIDCALL;
+}
+
+static UINT WINAPI
+d3dadapter9_GetAdapterCount( struct d3dadapter9 *This )
+{
+    return This->nadapters;
+}
+
+static HRESULT WINAPI
+d3dadapter9_GetAdapterIdentifier( struct d3dadapter9 *This,
+                                  UINT Adapter,
+                                  DWORD Flags,
+                                  D3DADAPTER_IDENTIFIER9 *pIdentifier )
+{
+    HRESULT hr;
+    HKEY regkey;
+
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+
+    hr = ADAPTER_PROC(GetAdapterIdentifier, Flags, pIdentifier);
+    if (SUCCEEDED(hr)) {
+        /* Override the driver provided DeviceName with what Wine provided */
+        ZeroMemory(pIdentifier->DeviceName, sizeof(pIdentifier->DeviceName));
+        if (!WideCharToMultiByte(CP_ACP, 0, ADAPTER_GROUP.devname, -1,
+                                 pIdentifier->DeviceName,
+                                 sizeof(pIdentifier->DeviceName),
+                                 NULL, NULL)) {
+            /* Wine does it */
+            return D3DERR_INVALIDCALL;
+        }
+        TRACE("DeviceName overriden: %s\n", pIdentifier->DeviceName);
+
+        /* Override PCI IDs when wined3d registry keys are set */
+        if (!RegOpenKeyA(HKEY_CURRENT_USER, "Software\\Wine\\Direct3D", &regkey)) {
+            DWORD type, data;
+            DWORD size = sizeof(DWORD);
+
+            if (!RegQueryValueExA(regkey, "VideoPciDeviceID", 0, &type, (BYTE *)&data, &size) && (type == REG_DWORD) && (size == sizeof(DWORD)))
+                pIdentifier->DeviceId = data;
+            if(size != sizeof(DWORD)) {
+                ERR("VideoPciDeviceID is not a DWORD\n");
+                size = sizeof(DWORD);
+            }
+            if (!RegQueryValueExA(regkey, "VideoPciVendorID", 0, &type, (BYTE *)&data, &size) && (type == REG_DWORD) && (size == sizeof(DWORD)))
+                pIdentifier->VendorId = data;
+            if(size != sizeof(DWORD))
+                ERR("VideoPciVendorID is not a DWORD\n");
+            RegCloseKey(regkey);
+
+            TRACE("DeviceId:VendorId overridden: %04X:%04X\n", pIdentifier->DeviceId, pIdentifier->VendorId);
+        }
+    }
+    return hr;
+}
+
+static UINT WINAPI
+d3dadapter9_GetAdapterModeCount( struct d3dadapter9 *This,
+                                 UINT Adapter,
+                                 D3DFORMAT Format )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) {
+        WARN("Adapter %u does not exist.\n", Adapter);
+        return 0;
+    }
+    if (FAILED(d3dadapter9_CheckDeviceFormat(This, Adapter, D3DDEVTYPE_HAL,
+                                         Format, D3DUSAGE_RENDERTARGET,
+                                         D3DRTYPE_SURFACE, Format))) {
+        WARN("DeviceFormat not available.\n");
+        return 0;
+    }
+
+    TRACE("%u modes.\n", ADAPTER_OUTPUT.nmodes);
+    return ADAPTER_OUTPUT.nmodes;
+}
+
+static HRESULT WINAPI
+d3dadapter9_EnumAdapterModes( struct d3dadapter9 *This,
+                              UINT Adapter,
+                              D3DFORMAT Format,
+                              UINT Mode,
+                              D3DDISPLAYMODE *pMode )
+{
+    HRESULT hr;
+
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) {
+        WARN("Adapter %u does not exist.\n", Adapter);
+        return D3DERR_INVALIDCALL;
+    }
+
+    hr = d3dadapter9_CheckDeviceFormat(This, Adapter, D3DDEVTYPE_HAL,
+                                   Format, D3DUSAGE_RENDERTARGET,
+                                   D3DRTYPE_SURFACE, Format);
+    if (FAILED(hr)) {
+        TRACE("DeviceFormat not available.\n");
+        return hr;
+    }
+
+    if (Mode >= ADAPTER_OUTPUT.nmodes) {
+        WARN("Mode %u does not exist.\n", Mode);
+        return D3DERR_INVALIDCALL;
+    }
+
+    pMode->Width = ADAPTER_OUTPUT.modes[Mode].Width;
+    pMode->Height = ADAPTER_OUTPUT.modes[Mode].Height;
+    pMode->RefreshRate = ADAPTER_OUTPUT.modes[Mode].RefreshRate;
+    pMode->Format = Format;
+
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+d3dadapter9_GetAdapterDisplayMode( struct d3dadapter9 *This,
+                                   UINT Adapter,
+                                   D3DDISPLAYMODE *pMode )
+{
+    UINT Mode;
+
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) {
+        WARN("Adapter %u does not exist.\n", Adapter);
+        return D3DERR_INVALIDCALL;
+    }
+
+    Mode = ADAPTER_OUTPUT.current;
+    pMode->Width = ADAPTER_OUTPUT.modes[Mode].Width;
+    pMode->Height = ADAPTER_OUTPUT.modes[Mode].Height;
+    pMode->RefreshRate = ADAPTER_OUTPUT.modes[Mode].RefreshRate;
+    pMode->Format = ADAPTER_OUTPUT.modes[Mode].Format;
+
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+d3dadapter9_CheckDeviceType( struct d3dadapter9 *This,
+                             UINT Adapter,
+                             D3DDEVTYPE DevType,
+                             D3DFORMAT AdapterFormat,
+                             D3DFORMAT BackBufferFormat,
+                             BOOL bWindowed )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+    return ADAPTER_PROC(CheckDeviceType,
+                        DevType, AdapterFormat, BackBufferFormat, bWindowed);
+}
+
+static HRESULT WINAPI
+d3dadapter9_CheckDeviceFormat( struct d3dadapter9 *This,
+                               UINT Adapter,
+                               D3DDEVTYPE DeviceType,
+                               D3DFORMAT AdapterFormat,
+                               DWORD Usage,
+                               D3DRESOURCETYPE RType,
+                               D3DFORMAT CheckFormat )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+    return ADAPTER_PROC(CheckDeviceFormat,
+                        DeviceType, AdapterFormat, Usage, RType, CheckFormat);
+}
+
+static HRESULT WINAPI
+d3dadapter9_CheckDeviceMultiSampleType( struct d3dadapter9 *This,
+                                        UINT Adapter,
+                                        D3DDEVTYPE DeviceType,
+                                        D3DFORMAT SurfaceFormat,
+                                        BOOL Windowed,
+                                        D3DMULTISAMPLE_TYPE MultiSampleType,
+                                        DWORD *pQualityLevels )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+    return ADAPTER_PROC(CheckDeviceMultiSampleType, DeviceType, SurfaceFormat,
+                        Windowed, MultiSampleType, pQualityLevels);
+}
+
+static HRESULT WINAPI
+d3dadapter9_CheckDepthStencilMatch( struct d3dadapter9 *This,
+                                    UINT Adapter,
+                                    D3DDEVTYPE DeviceType,
+                                    D3DFORMAT AdapterFormat,
+                                    D3DFORMAT RenderTargetFormat,
+                                    D3DFORMAT DepthStencilFormat )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+    return ADAPTER_PROC(CheckDepthStencilMatch, DeviceType, AdapterFormat,
+                        RenderTargetFormat, DepthStencilFormat);
+}
+
+static HRESULT WINAPI
+d3dadapter9_CheckDeviceFormatConversion( struct d3dadapter9 *This,
+                                     UINT Adapter,
+                                     D3DDEVTYPE DeviceType,
+                                     D3DFORMAT SourceFormat,
+                                     D3DFORMAT TargetFormat )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+    return ADAPTER_PROC(CheckDeviceFormatConversion,
+                        DeviceType, SourceFormat, TargetFormat);
+}
+
+static HRESULT WINAPI
+d3dadapter9_GetDeviceCaps( struct d3dadapter9 *This,
+                           UINT Adapter,
+                           D3DDEVTYPE DeviceType,
+                           D3DCAPS9 *pCaps )
+{
+    HRESULT hr;
+
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return D3DERR_INVALIDCALL; }
+
+    hr = ADAPTER_PROC(GetDeviceCaps, DeviceType, pCaps);
+    if (FAILED(hr)) { return hr; }
+
+    pCaps->MasterAdapterOrdinal = This->map[Adapter].master;
+    pCaps->AdapterOrdinalInGroup = Adapter-This->map[Adapter].master;
+    pCaps->NumberOfAdaptersInGroup = ADAPTER_GROUP.noutputs;
+
+    return hr;
+}
+
+static HMONITOR WINAPI
+d3dadapter9_GetAdapterMonitor( struct d3dadapter9 *This,
+                               UINT Adapter )
+{
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) { return (HMONITOR)0; }
+    return (HMONITOR)ADAPTER_OUTPUT.monitor;
+}
+
+static HRESULT WINAPI DECLSPEC_HOTPATCH
+d3dadapter9_CreateDeviceEx( struct d3dadapter9 *This,
+                            UINT Adapter,
+                            D3DDEVTYPE DeviceType,
+                            HWND hFocusWindow,
+                            DWORD BehaviorFlags,
+                            D3DPRESENT_PARAMETERS *pPresentationParameters,
+                            D3DDISPLAYMODEEX *pFullscreenDisplayMode,
+                            IDirect3DDevice9Ex **ppReturnedDeviceInterface );
+
+static HRESULT WINAPI DECLSPEC_HOTPATCH
+d3dadapter9_CreateDevice( struct d3dadapter9 *This,
+                          UINT Adapter,
+                          D3DDEVTYPE DeviceType,
+                          HWND hFocusWindow,
+                          DWORD BehaviorFlags,
+                          D3DPRESENT_PARAMETERS *pPresentationParameters,
+                          IDirect3DDevice9 **ppReturnedDeviceInterface )
+{
+    HRESULT hr;
+    hr = d3dadapter9_CreateDeviceEx(This, Adapter, DeviceType, hFocusWindow,
+                                    BehaviorFlags, pPresentationParameters,
+                                    NULL,
+                                    (IDirect3DDevice9Ex **)ppReturnedDeviceInterface);
+    if (FAILED(hr))
+        return hr;
+    return D3D_OK;
+}
+
+static UINT WINAPI
+d3dadapter9_GetAdapterModeCountEx( struct d3dadapter9 *This,
+                                   UINT Adapter,
+                                   const D3DDISPLAYMODEFILTER *pFilter )
+{
+    return 1;
+}
+
+static HRESULT WINAPI
+d3dadapter9_EnumAdapterModesEx( struct d3dadapter9 *This,
+                                UINT Adapter,
+                                const D3DDISPLAYMODEFILTER *pFilter,
+                                UINT Mode,
+                                D3DDISPLAYMODEEX *pMode )
+{
+    FIXME("(%p, %u, %p, %u, %p), stub!\n", This, Adapter, pFilter, Mode, pMode);
+    return D3DERR_INVALIDCALL;
+}
+
+static HRESULT WINAPI
+d3dadapter9_GetAdapterDisplayModeEx( struct d3dadapter9 *This,
+                                     UINT Adapter,
+                                     D3DDISPLAYMODEEX *pMode,
+                                     D3DDISPLAYROTATION *pRotation )
+{
+    FIXME("(%p, %u, %p, %p), stub!\n", This, Adapter, pMode, pRotation);
+    return D3DERR_INVALIDCALL;
+}
+
+static HRESULT WINAPI DECLSPEC_HOTPATCH
+d3dadapter9_CreateDeviceEx( struct d3dadapter9 *This,
+                            UINT Adapter,
+                            D3DDEVTYPE DeviceType,
+                            HWND hFocusWindow,
+                            DWORD BehaviorFlags,
+                            D3DPRESENT_PARAMETERS *pPresentationParameters,
+                            D3DDISPLAYMODEEX *pFullscreenDisplayMode,
+                            IDirect3DDevice9Ex **ppReturnedDeviceInterface )
+{
+    ID3DPresentGroup *present;
+    HRESULT hr;
+    boolean no_window_changes;
+
+    if (Adapter >= d3dadapter9_GetAdapterCount(This)) {
+        WARN("Adapter %u does not exist.\n", Adapter);
+        return D3DERR_INVALIDCALL;
+    }
+
+    {
+        struct adapter_group *group = &ADAPTER_GROUP;
+        unsigned nparams, ordinal;
+
+        if (BehaviorFlags & D3DCREATE_ADAPTERGROUP_DEVICE) {
+            nparams = group->noutputs;
+            ordinal = 0;
+        } else {
+            nparams = 1;
+            ordinal = Adapter - This->map[Adapter].master;
+        }
+        no_window_changes = !!(BehaviorFlags & D3DCREATE_NOWINDOWCHANGES);
+
+        hr = present_create_present_group(This->gdi_display, group->devname, ordinal,
+                                               hFocusWindow,
+                                               pPresentationParameters,
+                                               nparams, &present, This->ex, no_window_changes);
+    }
+
+    if (FAILED(hr)) {
+        WARN("Failed to create PresentGroup.\n");
+        return hr;
+    }
+
+    if (This->ex) {
+        hr = ADAPTER_PROC(CreateDeviceEx, Adapter, DeviceType, hFocusWindow,
+                          BehaviorFlags, pPresentationParameters,
+                          pFullscreenDisplayMode,
+                          (IDirect3D9Ex *)This, present,
+                          ppReturnedDeviceInterface);
+    } else { /* CreateDevice on non-ex */
+        hr = ADAPTER_PROC(CreateDevice, Adapter, DeviceType, hFocusWindow,
+                          BehaviorFlags, pPresentationParameters,
+                          (IDirect3D9 *)This, present,
+                          (IDirect3DDevice9 **)ppReturnedDeviceInterface);
+    }
+    if (FAILED(hr)) {
+        WARN("ADAPTER_PROC failed.\n");
+        ID3DPresentGroup_Release(present);
+    }
+
+    /* Nine returns different vtables for Ex, non Ex and
+     * if you use the multithread flag or not. This prevents
+     * things like Steam overlay to work, in addition to the problem
+     * that functions nine side are not recognized by wine as
+     * hotpatch-able. If possible, we use our vtable wrapper,
+     * which solves the problem described above. */
+    if (enable_device_vtable_wrapper())
+        (*ppReturnedDeviceInterface)->lpVtbl = get_device_vtable();
+    return hr;
+}
+
+static HRESULT WINAPI
+d3dadapter9_GetAdapterLUID( struct d3dadapter9 *This,
+                            UINT Adapter,
+                            LUID *pLUID )
+{
+    FIXME("(%p, %u, %p), stub!\n", This, Adapter, pLUID);
+    return D3DERR_INVALIDCALL;
+}
+
+static struct adapter_group *
+add_group( struct d3dadapter9 *This )
+{
+    if (This->ngroups >= This->ngroupsalloc) {
+        void *r;
+
+        if (This->ngroupsalloc == 0) {
+            This->ngroupsalloc = 2;
+            r = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                          This->ngroupsalloc*sizeof(struct adapter_group));
+        } else {
+            This->ngroupsalloc <<= 1;
+            r = HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, This->groups,
+                        This->ngroupsalloc*sizeof(struct adapter_group));
+        }
+
+        if (!r) { return NULL; }
+        This->groups = r;
+    }
+
+    return &This->groups[This->ngroups++];
+}
+
+static void
+remove_group( struct d3dadapter9 *This )
+{
+    struct adapter_group *group = &This->groups[This->ngroups-1];
+    int i;
+
+    for (i = 0; i < group->noutputs; ++i) {
+        HeapFree(GetProcessHeap(), 0, group->outputs[i].modes);
+    }
+    HeapFree(GetProcessHeap(), 0, group->outputs);
+
+    ZeroMemory(group, sizeof(struct adapter_group));
+    This->ngroups--;
+}
+
+static struct output *
+add_output( struct d3dadapter9 *This )
+{
+    struct adapter_group *group = &This->groups[This->ngroups-1];
+
+    if (group->noutputs >= group->noutputsalloc) {
+        void *r;
+
+        if (group->noutputsalloc == 0) {
+            group->noutputsalloc = 2;
+            r = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                          group->noutputsalloc*sizeof(struct output));
+        } else {
+            group->noutputsalloc <<= 1;
+            r = HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, group->outputs,
+                            group->noutputsalloc*sizeof(struct output));
+        }
+
+        if (!r) { return NULL; }
+        group->outputs = r;
+    }
+
+    return &group->outputs[group->noutputs++];
+}
+
+static void
+remove_output( struct d3dadapter9 *This )
+{
+    struct adapter_group *group = &This->groups[This->ngroups-1];
+    struct output *out = &group->outputs[group->noutputs-1];
+
+    HeapFree(GetProcessHeap(), 0, out->modes);
+
+    ZeroMemory(out, sizeof(struct output));
+    group->noutputs--;
+}
+
+static D3DDISPLAYMODEEX *
+add_mode( struct d3dadapter9 *This )
+{
+    struct adapter_group *group = &This->groups[This->ngroups-1];
+    struct output *out = &group->outputs[group->noutputs-1];
+
+    if (out->nmodes >= out->nmodesalloc) {
+        void *r;
+
+        if (out->nmodesalloc == 0) {
+            out->nmodesalloc = 8;
+            r = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                          out->nmodesalloc*sizeof(struct D3DDISPLAYMODEEX));
+        } else {
+            out->nmodesalloc <<= 1;
+            r = HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, out->modes,
+                            out->nmodesalloc*sizeof(struct D3DDISPLAYMODEEX));
+        }
+
+        if (!r) { return NULL; }
+        out->modes = r;
+    }
+
+    return &out->modes[out->nmodes++];
+}
+
+static void
+remove_mode( struct d3dadapter9 *This )
+{
+    struct adapter_group *group = &This->groups[This->ngroups-1];
+    struct output *out = &group->outputs[group->noutputs-1];
+    out->nmodes--;
+}
+
+#ifndef DM_INTERLACED
+#define DM_INTERLACED 2
+#endif /* DM_INTERLACED */
+
+static HRESULT
+fill_groups( struct d3dadapter9 *This )
+{
+    DISPLAY_DEVICEW dd;
+    DEVMODEW dm;
+    POINT pt;
+    HDC hdc;
+    HRESULT hr;
+    int i, j, k;
+
+    WCHAR wdisp[] = {'D','I','S','P','L','A','Y',0};
+
+    ZeroMemory(&dd, sizeof(dd));
+    ZeroMemory(&dm, sizeof(dm));
+    dd.cb = sizeof(dd);
+    dm.dmSize = sizeof(dm);
+
+    for (i = 0; EnumDisplayDevicesW(NULL, i, &dd, 0); ++i) {
+        struct adapter_group *group = add_group(This);
+        if (!group) {
+            ERR("Out of memory.\n");
+            return E_OUTOFMEMORY;
+        }
+
+        hdc = CreateDCW(wdisp, dd.DeviceName, NULL, NULL);
+        if (!hdc) {
+            remove_group(This);
+            WARN("Unable to create DC for display %d.\n", i);
+            goto end_group;
+        }
+
+        hr = present_create_adapter9(This->gdi_display, hdc, &group->adapter);
+        DeleteDC(hdc);
+        if (FAILED(hr)) {
+            remove_group(This);
+            goto end_group;
+        }
+
+        CopyMemory(group->devname, dd.DeviceName, sizeof(group->devname));
+        for (j = 0; EnumDisplayDevicesW(group->devname, j, &dd, 0); ++j) {
+            struct output *out = add_output(This);
+            boolean orient = FALSE, monit = FALSE;
+            if (!out) {
+                ERR("Out of memory.\n");
+                return E_OUTOFMEMORY;
+            }
+
+            for (k = 0; EnumDisplaySettingsExW(dd.DeviceName, k, &dm, 0); ++k) {
+                D3DDISPLAYMODEEX *mode = add_mode(This);
+                if (!out) {
+                    ERR("Out of memory.\n");
+                    return E_OUTOFMEMORY;
+                }
+
+                mode->Size = sizeof(D3DDISPLAYMODEEX);
+                mode->Width = dm.dmPelsWidth;
+                mode->Height = dm.dmPelsHeight;
+                mode->RefreshRate = dm.dmDisplayFrequency;
+                mode->ScanLineOrdering =
+                    (dm.dmDisplayFlags & DM_INTERLACED) ?
+                        D3DSCANLINEORDERING_INTERLACED :
+                        D3DSCANLINEORDERING_PROGRESSIVE;
+
+                switch (dm.dmBitsPerPel) {
+                    case 32: mode->Format = D3DFMT_X8R8G8B8; break;
+                    case 24: mode->Format = D3DFMT_R8G8B8; break;
+                    case 16: mode->Format = D3DFMT_R5G6B5; break;
+                    case 8:
+                        remove_mode(This);
+                        goto end_mode;
+
+                    default:
+                        remove_mode(This);
+                        WARN("Unknown format (%u bpp) in display %d, monitor "
+                             "%d, mode %d.\n", dm.dmBitsPerPel, i, j, k);
+                        goto end_mode;
+                }
+
+                if (!orient) {
+                    switch (dm.dmDisplayOrientation) {
+                        case DMDO_DEFAULT:
+                            out->rotation = D3DDISPLAYROTATION_IDENTITY;
+                            break;
+
+                        case DMDO_90:
+                            out->rotation = D3DDISPLAYROTATION_90;
+                            break;
+
+                        case DMDO_180:
+                            out->rotation = D3DDISPLAYROTATION_180;
+                            break;
+
+                        case DMDO_270:
+                            out->rotation = D3DDISPLAYROTATION_270;
+                            break;
+
+                        default:
+                            remove_output(This);
+                            WARN("Unknown display rotation in display %d, "
+                                 "monitor %d\n", i, j);
+                            goto end_output;
+                    }
+                    orient = TRUE;
+                }
+
+                if (!monit) {
+                    pt.x = dm.dmPosition.x;
+                    pt.y = dm.dmPosition.y;
+                    out->monitor = MonitorFromPoint(pt, 0);
+                    if (!out->monitor) {
+                        remove_output(This);
+                        WARN("Unable to get monitor handle for display %d, "
+                             "monitor %d.\n", i, j);
+                        goto end_output;
+                    }
+                    monit = TRUE;
+                }
+
+end_mode:
+                ZeroMemory(&dm, sizeof(dm));
+                dm.dmSize = sizeof(dm);
+            }
+
+end_output:
+            ZeroMemory(&dd, sizeof(dd));
+            dd.cb = sizeof(dd);
+        }
+
+end_group:
+        ZeroMemory(&dd, sizeof(dd));
+        dd.cb = sizeof(dd);
+    }
+
+    return D3D_OK;
+}
+
+static IDirect3D9ExVtbl d3dadapter9_vtable = {
+    (void *)d3dadapter9_QueryInterface,
+    (void *)d3dadapter9_AddRef,
+    (void *)d3dadapter9_Release,
+    (void *)d3dadapter9_RegisterSoftwareDevice,
+    (void *)d3dadapter9_GetAdapterCount,
+    (void *)d3dadapter9_GetAdapterIdentifier,
+    (void *)d3dadapter9_GetAdapterModeCount,
+    (void *)d3dadapter9_EnumAdapterModes,
+    (void *)d3dadapter9_GetAdapterDisplayMode,
+    (void *)d3dadapter9_CheckDeviceType,
+    (void *)d3dadapter9_CheckDeviceFormat,
+    (void *)d3dadapter9_CheckDeviceMultiSampleType,
+    (void *)d3dadapter9_CheckDepthStencilMatch,
+    (void *)d3dadapter9_CheckDeviceFormatConversion,
+    (void *)d3dadapter9_GetDeviceCaps,
+    (void *)d3dadapter9_GetAdapterMonitor,
+    (void *)d3dadapter9_CreateDevice,
+    (void *)d3dadapter9_GetAdapterModeCountEx,
+    (void *)d3dadapter9_EnumAdapterModesEx,
+    (void *)d3dadapter9_GetAdapterDisplayModeEx,
+    (void *)d3dadapter9_CreateDeviceEx,
+    (void *)d3dadapter9_GetAdapterLUID
+};
+
+HRESULT
+d3dadapter9_new( Display *gdi_display,
+                 boolean ex,
+                 IDirect3D9Ex **ppOut )
+{
+    struct d3dadapter9 *This = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                                         sizeof(struct d3dadapter9));
+    HRESULT hr;
+    unsigned i, j, k;
+
+    if (!This) {
+        ERR("Out of memory.\n");
+        return E_OUTOFMEMORY;
+    }
+
+    This->vtable = &d3dadapter9_vtable;
+    This->refs = 1;
+    This->ex = ex;
+    This->gdi_display = gdi_display;
+
+    if (!has_d3dadapter(gdi_display)) {
+        ERR("Your display driver doesn't support native D3D9 adapters.\n");
+        d3dadapter9_Release(This);
+        return D3DERR_NOTAVAILABLE;
+    }
+
+    hr = fill_groups(This);
+    if (FAILED(hr)) {
+        d3dadapter9_Release(This);
+        return hr;
+    }
+
+    /* map absolute adapter IDs with internal adapters */
+    for (i = 0; i < This->ngroups; ++i) {
+        for (j = 0; j < This->groups[i].noutputs; ++j) {
+            This->nadapters++;
+        }
+    }
+    if (This->nadapters == 0) {
+        ERR("No available native adapters in system.\n");
+        d3dadapter9_Release(This);
+        return D3DERR_NOTAVAILABLE;
+    }
+
+    This->map = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                          This->nadapters*sizeof(struct adapter_map));
+    if (!This->map) {
+        d3dadapter9_Release(This);
+        ERR("Out of memory.\n");
+        return E_OUTOFMEMORY;
+    }
+    for (i = k = 0; i < This->ngroups; ++i) {
+        for (j = 0; j < This->groups[i].noutputs; ++j, ++k) {
+            This->map[k].master = k-j;
+            This->map[k].group = i;
+        }
+    }
+
+    *ppOut = (IDirect3D9Ex *)This;
+    FIXME("\033[1;32m\nNative Direct3D 9 is active."
+          "\nFor more information visit https://wiki.ixit.cz/d3d9\033[0m\n");
+    return D3D_OK;
+}
diff --git a/dlls/d3d9-nine/d3dadapter9.h b/dlls/d3d9-nine/d3dadapter9.h
new file mode 100644
index 0000000..2fafdf2
--- /dev/null
+++ b/dlls/d3d9-nine/d3dadapter9.h
@@ -0,0 +1,30 @@
+/*
+ * D3DAdapter9 interface
+ *
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __WINE_D3D9ADAPTER_H
+#define __WINE_D3D9ADAPTER_H
+
+#include <X11/Xlib.h>
+
+void d3dadapter9_init(HINSTANCE hinst);
+void d3dadapter9_destroy(HINSTANCE hinst);
+HRESULT d3dadapter9_new(Display *gdi_display, boolean ex, IDirect3D9Ex **ppOut);
+
+#endif /* __WINE_D3D9ADAPTER_H */
diff --git a/dlls/d3d9-nine/device_wrap.c b/dlls/d3d9-nine/device_wrap.c
new file mode 100644
index 0000000..8f95e4b
--- /dev/null
+++ b/dlls/d3d9-nine/device_wrap.c
@@ -0,0 +1,502 @@
+/*
+ * Copyright 2016 Axel Davy
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+#include "wine/port.h"
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+#include <d3d9.h>
+
+#include "device_wrap.h"
+
+struct IDirect3DDevice9Ex_Minor1
+{
+        IDirect3DDevice9ExVtbl *lpVtbl;
+        IDirect3DDevice9ExVtbl *lpVtbl_internal;
+};
+
+struct IDirect3DSwapChain9Ex_Minor1
+{
+        IDirect3DSwapChain9ExVtbl *lpVtbl;
+        IDirect3DSwapChain9ExVtbl *lpVtbl_internal;
+};
+
+typedef struct IDirect3DDevice9Ex_Minor1 IDirect3DDevice9Ex_Minor1;
+typedef struct IDirect3DSwapChain9Ex_Minor1 IDirect3DSwapChain9Ex_Minor1;
+
+#define SWAPCHAIN_WRAP0(ret, func)  \
+    ret WINAPI WineNineSwapChain9_ ## func(IDirect3DSwapChain9Ex *This) \
+    { \
+        return ((IDirect3DSwapChain9Ex_Minor1 *)This)->lpVtbl_internal->func(This); \
+    }
+
+#define SWAPCHAIN_WRAP1(ret, func, type1)  \
+    ret WINAPI WineNineSwapChain9_ ## func(IDirect3DSwapChain9Ex *This, type1 arg1) \
+    { \
+        return ((IDirect3DSwapChain9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1); \
+    }
+
+#define SWAPCHAIN_WRAP2(ret, func, type1, type2)  \
+    ret WINAPI WineNineSwapChain9_ ## func(IDirect3DSwapChain9Ex *This, type1 arg1, type2 arg2) \
+    { \
+        return ((IDirect3DSwapChain9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2); \
+    }
+
+#define SWAPCHAIN_WRAP3(ret, func, type1, type2, type3)  \
+    ret WINAPI WineNineSwapChain9_ ## func(IDirect3DSwapChain9Ex *This, type1 arg1, type2 arg2, type3 arg3) \
+    { \
+        return ((IDirect3DSwapChain9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3); \
+    }
+
+#define SWAPCHAIN_H_WRAP5(ret, func, type1, type2, type3, type4, type5)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineSwapChain9_ ## func(IDirect3DSwapChain9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5) \
+    { \
+        return ((IDirect3DSwapChain9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5); \
+    }
+
+#define DEVICE_WRAP0(ret, func)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This); \
+    }
+
+#define DEVICE_WRAP1(ret, func, type1)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1); \
+    }
+
+#define DEVICE_WRAP2(ret, func, type1, type2)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2); \
+    }
+
+#define DEVICE_WRAP3(ret, func, type1, type2, type3)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3); \
+    }
+
+#define DEVICE_WRAP4(ret, func, type1, type2, type3, type4)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4); \
+    }
+
+#define DEVICE_WRAP5(ret, func, type1, type2, type3, type4, type5)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5); \
+    }
+
+#define DEVICE_WRAP6(ret, func, type1, type2, type3, type4, type5, type6)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5, type6 arg6) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5, arg6); \
+    }
+
+#define DEVICE_WRAP7(ret, func, type1, type2, type3, type4, type5, type6, type7)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5, type6 arg6, type7 arg7) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5, arg6, arg7); \
+    }
+
+#define DEVICE_WRAP8(ret, func, type1, type2, type3, type4, type5, type6, type7, type8)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5, type6 arg6, type7 arg7, type8 arg8) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); \
+    }
+
+#define DEVICE_WRAP9(ret, func, type1, type2, type3, type4, type5, type6, type7, type8, type9)  \
+    ret WINAPI WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5, type6 arg6, type7 arg7, type8 arg8, type9 arg9) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); \
+    }
+
+#define DEVICE_H_WRAP0(ret, func)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This); \
+    }
+
+#define DEVICE_H_WRAP1(ret, func, type1)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1); \
+    }
+
+#define DEVICE_H_WRAP2(ret, func, type1, type2)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2); \
+    }
+
+#define DEVICE_H_WRAP3(ret, func, type1, type2, type3)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3); \
+    }
+
+#define DEVICE_H_WRAP4(ret, func, type1, type2, type3, type4)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4); \
+    }
+
+#define DEVICE_H_WRAP5(ret, func, type1, type2, type3, type4, type5)  \
+    ret WINAPI DECLSPEC_HOTPATCH WineNineDevice9_ ## func(IDirect3DDevice9Ex *This, type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5) \
+    { \
+        return ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->func(This, arg1, arg2, arg3, arg4, arg5); \
+    }
+
+SWAPCHAIN_WRAP2(HRESULT, QueryInterface, REFIID, void **)
+SWAPCHAIN_WRAP0(ULONG, AddRef)
+SWAPCHAIN_WRAP0(ULONG, Release)
+SWAPCHAIN_H_WRAP5(HRESULT, Present, const RECT *, const RECT *, HWND, const RGNDATA *, DWORD)
+SWAPCHAIN_WRAP1(HRESULT, GetFrontBufferData, IDirect3DSurface9 *)
+SWAPCHAIN_WRAP3(HRESULT, GetBackBuffer, UINT, D3DBACKBUFFER_TYPE, IDirect3DSurface9 **)
+SWAPCHAIN_WRAP1(HRESULT, GetRasterStatus, D3DRASTER_STATUS *)
+SWAPCHAIN_WRAP1(HRESULT, GetDisplayMode, D3DDISPLAYMODE *)
+SWAPCHAIN_WRAP1(HRESULT, GetDevice, IDirect3DDevice9 **)
+SWAPCHAIN_WRAP1(HRESULT, GetPresentParameters, D3DPRESENT_PARAMETERS *)
+SWAPCHAIN_WRAP1(HRESULT, GetLastPresentCount, UINT *)
+SWAPCHAIN_WRAP1(HRESULT, GetPresentStats, D3DPRESENTSTATS *)
+SWAPCHAIN_WRAP2(HRESULT, GetDisplayModeEx, D3DDISPLAYMODEEX *, D3DDISPLAYROTATION *)
+
+DEVICE_WRAP2(HRESULT, QueryInterface, REFIID, void **)
+DEVICE_WRAP0(ULONG, AddRef)
+DEVICE_H_WRAP0(ULONG, Release)
+DEVICE_WRAP0(HRESULT, TestCooperativeLevel)
+DEVICE_WRAP0(UINT, GetAvailableTextureMem)
+DEVICE_WRAP0(HRESULT, EvictManagedResources)
+DEVICE_WRAP1(HRESULT, GetDirect3D, IDirect3D9 **)
+DEVICE_WRAP1(HRESULT, GetDeviceCaps, D3DCAPS9 *)
+DEVICE_WRAP2(HRESULT, GetDisplayMode, UINT, D3DDISPLAYMODE*)
+DEVICE_WRAP1(HRESULT, GetCreationParameters, D3DDEVICE_CREATION_PARAMETERS *)
+DEVICE_WRAP3(HRESULT, SetCursorProperties, UINT, UINT, IDirect3DSurface9 *)
+DEVICE_WRAP3(void, SetCursorPosition, int, int, DWORD)
+DEVICE_WRAP1(BOOL, ShowCursor, BOOL)
+/*DEVICE_H_WRAP2(HRESULT, CreateAdditionalSwapChain, D3DPRESENT_PARAMETERS *, IDirect3DSwapChain9 **)*/
+/*DEVICE_H_WRAP2(HRESULT, GetSwapChain, UINT, IDirect3DSwapChain9 **)*/
+DEVICE_WRAP0(UINT, GetNumberOfSwapChains)
+DEVICE_H_WRAP1(HRESULT, Reset, D3DPRESENT_PARAMETERS *)
+DEVICE_H_WRAP4(HRESULT, Present, const RECT *, const RECT *, HWND, const RGNDATA *)
+DEVICE_WRAP4(HRESULT, GetBackBuffer, UINT, UINT, D3DBACKBUFFER_TYPE, IDirect3DSurface9 **)
+DEVICE_WRAP2(HRESULT, GetRasterStatus, UINT, D3DRASTER_STATUS *)
+DEVICE_WRAP1(HRESULT, SetDialogBoxMode, BOOL)
+DEVICE_H_WRAP3(void, SetGammaRamp, UINT, DWORD, const D3DGAMMARAMP *)
+DEVICE_WRAP2(void, GetGammaRamp, UINT, D3DGAMMARAMP *)
+DEVICE_WRAP8(HRESULT, CreateTexture, UINT, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DTexture9 **, HANDLE *)
+DEVICE_WRAP9(HRESULT, CreateVolumeTexture, UINT, UINT, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DVolumeTexture9 **, HANDLE *)
+DEVICE_WRAP7(HRESULT, CreateCubeTexture, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DCubeTexture9 **, HANDLE *)
+DEVICE_WRAP6(HRESULT, CreateVertexBuffer, UINT, DWORD, DWORD, D3DPOOL, IDirect3DVertexBuffer9 **, HANDLE *)
+DEVICE_WRAP6(HRESULT, CreateIndexBuffer, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DIndexBuffer9 **, HANDLE *)
+DEVICE_WRAP8(HRESULT, CreateRenderTarget, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, DWORD, BOOL, IDirect3DSurface9 **, HANDLE *)
+DEVICE_WRAP8(HRESULT, CreateDepthStencilSurface, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, DWORD, BOOL, IDirect3DSurface9 **, HANDLE *)
+DEVICE_WRAP4(HRESULT, UpdateSurface, IDirect3DSurface9 *, const RECT *, IDirect3DSurface9 *, const POINT *)
+DEVICE_WRAP2(HRESULT, UpdateTexture, IDirect3DBaseTexture9 *, IDirect3DBaseTexture9 *)
+DEVICE_WRAP2(HRESULT, GetRenderTargetData, IDirect3DSurface9 *, IDirect3DSurface9 *)
+DEVICE_WRAP2(HRESULT, GetFrontBufferData, UINT, IDirect3DSurface9 *)
+DEVICE_WRAP5(HRESULT, StretchRect, IDirect3DSurface9 *, const RECT *, IDirect3DSurface9 *, const RECT *, D3DTEXTUREFILTERTYPE)
+DEVICE_WRAP3(HRESULT, ColorFill, IDirect3DSurface9 *, const RECT *, D3DCOLOR)
+DEVICE_WRAP6(HRESULT, CreateOffscreenPlainSurface, UINT, UINT, D3DFORMAT, D3DPOOL, IDirect3DSurface9 **, HANDLE *)
+DEVICE_WRAP2(HRESULT, SetRenderTarget, DWORD, IDirect3DSurface9 *)
+DEVICE_WRAP2(HRESULT, GetRenderTarget, DWORD, IDirect3DSurface9 **)
+DEVICE_WRAP1(HRESULT, SetDepthStencilSurface, IDirect3DSurface9 *)
+DEVICE_WRAP1(HRESULT, GetDepthStencilSurface, IDirect3DSurface9 **)
+DEVICE_WRAP0(HRESULT, BeginScene)
+DEVICE_H_WRAP0(HRESULT, EndScene)
+DEVICE_WRAP6(HRESULT, Clear, DWORD, const D3DRECT *, DWORD, D3DCOLOR, float, DWORD)
+DEVICE_WRAP2(HRESULT, SetTransform, D3DTRANSFORMSTATETYPE, const D3DMATRIX *)
+DEVICE_WRAP2(HRESULT, GetTransform, D3DTRANSFORMSTATETYPE, D3DMATRIX *)
+DEVICE_WRAP2(HRESULT, MultiplyTransform, D3DTRANSFORMSTATETYPE, const D3DMATRIX *)
+DEVICE_WRAP1(HRESULT, SetViewport, const D3DVIEWPORT9 *)
+DEVICE_WRAP1(HRESULT, GetViewport, D3DVIEWPORT9 *)
+DEVICE_WRAP1(HRESULT, SetMaterial, const D3DMATERIAL9 *)
+DEVICE_WRAP1(HRESULT, GetMaterial, D3DMATERIAL9 *)
+DEVICE_WRAP2(HRESULT, SetLight, DWORD, const D3DLIGHT9 *)
+DEVICE_WRAP2(HRESULT, GetLight, DWORD, D3DLIGHT9 *)
+DEVICE_WRAP2(HRESULT, LightEnable, DWORD, BOOL)
+DEVICE_WRAP2(HRESULT, GetLightEnable, DWORD, BOOL *)
+DEVICE_WRAP2(HRESULT, SetClipPlane, DWORD, const float *)
+DEVICE_WRAP2(HRESULT, GetClipPlane, DWORD, float *)
+DEVICE_H_WRAP2(HRESULT, SetRenderState, D3DRENDERSTATETYPE, DWORD)
+DEVICE_WRAP2(HRESULT, GetRenderState, D3DRENDERSTATETYPE, DWORD *)
+DEVICE_WRAP2(HRESULT, CreateStateBlock, D3DSTATEBLOCKTYPE, IDirect3DStateBlock9 **)
+DEVICE_WRAP0(HRESULT, BeginStateBlock)
+DEVICE_WRAP1(HRESULT, EndStateBlock, IDirect3DStateBlock9 **)
+DEVICE_WRAP1(HRESULT, SetClipStatus, const D3DCLIPSTATUS9 *)
+DEVICE_WRAP1(HRESULT, GetClipStatus, D3DCLIPSTATUS9 *)
+DEVICE_WRAP2(HRESULT, GetTexture, DWORD, IDirect3DBaseTexture9 **)
+DEVICE_WRAP2(HRESULT, SetTexture, DWORD, IDirect3DBaseTexture9 *)
+DEVICE_WRAP3(HRESULT, GetTextureStageState, DWORD, D3DTEXTURESTAGESTATETYPE, DWORD *)
+DEVICE_WRAP3(HRESULT, SetTextureStageState, DWORD, D3DTEXTURESTAGESTATETYPE, DWORD)
+DEVICE_WRAP3(HRESULT, GetSamplerState, DWORD, D3DSAMPLERSTATETYPE, DWORD *)
+DEVICE_H_WRAP3(HRESULT, SetSamplerState, DWORD, D3DSAMPLERSTATETYPE, DWORD)
+DEVICE_WRAP1(HRESULT, ValidateDevice, DWORD *)
+DEVICE_WRAP2(HRESULT, SetPaletteEntries, UINT, const PALETTEENTRY *)
+DEVICE_WRAP2(HRESULT, GetPaletteEntries, UINT, PALETTEENTRY *)
+DEVICE_WRAP1(HRESULT, SetCurrentTexturePalette, UINT)
+DEVICE_WRAP1(HRESULT, GetCurrentTexturePalette, UINT *)
+DEVICE_WRAP1(HRESULT, SetScissorRect, const RECT *)
+DEVICE_WRAP1(HRESULT, GetScissorRect, RECT *)
+DEVICE_WRAP1(HRESULT, SetSoftwareVertexProcessing, BOOL)
+DEVICE_WRAP0(BOOL, GetSoftwareVertexProcessing)
+DEVICE_WRAP1(HRESULT, SetNPatchMode, float)
+DEVICE_WRAP0(float, GetNPatchMode)
+DEVICE_WRAP3(HRESULT, DrawPrimitive, D3DPRIMITIVETYPE, UINT, UINT)
+DEVICE_WRAP6(HRESULT, DrawIndexedPrimitive, D3DPRIMITIVETYPE, INT, UINT, UINT, UINT, UINT)
+DEVICE_WRAP4(HRESULT, DrawPrimitiveUP, D3DPRIMITIVETYPE, UINT, const void *, UINT)
+DEVICE_WRAP8(HRESULT, DrawIndexedPrimitiveUP, D3DPRIMITIVETYPE, UINT, UINT, UINT, const void *, D3DFORMAT, const void *, UINT)
+DEVICE_WRAP6(HRESULT, ProcessVertices, UINT, UINT, UINT, IDirect3DVertexBuffer9 *, IDirect3DVertexDeclaration9 *, DWORD)
+DEVICE_WRAP2(HRESULT, CreateVertexDeclaration, const D3DVERTEXELEMENT9 *, IDirect3DVertexDeclaration9 **)
+DEVICE_WRAP1(HRESULT, SetVertexDeclaration, IDirect3DVertexDeclaration9 *)
+DEVICE_WRAP1(HRESULT, GetVertexDeclaration, IDirect3DVertexDeclaration9 **)
+DEVICE_WRAP1(HRESULT, SetFVF, DWORD)
+DEVICE_WRAP1(HRESULT, GetFVF, DWORD *)
+DEVICE_WRAP2(HRESULT, CreateVertexShader, const DWORD *, IDirect3DVertexShader9 **)
+DEVICE_WRAP1(HRESULT, SetVertexShader, IDirect3DVertexShader9 *)
+DEVICE_WRAP1(HRESULT, GetVertexShader, IDirect3DVertexShader9 **)
+DEVICE_WRAP3(HRESULT, SetVertexShaderConstantF, UINT, const float *, UINT)
+DEVICE_WRAP3(HRESULT, GetVertexShaderConstantF, UINT, float *, UINT)
+DEVICE_WRAP3(HRESULT, SetVertexShaderConstantI, UINT, const int *, UINT)
+DEVICE_WRAP3(HRESULT, GetVertexShaderConstantI, UINT, int *, UINT)
+DEVICE_WRAP3(HRESULT, SetVertexShaderConstantB, UINT, const BOOL *, UINT)
+DEVICE_WRAP3(HRESULT, GetVertexShaderConstantB, UINT, BOOL *, UINT)
+DEVICE_WRAP4(HRESULT, SetStreamSource, UINT, IDirect3DVertexBuffer9 *, UINT, UINT)
+DEVICE_WRAP4(HRESULT, GetStreamSource, UINT, IDirect3DVertexBuffer9 **, UINT *, UINT *)
+DEVICE_WRAP2(HRESULT, SetStreamSourceFreq, UINT, UINT)
+DEVICE_WRAP2(HRESULT, GetStreamSourceFreq, UINT, UINT *)
+DEVICE_WRAP1(HRESULT, SetIndices, IDirect3DIndexBuffer9 *)
+DEVICE_WRAP1(HRESULT, GetIndices, IDirect3DIndexBuffer9 **)
+DEVICE_WRAP2(HRESULT, CreatePixelShader, const DWORD *, IDirect3DPixelShader9 **)
+DEVICE_WRAP1(HRESULT, SetPixelShader, IDirect3DPixelShader9 *)
+DEVICE_WRAP1(HRESULT, GetPixelShader, IDirect3DPixelShader9 **)
+DEVICE_WRAP3(HRESULT, SetPixelShaderConstantF, UINT, const float *, UINT)
+DEVICE_WRAP3(HRESULT, GetPixelShaderConstantF, UINT, float *, UINT)
+DEVICE_WRAP3(HRESULT, SetPixelShaderConstantI, UINT, const int *, UINT)
+DEVICE_WRAP3(HRESULT, GetPixelShaderConstantI, UINT, int *, UINT)
+DEVICE_WRAP3(HRESULT, SetPixelShaderConstantB, UINT, const BOOL *, UINT)
+DEVICE_WRAP3(HRESULT, GetPixelShaderConstantB, UINT, BOOL *, UINT)
+DEVICE_WRAP3(HRESULT, DrawRectPatch, UINT, const float *, const D3DRECTPATCH_INFO *)
+DEVICE_WRAP3(HRESULT, DrawTriPatch, UINT, const float *, const D3DTRIPATCH_INFO *)
+DEVICE_WRAP1(HRESULT, DeletePatch, UINT)
+DEVICE_WRAP2(HRESULT, CreateQuery, D3DQUERYTYPE, IDirect3DQuery9 **)
+DEVICE_WRAP4(HRESULT, SetConvolutionMonoKernel, UINT, UINT, float *, float *)
+DEVICE_WRAP8(HRESULT, ComposeRects, IDirect3DSurface9 *, IDirect3DSurface9 *, IDirect3DVertexBuffer9 *, UINT, IDirect3DVertexBuffer9 *, D3DCOMPOSERECTSOP, int, int)
+DEVICE_H_WRAP5(HRESULT, PresentEx, const RECT *, const RECT *, HWND, const RGNDATA *, DWORD)
+DEVICE_WRAP1(HRESULT, GetGPUThreadPriority, INT *)
+DEVICE_WRAP1(HRESULT, SetGPUThreadPriority, INT)
+DEVICE_WRAP1(HRESULT, WaitForVBlank, UINT)
+DEVICE_WRAP2(HRESULT, CheckResourceResidency, IDirect3DResource9 **, UINT32)
+DEVICE_WRAP1(HRESULT, SetMaximumFrameLatency, UINT)
+DEVICE_WRAP1(HRESULT, GetMaximumFrameLatency, UINT *)
+DEVICE_WRAP1(HRESULT, CheckDeviceState, HWND)
+DEVICE_WRAP9(HRESULT, CreateRenderTargetEx, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, DWORD, BOOL, IDirect3DSurface9 **, HANDLE *, DWORD)
+DEVICE_WRAP7(HRESULT, CreateOffscreenPlainSurfaceEx, UINT, UINT, D3DFORMAT, D3DPOOL, IDirect3DSurface9 **, HANDLE *, DWORD)
+DEVICE_WRAP9(HRESULT, CreateDepthStencilSurfaceEx, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, DWORD, BOOL, IDirect3DSurface9 **, HANDLE *, DWORD)
+DEVICE_H_WRAP2(HRESULT, ResetEx, D3DPRESENT_PARAMETERS *, D3DDISPLAYMODEEX *)
+DEVICE_WRAP3(HRESULT, GetDisplayModeEx, UINT, D3DDISPLAYMODEEX *, D3DDISPLAYROTATION *)
+
+IDirect3DSwapChain9ExVtbl WineNineSwapChain9Ex_vtable = {
+    WineNineSwapChain9_QueryInterface,
+    WineNineSwapChain9_AddRef,
+    WineNineSwapChain9_Release,
+    WineNineSwapChain9_Present,
+    WineNineSwapChain9_GetFrontBufferData,
+    WineNineSwapChain9_GetBackBuffer,
+    WineNineSwapChain9_GetRasterStatus,
+    WineNineSwapChain9_GetDisplayMode,
+    WineNineSwapChain9_GetDevice,
+    WineNineSwapChain9_GetPresentParameters,
+    WineNineSwapChain9_GetLastPresentCount,
+    WineNineSwapChain9_GetPresentStats,
+    WineNineSwapChain9_GetDisplayModeEx
+};
+
+HRESULT WINAPI DECLSPEC_HOTPATCH WineNineDevice9_CreateAdditionalSwapChain(IDirect3DDevice9Ex *This, D3DPRESENT_PARAMETERS *pPresentationParameters, IDirect3DSwapChain9 **pSwapChain)
+{
+    HRESULT hr;
+
+    hr = ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->CreateAdditionalSwapChain(This, pPresentationParameters, pSwapChain);
+    if (FAILED(hr))
+        return hr;
+
+    (*pSwapChain)->lpVtbl = (IDirect3DSwapChain9Vtbl *)&WineNineSwapChain9Ex_vtable;
+
+    return hr;
+}
+
+HRESULT WINAPI DECLSPEC_HOTPATCH WineNineDevice9_GetSwapChain(IDirect3DDevice9Ex *This, UINT iSwapChain, IDirect3DSwapChain9 **pSwapChain)
+{
+    HRESULT hr;
+
+    hr = ((IDirect3DDevice9Ex_Minor1 *)This)->lpVtbl_internal->GetSwapChain(This, iSwapChain, pSwapChain);
+    if (FAILED(hr))
+        return hr;
+
+    (*pSwapChain)->lpVtbl = (IDirect3DSwapChain9Vtbl *)&WineNineSwapChain9Ex_vtable;
+
+    return hr;
+}
+
+
+IDirect3DDevice9ExVtbl WineNineDevice9_vtable = {
+    WineNineDevice9_QueryInterface,
+    WineNineDevice9_AddRef,
+    WineNineDevice9_Release,
+    WineNineDevice9_TestCooperativeLevel,
+    WineNineDevice9_GetAvailableTextureMem,
+    WineNineDevice9_EvictManagedResources,
+    WineNineDevice9_GetDirect3D,
+    WineNineDevice9_GetDeviceCaps,
+    WineNineDevice9_GetDisplayMode,
+    WineNineDevice9_GetCreationParameters,
+    WineNineDevice9_SetCursorProperties,
+    WineNineDevice9_SetCursorPosition,
+    WineNineDevice9_ShowCursor,
+    WineNineDevice9_CreateAdditionalSwapChain,
+    WineNineDevice9_GetSwapChain,
+    WineNineDevice9_GetNumberOfSwapChains,
+    WineNineDevice9_Reset,
+    WineNineDevice9_Present,
+    WineNineDevice9_GetBackBuffer,
+    WineNineDevice9_GetRasterStatus,
+    WineNineDevice9_SetDialogBoxMode,
+    WineNineDevice9_SetGammaRamp,
+    WineNineDevice9_GetGammaRamp,
+    WineNineDevice9_CreateTexture,
+    WineNineDevice9_CreateVolumeTexture,
+    WineNineDevice9_CreateCubeTexture,
+    WineNineDevice9_CreateVertexBuffer,
+    WineNineDevice9_CreateIndexBuffer,
+    WineNineDevice9_CreateRenderTarget,
+    WineNineDevice9_CreateDepthStencilSurface,
+    WineNineDevice9_UpdateSurface,
+    WineNineDevice9_UpdateTexture,
+    WineNineDevice9_GetRenderTargetData,
+    WineNineDevice9_GetFrontBufferData,
+    WineNineDevice9_StretchRect,
+    WineNineDevice9_ColorFill,
+    WineNineDevice9_CreateOffscreenPlainSurface,
+    WineNineDevice9_SetRenderTarget,
+    WineNineDevice9_GetRenderTarget,
+    WineNineDevice9_SetDepthStencilSurface,
+    WineNineDevice9_GetDepthStencilSurface,
+    WineNineDevice9_BeginScene,
+    WineNineDevice9_EndScene,
+    WineNineDevice9_Clear,
+    WineNineDevice9_SetTransform,
+    WineNineDevice9_GetTransform,
+    WineNineDevice9_MultiplyTransform,
+    WineNineDevice9_SetViewport,
+    WineNineDevice9_GetViewport,
+    WineNineDevice9_SetMaterial,
+    WineNineDevice9_GetMaterial,
+    WineNineDevice9_SetLight,
+    WineNineDevice9_GetLight,
+    WineNineDevice9_LightEnable,
+    WineNineDevice9_GetLightEnable,
+    WineNineDevice9_SetClipPlane,
+    WineNineDevice9_GetClipPlane,
+    WineNineDevice9_SetRenderState,
+    WineNineDevice9_GetRenderState,
+    WineNineDevice9_CreateStateBlock,
+    WineNineDevice9_BeginStateBlock,
+    WineNineDevice9_EndStateBlock,
+    WineNineDevice9_SetClipStatus,
+    WineNineDevice9_GetClipStatus,
+    WineNineDevice9_GetTexture,
+    WineNineDevice9_SetTexture,
+    WineNineDevice9_GetTextureStageState,
+    WineNineDevice9_SetTextureStageState,
+    WineNineDevice9_GetSamplerState,
+    WineNineDevice9_SetSamplerState,
+    WineNineDevice9_ValidateDevice,
+    WineNineDevice9_SetPaletteEntries,
+    WineNineDevice9_GetPaletteEntries,
+    WineNineDevice9_SetCurrentTexturePalette,
+    WineNineDevice9_GetCurrentTexturePalette,
+    WineNineDevice9_SetScissorRect,
+    WineNineDevice9_GetScissorRect,
+    WineNineDevice9_SetSoftwareVertexProcessing,
+    WineNineDevice9_GetSoftwareVertexProcessing,
+    WineNineDevice9_SetNPatchMode,
+    WineNineDevice9_GetNPatchMode,
+    WineNineDevice9_DrawPrimitive,
+    WineNineDevice9_DrawIndexedPrimitive,
+    WineNineDevice9_DrawPrimitiveUP,
+    WineNineDevice9_DrawIndexedPrimitiveUP,
+    WineNineDevice9_ProcessVertices,
+    WineNineDevice9_CreateVertexDeclaration,
+    WineNineDevice9_SetVertexDeclaration,
+    WineNineDevice9_GetVertexDeclaration,
+    WineNineDevice9_SetFVF,
+    WineNineDevice9_GetFVF,
+    WineNineDevice9_CreateVertexShader,
+    WineNineDevice9_SetVertexShader,
+    WineNineDevice9_GetVertexShader,
+    WineNineDevice9_SetVertexShaderConstantF,
+    WineNineDevice9_GetVertexShaderConstantF,
+    WineNineDevice9_SetVertexShaderConstantI,
+    WineNineDevice9_GetVertexShaderConstantI,
+    WineNineDevice9_SetVertexShaderConstantB,
+    WineNineDevice9_GetVertexShaderConstantB,
+    WineNineDevice9_SetStreamSource,
+    WineNineDevice9_GetStreamSource,
+    WineNineDevice9_SetStreamSourceFreq,
+    WineNineDevice9_GetStreamSourceFreq,
+    WineNineDevice9_SetIndices,
+    WineNineDevice9_GetIndices,
+    WineNineDevice9_CreatePixelShader,
+    WineNineDevice9_SetPixelShader,
+    WineNineDevice9_GetPixelShader,
+    WineNineDevice9_SetPixelShaderConstantF,
+    WineNineDevice9_GetPixelShaderConstantF,
+    WineNineDevice9_SetPixelShaderConstantI,
+    WineNineDevice9_GetPixelShaderConstantI,
+    WineNineDevice9_SetPixelShaderConstantB,
+    WineNineDevice9_GetPixelShaderConstantB,
+    WineNineDevice9_DrawRectPatch,
+    WineNineDevice9_DrawTriPatch,
+    WineNineDevice9_DeletePatch,
+    WineNineDevice9_CreateQuery,
+    WineNineDevice9_SetConvolutionMonoKernel,
+    WineNineDevice9_ComposeRects,
+    WineNineDevice9_PresentEx,
+    WineNineDevice9_GetGPUThreadPriority,
+    WineNineDevice9_SetGPUThreadPriority,
+    WineNineDevice9_WaitForVBlank,
+    WineNineDevice9_CheckResourceResidency,
+    WineNineDevice9_SetMaximumFrameLatency,
+    WineNineDevice9_GetMaximumFrameLatency,
+    WineNineDevice9_CheckDeviceState,
+    WineNineDevice9_CreateRenderTargetEx,
+    WineNineDevice9_CreateOffscreenPlainSurfaceEx,
+    WineNineDevice9_CreateDepthStencilSurfaceEx,
+    WineNineDevice9_ResetEx,
+    WineNineDevice9_GetDisplayModeEx
+};
+
+IDirect3DDevice9ExVtbl *get_device_vtable()
+{
+    return &WineNineDevice9_vtable;
+}
diff --git a/dlls/d3d9-nine/device_wrap.h b/dlls/d3d9-nine/device_wrap.h
new file mode 100644
index 0000000..8f5e720
--- /dev/null
+++ b/dlls/d3d9-nine/device_wrap.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2016 Axel Davy
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __NINE_DEVICE_WRAP_H
+#define __NINE_DEVICE_WRAP_H
+
+#include <d3dadapter/d3dadapter9.h>
+
+IDirect3DDevice9ExVtbl *get_device_vtable(void);
+
+#endif /* __NINE_DEVICE_WRAP_H */
diff --git a/dlls/d3d9-nine/dri3.c b/dlls/d3d9-nine/dri3.c
new file mode 100644
index 0000000..d89573b
--- /dev/null
+++ b/dlls/d3d9-nine/dri3.c
@@ -0,0 +1,1358 @@
+/*
+ * Wine DRI3 interface
+ *
+ * Copyright 2014-2015 Axel Davy
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+
+#include "config.h"
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+#include <d3dadapter/d3dadapter9.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <pthread.h>
+
+#include "dri3.h"
+
+#include <X11/Xlib-xcb.h>
+#include <xcb/dri3.h>
+#include <xcb/present.h>
+
+#include "winbase.h" /* for Sleep */
+
+#ifdef D3DADAPTER9_DRI2
+#include <sys/ioctl.h>
+
+#define BOOL X_BOOL
+#define BYTE X_BYTE
+#define INT8 X_INT8
+#define INT16 X_INT16
+#define INT32 X_INT32
+#define INT64 X_INT64
+#include <X11/Xmd.h>
+#undef BOOL
+#undef BYTE
+#undef INT8
+#undef INT16
+#undef INT32
+#undef INT64
+#undef LONG64
+
+#include <X11/Xlibint.h>
+#include <X11/extensions/dri2tokens.h>
+#include <X11/extensions/dri2proto.h>
+#include <X11/extensions/extutil.h>
+#define GL_GLEXT_PROTOTYPES 1
+#define EGL_EGLEXT_PROTOTYPES 1
+#define GL_GLEXT_LEGACY 1
+#include <GL/gl.h>
+/* workaround gl header bug */
+#define glBlendColor glBlendColorLEV
+#define glBlendEquation glBlendEquationLEV
+#include <GL/glext.h>
+#include <EGL/egl.h>
+#include <EGL/eglext.h>
+#include <libdrm/drm_fourcc.h>
+#include <libdrm/drm.h>
+/*GLAPI void GLAPIENTRY glFlush( void );
+
+GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
+GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer);
+GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
+GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures);
+EGLAPI EGLBoolean EGLAPIENTRY eglDestroyImageKHR (EGLDisplay dpy, EGLImageKHR image);*/
+
+typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);
+typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEIMAGEKHRPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);
+typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYEXTPROC) (EGLenum platform, void *native_display, const EGLint *attrib_list);
+
+#endif
+
+BOOL
+DRI3CheckExtension(Display *dpy, int major, int minor)
+{
+    xcb_connection_t *xcb_connection = XGetXCBConnection(dpy);
+    xcb_dri3_query_version_cookie_t dri3_cookie;
+    xcb_dri3_query_version_reply_t *dri3_reply;
+    xcb_generic_error_t *error;
+    const xcb_query_extension_reply_t *extension;
+    int fd;
+
+    xcb_prefetch_extension_data(xcb_connection, &xcb_dri3_id);
+
+    extension = xcb_get_extension_data(xcb_connection, &xcb_dri3_id);
+    if (!(extension && extension->present)) {
+        ERR("DRI3 extension is not present\n");
+        return FALSE;
+    }
+
+    dri3_cookie = xcb_dri3_query_version(xcb_connection, major, minor);
+
+    dri3_reply = xcb_dri3_query_version_reply(xcb_connection, dri3_cookie, &error);
+    if (!dri3_reply) {
+        free(error);
+        ERR("Issue getting requested version of DRI3: %d,%d\n", major, minor);
+        return FALSE;
+    }
+
+    if (!DRI3Open(dpy, DefaultScreen(dpy), &fd)) {
+        ERR("DRI3 advertised, but not working\n");
+        return FALSE;
+    }
+    close(fd);
+
+    TRACE("DRI3 version %d,%d found. %d %d requested\n", major, minor, (int)dri3_reply->major_version, (int)dri3_reply->minor_version);
+    free(dri3_reply);
+
+    return TRUE;
+}
+
+#ifdef D3DADAPTER9_DRI2
+
+static EGLDisplay display = NULL;
+static int display_ref = 0;
+
+struct DRI2priv {
+    Display *dpy;
+    EGLDisplay display;
+    EGLContext context;
+    PFNGLEGLIMAGETARGETTEXTURE2DOESPROC glEGLImageTargetTexture2DOES_func;
+    PFNEGLCREATEIMAGEKHRPROC eglCreateImageKHR_func;
+    PFNEGLDESTROYIMAGEKHRPROC eglDestroyImageKHR_func;
+};
+
+/* TODO: We don't free memory properly. When exiting, eglTerminate doesn't work well(crash), and things are freed automatically. Rely on it */
+
+BOOL
+DRI2FallbackInit(Display *dpy, struct DRI2priv **priv)
+{
+    PFNGLEGLIMAGETARGETTEXTURE2DOESPROC glEGLImageTargetTexture2DOES_func;
+    PFNEGLCREATEIMAGEKHRPROC eglCreateImageKHR_func;
+    PFNEGLGETPLATFORMDISPLAYEXTPROC eglGetPlatformDisplayEXT_func;
+    PFNEGLDESTROYIMAGEKHRPROC eglDestroyImageKHR_func;
+    EGLint major, minor;
+    EGLConfig config;
+    EGLContext context;
+    EGLint i;
+    EGLBoolean b;
+    EGLenum current_api = 0;
+    const char *extensions;
+    EGLint config_attribs[] = {
+        EGL_RENDERABLE_TYPE, EGL_OPENGL_BIT,
+        EGL_NONE
+    };
+    EGLint context_compatibility_attribs[] = {
+        EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR, EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR,
+        EGL_NONE
+    };
+
+    current_api = eglQueryAPI();
+    eglGetPlatformDisplayEXT_func = (PFNEGLGETPLATFORMDISPLAYEXTPROC) eglGetProcAddress("eglGetPlatformDisplayEXT");
+    if (!eglGetPlatformDisplayEXT_func)
+        return FALSE;
+    if (!display)
+        display = eglGetPlatformDisplayEXT_func(EGL_PLATFORM_X11_EXT, dpy, NULL);
+    if (!display)
+        return FALSE;
+    /* count references on display for multi device setups */
+    display_ref++;
+
+    if (eglInitialize(display, &major, &minor) != EGL_TRUE)
+        goto clean_egl_display;
+
+    extensions = eglQueryString(display, EGL_CLIENT_APIS);
+    if (!extensions || !strstr(extensions, "OpenGL"))
+        goto clean_egl_display;
+
+    extensions = eglQueryString(display, EGL_EXTENSIONS);
+    if (!extensions || !strstr(extensions, "EGL_EXT_image_dma_buf_import") ||
+        !strstr(extensions, "EGL_KHR_create_context") ||
+        !strstr(extensions, "EGL_KHR_surfaceless_context") ||
+        !strstr(extensions, "EGL_KHR_image_base"))
+        goto clean_egl_display;
+
+    if (!eglChooseConfig(display, config_attribs, &config, 1, &i))
+        goto clean_egl_display;
+
+    b = eglBindAPI(EGL_OPENGL_API);
+    if (b == EGL_FALSE)
+        goto clean_egl_display;
+    context = eglCreateContext(display, config, EGL_NO_CONTEXT, context_compatibility_attribs);
+    if (context == EGL_NO_CONTEXT)
+        goto clean_egl_display;
+
+    glEGLImageTargetTexture2DOES_func = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) eglGetProcAddress("glEGLImageTargetTexture2DOES");
+    eglCreateImageKHR_func = (PFNEGLCREATEIMAGEKHRPROC) eglGetProcAddress("eglCreateImageKHR");
+    eglDestroyImageKHR_func = (PFNEGLDESTROYIMAGEKHRPROC) eglGetProcAddress("eglDestroyImageKHR");
+    if (!eglCreateImageKHR_func || !glEGLImageTargetTexture2DOES_func || !eglDestroyImageKHR_func) {
+        ERR("eglGetProcAddress failed !");
+        goto clean_egl_display;
+    }
+
+    eglMakeCurrent(display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+
+    *priv = calloc(1, sizeof(struct DRI2priv));
+    if (!*priv)
+        goto clean_egl;
+    (*priv)->dpy = dpy;
+    (*priv)->display = display;
+    (*priv)->context = context;
+    (*priv)->glEGLImageTargetTexture2DOES_func = glEGLImageTargetTexture2DOES_func;
+    (*priv)->eglCreateImageKHR_func = eglCreateImageKHR_func;
+    (*priv)->eglDestroyImageKHR_func = eglDestroyImageKHR_func;
+    eglBindAPI(current_api);
+    return TRUE;
+
+clean_egl:
+clean_egl_display:
+    eglTerminate(display);
+    eglBindAPI(current_api);
+    return FALSE;
+}
+
+/* hypothesis: at this step all textures, etc are destroyed */
+void
+DRI2FallbackDestroy(struct DRI2priv *priv)
+{
+    EGLenum current_api;
+    current_api = eglQueryAPI();
+    eglBindAPI(EGL_OPENGL_API);
+    eglMakeCurrent(priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+    eglDestroyContext(priv->display, priv->context);
+    if (display) {
+        /* destroy display connection with last device */
+        display_ref--;
+        if (!display_ref) {
+            eglTerminate(display);
+            display = NULL;
+        }
+    }
+    eglBindAPI(current_api);
+    free(priv);
+}
+
+BOOL
+DRI2FallbackCheckSupport(Display *dpy)
+{
+    struct DRI2priv *priv;
+    int fd;
+    if (!DRI2FallbackInit(dpy, &priv))
+        return FALSE;
+    DRI2FallbackDestroy(priv);
+    if (!DRI2FallbackOpen(dpy, DefaultScreen(dpy), &fd))
+        return FALSE;
+    close(fd);
+    return TRUE;
+}
+
+#endif
+
+BOOL
+PRESENTCheckExtension(Display *dpy, int major, int minor)
+{
+    xcb_connection_t *xcb_connection = XGetXCBConnection(dpy);
+    xcb_present_query_version_cookie_t present_cookie;
+    xcb_present_query_version_reply_t *present_reply;
+    xcb_generic_error_t *error;
+    const xcb_query_extension_reply_t *extension;
+
+    xcb_prefetch_extension_data(xcb_connection, &xcb_present_id);
+
+    extension = xcb_get_extension_data(xcb_connection, &xcb_present_id);
+    if (!(extension && extension->present)) {
+        ERR("PRESENT extension is not present\n");
+        return FALSE;
+    }
+
+    present_cookie = xcb_present_query_version(xcb_connection, major, minor);
+
+    present_reply = xcb_present_query_version_reply(xcb_connection, present_cookie, &error);
+    if (!present_reply) {
+        free(error);
+        ERR("Issue getting requested version of PRESENT: %d,%d\n", major, minor);
+        return FALSE;
+    }
+
+    TRACE("PRESENT version %d,%d found. %d %d requested\n", major, minor, (int)present_reply->major_version, (int)present_reply->minor_version);
+    free(present_reply);
+
+    return TRUE;
+}
+
+BOOL
+DRI3Open(Display *dpy, int screen, int *device_fd)
+{
+    xcb_dri3_open_cookie_t cookie;
+    xcb_dri3_open_reply_t *reply;
+    xcb_connection_t *xcb_connection = XGetXCBConnection(dpy);
+    int fd;
+    Window root = RootWindow(dpy, screen);
+
+    cookie = xcb_dri3_open(xcb_connection, root, 0);
+
+    reply = xcb_dri3_open_reply(xcb_connection, cookie, NULL);
+    if (!reply)
+        return FALSE;
+
+    if (reply->nfd != 1) {
+        free(reply);
+        return FALSE;
+    }
+
+    fd = xcb_dri3_open_reply_fds(xcb_connection, reply)[0];
+    fcntl(fd, F_SETFD, FD_CLOEXEC);
+
+    *device_fd = fd;
+    free(reply);
+
+    return TRUE;
+}
+
+#ifdef D3DADAPTER9_DRI2
+
+static XExtensionInfo _dri2_info_data;
+static XExtensionInfo *dri2_info = &_dri2_info_data;
+static char dri2_name[] = DRI2_NAME;
+
+#define DRI2CheckExtension(dpy, i, val) \
+  XextCheckExtension(dpy, i, dri2_name, val)
+
+
+static int
+close_display(Display *dpy,
+              XExtCodes *codes);
+static Bool
+wire_to_event(Display *dpy,
+              XEvent *re,
+              xEvent *event);
+static Status
+event_to_wire(Display *dpy,
+              XEvent *re,
+              xEvent *event);
+static int
+error( Display *dpy,
+       xError *err,
+       XExtCodes *codes,
+       int *ret_code );
+static XExtensionHooks dri2_hooks = {
+    NULL, /* create_gc */
+    NULL, /* copy_gc */
+    NULL, /* flush_gc */
+    NULL, /* free_gc */
+    NULL, /* create_font */
+    NULL, /* free_font */
+    close_display, /* close_display */
+    wire_to_event, /* wire_to_event */
+    event_to_wire, /* event_to_wire */
+    error, /* error */
+    NULL, /* error_string */
+};
+static XEXT_GENERATE_CLOSE_DISPLAY(close_display, dri2_info);
+static XEXT_GENERATE_FIND_DISPLAY(find_display, dri2_info,
+                                  dri2_name, &dri2_hooks, 0, NULL);
+static Bool
+wire_to_event(Display *dpy,
+              XEvent *re,
+              xEvent *event)
+{
+    XExtDisplayInfo *info = find_display(dpy);
+    DRI2CheckExtension(dpy, info, False);
+    TRACE("dri2 wire_to_event\n");
+    return False;
+}
+static Status
+event_to_wire(Display *dpy,
+              XEvent *re,
+              xEvent *event)
+{
+    XExtDisplayInfo *info = find_display(dpy);
+    DRI2CheckExtension(dpy, info, False);
+    TRACE("dri2 event_to_wire\n");
+    return False;
+}
+static int
+error(Display *dpy,
+      xError *err,
+      XExtCodes *codes,
+      int *ret_code)
+{
+    TRACE("dri2 error\n");
+    return False;
+}
+
+#define XALIGN(x) (((x) + 3) & (~3))
+
+static BOOL
+DRI2Connect(Display *dpy,
+            XID window,
+            unsigned driver_type,
+            char **device )
+{
+    XExtDisplayInfo *info = find_display(dpy);
+    xDRI2ConnectReply rep;
+    xDRI2ConnectReq *req;
+    int dev_len, driv_len;
+    char *driver;
+
+    DRI2CheckExtension(dpy, info, False);
+
+    LockDisplay(dpy);
+    GetReq(DRI2Connect, req);
+    req->reqType = info->codes->major_opcode;
+    req->dri2ReqType = X_DRI2Connect;
+    req->window = window;
+    req->driverType = driver_type;
+    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
+        UnlockDisplay(dpy);
+        SyncHandle();
+        return False;
+    }
+
+    /* check string lengths */
+    dev_len = rep.deviceNameLength;
+    driv_len = rep.driverNameLength;
+    if (dev_len == 0 || driv_len == 0) {
+        _XEatData(dpy, XALIGN(dev_len) + XALIGN(driv_len));
+        UnlockDisplay(dpy);
+        SyncHandle();
+        return False;
+    }
+
+    /* read out driver */
+    driver = HeapAlloc(GetProcessHeap(), 0, driv_len + 1);
+    if (!driver) {
+        _XEatData(dpy, XALIGN(dev_len) + XALIGN(driv_len));
+        UnlockDisplay(dpy);
+        SyncHandle();
+        return False;
+    }
+    _XReadPad(dpy, driver, driv_len);
+    HeapFree(GetProcessHeap(), 0, driver); /* we don't need the driver */
+
+    /* read out device */
+    *device = HeapAlloc(GetProcessHeap(), 0, dev_len + 1);
+    if (!*device) {
+        _XEatData(dpy, XALIGN(dev_len));
+        UnlockDisplay(dpy);
+        SyncHandle();
+        return False;
+    }
+    _XReadPad(dpy, *device, dev_len);
+    (*device)[dev_len] = '\0';
+
+    UnlockDisplay(dpy);
+    SyncHandle();
+
+    return True;
+}
+
+static Bool
+DRI2Authenticate(Display *dpy,
+                 XID window,
+                 uint32_t token)
+{
+    XExtDisplayInfo *info = find_display(dpy);
+    xDRI2AuthenticateReply rep;
+    xDRI2AuthenticateReq *req;
+
+    DRI2CheckExtension(dpy, info, False);
+
+    LockDisplay(dpy);
+    GetReq(DRI2Authenticate, req);
+    req->reqType = info->codes->major_opcode;
+    req->dri2ReqType = X_DRI2Authenticate;
+    req->window = window;
+    req->magic = token;
+    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
+        UnlockDisplay(dpy);
+        SyncHandle();
+        return False;
+    }
+    UnlockDisplay(dpy);
+    SyncHandle();
+
+    return rep.authenticated ? True : False;
+}
+
+BOOL
+DRI2FallbackOpen(Display *dpy, int screen, int *device_fd)
+{
+    char *device;
+    int fd;
+    Window root = RootWindow(dpy, screen);
+    drm_auth_t auth;
+
+    if (!DRI2Connect(dpy, root, DRI2DriverDRI, &device))
+        return FALSE;
+
+    fd = open(device, O_RDWR);
+    HeapFree(GetProcessHeap(), 0, device);
+    if (fd < 0)
+        return FALSE;
+
+    if (ioctl(fd, DRM_IOCTL_GET_MAGIC, &auth) != 0) {
+        close(fd);
+        return FALSE;
+    }
+
+    if (!DRI2Authenticate(dpy, root, auth.magic)) {
+        close(fd);
+        return FALSE;
+    }
+
+    *device_fd = fd;
+
+    return TRUE;
+}
+
+#endif
+
+
+BOOL
+DRI3PixmapFromDmaBuf(Display *dpy, int screen, int fd, int width, int height, int stride, int depth, int bpp, Pixmap *pixmap)
+{
+    xcb_connection_t *xcb_connection = XGetXCBConnection(dpy);
+    Window root = RootWindow(dpy, screen);
+    xcb_void_cookie_t cookie;
+    xcb_generic_error_t *error;
+
+    cookie = xcb_dri3_pixmap_from_buffer_checked(xcb_connection,
+                                                (*pixmap = xcb_generate_id(xcb_connection)),
+                                                root,
+                                                0,
+                                                width, height, stride,
+                                                depth, bpp, fd);
+    error = xcb_request_check(xcb_connection, cookie); /* performs a flush */
+    if (error) {
+        ERR("Error using DRI3 to convert a DmaBufFd to pixmap\n");
+        return FALSE;
+    }
+    return TRUE;
+}
+
+BOOL
+DRI3DmaBufFromPixmap(Display *dpy, Pixmap pixmap, int *fd, int *width, int *height, int *stride, int *depth, int *bpp)
+{
+    xcb_connection_t *xcb_connection = XGetXCBConnection(dpy);
+    xcb_dri3_buffer_from_pixmap_cookie_t bp_cookie;
+    xcb_dri3_buffer_from_pixmap_reply_t  *bp_reply;
+
+    bp_cookie = xcb_dri3_buffer_from_pixmap(xcb_connection, pixmap);
+    bp_reply = xcb_dri3_buffer_from_pixmap_reply(xcb_connection, bp_cookie, NULL);
+    if (!bp_reply)
+        return FALSE;
+    *fd = xcb_dri3_buffer_from_pixmap_reply_fds(xcb_connection, bp_reply)[0];
+    *width = bp_reply->width;
+    *height = bp_reply->height;
+    *stride = bp_reply->stride;
+    *depth = bp_reply->depth;
+    *bpp = bp_reply->depth;
+    return TRUE;
+}
+
+struct PRESENTPriv {
+    xcb_connection_t *xcb_connection;
+    xcb_connection_t *xcb_connection_bis; /* to avoid libxcb thread bugs, use a different connection to present pixmaps */
+    XID window;
+    uint64_t last_msc;
+    uint64_t last_target;
+    uint32_t last_serial_given;
+    xcb_special_event_t *special_event;
+    PRESENTPixmapPriv *first_present_priv;
+    int pixmap_present_pending;
+    BOOL notify_with_serial_pending;
+    pthread_mutex_t mutex_present; /* protect readind/writing present_priv things */
+    pthread_mutex_t mutex_xcb_wait;
+    BOOL xcb_wait;
+};
+
+struct PRESENTPixmapPriv {
+    PRESENTpriv *present_priv;
+    Pixmap pixmap;
+    BOOL released;
+    unsigned int width;
+    unsigned int height;
+    unsigned int depth;
+    BOOL present_complete_pending;
+    uint32_t serial;
+#ifdef D3DADAPTER9_DRI2
+    struct {
+        BOOL is_dri2;
+        struct DRI2priv *dri2_priv;
+        GLuint fbo_read;
+        GLuint fbo_write;
+        GLuint texture_read;
+        GLuint texture_write;
+    } dri2_info;
+#endif
+    BOOL last_present_was_flip;
+    PRESENTPixmapPriv *next;
+};
+
+static PRESENTPixmapPriv *PRESENTFindPixmapPriv(PRESENTpriv *present_priv, uint32_t serial)
+{
+    PRESENTPixmapPriv *current = present_priv->first_present_priv;
+
+    while (current) {
+        if (current->serial == serial)
+            return current;
+        current = current->next;
+    }
+    return NULL;
+}
+
+static void PRESENThandle_events(PRESENTpriv *present_priv, xcb_present_generic_event_t *ge)
+{
+    PRESENTPixmapPriv *present_pixmap_priv = NULL;
+
+    switch (ge->evtype) {
+        case XCB_PRESENT_COMPLETE_NOTIFY: {
+            xcb_present_complete_notify_event_t *ce = (void *) ge;
+            if (ce->kind == XCB_PRESENT_COMPLETE_KIND_NOTIFY_MSC) {
+                if (ce->serial)
+                    present_priv->notify_with_serial_pending = FALSE;
+                free(ce);
+                return;
+            }
+            present_pixmap_priv = PRESENTFindPixmapPriv(present_priv, ce->serial);
+            if (!present_pixmap_priv || ce->kind != XCB_PRESENT_COMPLETE_KIND_PIXMAP) {
+                ERR("FATAL ERROR: PRESENT handling failed\n");
+                free(ce);
+                return;
+            }
+            present_pixmap_priv->present_complete_pending = FALSE;
+            switch (ce->mode) {
+                case XCB_PRESENT_COMPLETE_MODE_FLIP:
+                    present_pixmap_priv->last_present_was_flip = TRUE;
+                    break;
+                case XCB_PRESENT_COMPLETE_MODE_COPY:
+                    present_pixmap_priv->last_present_was_flip = FALSE;
+                    break;
+            }
+            present_priv->pixmap_present_pending--;
+            present_priv->last_msc = ce->msc;
+            break;
+        }
+        case XCB_PRESENT_EVENT_IDLE_NOTIFY: {
+            xcb_present_idle_notify_event_t *ie = (void *) ge;
+            present_pixmap_priv = PRESENTFindPixmapPriv(present_priv, ie->serial);
+            if (!present_pixmap_priv || present_pixmap_priv->pixmap != ie->pixmap) {
+                ERR("FATAL ERROR: PRESENT handling failed\n");
+                free(ie);
+                return;
+            }
+            present_pixmap_priv->released = TRUE;
+            break;
+        }
+    }
+    free(ge);
+}
+
+static void PRESENTflush_events(PRESENTpriv *present_priv, BOOL assert_no_other_thread_waiting)
+{
+    xcb_generic_event_t *ev;
+
+    if ((present_priv->xcb_wait && !assert_no_other_thread_waiting) || /* don't steal events to someone waiting */
+        !present_priv->special_event)
+        return;
+
+    while ((ev = xcb_poll_for_special_event(present_priv->xcb_connection, present_priv->special_event)) != NULL) {
+        PRESENThandle_events(present_priv, (void *) ev);
+    }
+}
+
+static BOOL PRESENTwait_events(PRESENTpriv *present_priv, BOOL allow_other_threads)
+{
+    xcb_generic_event_t *ev;
+
+    if (allow_other_threads) {
+        present_priv->xcb_wait = TRUE;
+        pthread_mutex_lock(&present_priv->mutex_xcb_wait);
+        pthread_mutex_unlock(&present_priv->mutex_present);
+    }
+    ev = xcb_wait_for_special_event(present_priv->xcb_connection, present_priv->special_event);
+    if (allow_other_threads) {
+        pthread_mutex_unlock(&present_priv->mutex_xcb_wait);
+        pthread_mutex_lock(&present_priv->mutex_present);
+        present_priv->xcb_wait = FALSE;
+    }
+    if (!ev) {
+        ERR("FATAL error: xcb had an error\n");
+        return FALSE;
+    }
+
+    PRESENThandle_events(present_priv, (void *) ev);
+    return TRUE;
+}
+
+static struct xcb_connection_t *
+create_xcb_connection(Display *dpy)
+{
+    int screen_num = DefaultScreen(dpy);
+    xcb_connection_t *ret;
+    xcb_xfixes_query_version_cookie_t cookie;
+    xcb_xfixes_query_version_reply_t *rep;
+
+    ret = xcb_connect(DisplayString(dpy), &screen_num);
+    cookie = xcb_xfixes_query_version_unchecked(ret, XCB_XFIXES_MAJOR_VERSION, XCB_XFIXES_MINOR_VERSION);
+    rep = xcb_xfixes_query_version_reply(ret, cookie, NULL);
+    if (rep)
+        free(rep);
+    return ret;
+}
+
+BOOL
+PRESENTInit(Display *dpy, PRESENTpriv **present_priv)
+{
+    *present_priv = (PRESENTpriv *) calloc(1, sizeof(PRESENTpriv));
+    if (!*present_priv) {
+        return FALSE;
+    }
+    (*present_priv)->xcb_connection = create_xcb_connection(dpy);
+    (*present_priv)->xcb_connection_bis = create_xcb_connection(dpy);
+    pthread_mutex_init(&(*present_priv)->mutex_present, NULL);
+    pthread_mutex_init(&(*present_priv)->mutex_xcb_wait, NULL);
+    return TRUE;
+}
+
+static void PRESENTForceReleases(PRESENTpriv *present_priv)
+{
+    PRESENTPixmapPriv *current = NULL;
+
+    if (!present_priv->window)
+        return;
+
+    /* There should be no other thread listening for events here.
+     * This can happen when hDestWindowOverride changes without reset.
+     * This case should never happen, but can happen in theory.*/
+    if (present_priv->xcb_wait) {
+        xcb_present_notify_msc(present_priv->xcb_connection, present_priv->window, 0, 0, 0, 0);
+        xcb_flush(present_priv->xcb_connection);
+        pthread_mutex_lock(&present_priv->mutex_xcb_wait);
+        pthread_mutex_unlock(&present_priv->mutex_xcb_wait);
+        /* the problem here is that we don't have access to the event the other thread got.
+         * It is either presented event, idle event or notify event.
+         */
+        while (present_priv->pixmap_present_pending >= 2)
+            PRESENTwait_events(present_priv, FALSE);
+        PRESENTflush_events(present_priv, TRUE);
+        /* Remaining events to come can be a pair of present/idle,
+         * or an idle, or nothing. To be sure we are after all pixmaps
+         * have been presented, add an event to the queue that can only
+         * be after the present event, then if we receive an event more,
+         * we are sure all pixmaps were presented */
+        present_priv->notify_with_serial_pending = TRUE;
+        xcb_present_notify_msc(present_priv->xcb_connection, present_priv->window, 1, present_priv->last_target + 5, 0, 0);
+        xcb_flush(present_priv->xcb_connection);
+        while (present_priv->notify_with_serial_pending)
+            PRESENTwait_events(present_priv, FALSE);
+        /* Now we are sure we are not expecting any new event */
+    } else {
+        while (present_priv->pixmap_present_pending) /* wait all sent pixmaps are presented */
+            PRESENTwait_events(present_priv, FALSE);
+        PRESENTflush_events(present_priv, TRUE); /* may be remaining idle event */
+        /* Since idle events are send with the complete events when it is not flips,
+         * we are not expecting any new event here */
+    }
+
+    current = present_priv->first_present_priv;
+    while (current) {
+        if (!current->released) {
+            if (!current->last_present_was_flip && !present_priv->xcb_wait) {
+                ERR("ERROR: a pixmap seems not released by PRESENT for no reason. Code bug.\n");
+            } else {
+                /* Present the same pixmap with a non-valid part to force the copy mode and the releases */
+                xcb_xfixes_region_t valid, update;
+                xcb_rectangle_t rect_update;
+                rect_update.x = 0;
+                rect_update.y = 0;
+                rect_update.width = 8;
+                rect_update.height = 1;
+                valid = xcb_generate_id(present_priv->xcb_connection);
+                update = xcb_generate_id(present_priv->xcb_connection);
+                xcb_xfixes_create_region(present_priv->xcb_connection, valid, 1, &rect_update);
+                xcb_xfixes_create_region(present_priv->xcb_connection, update, 1, &rect_update);
+                /* here we know the pixmap has been presented. Thus if it is on screen,
+                 * the following request can only make it released by the server if it is not */
+                xcb_present_pixmap(present_priv->xcb_connection, present_priv->window,
+                                   current->pixmap, 0, valid, update, 0, 0, None, None,
+                                   None, XCB_PRESENT_OPTION_COPY | XCB_PRESENT_OPTION_ASYNC, 0, 0, 0, 0, NULL);
+                xcb_flush(present_priv->xcb_connection);
+                PRESENTwait_events(present_priv, FALSE); /* by assumption this can only be idle event */
+                PRESENTflush_events(present_priv, TRUE); /* Shoudln't be needed */
+            }
+        }
+        current = current->next;
+    }
+    /* Now all pixmaps are released (possibility if xcb_wait is true that one is not aware yet),
+     * and we don't expect any new Present event to come from Xserver */
+}
+
+static void PRESENTFreeXcbQueue(PRESENTpriv *present_priv)
+{
+    if (present_priv->window) {
+        xcb_unregister_for_special_event(present_priv->xcb_connection, present_priv->special_event);
+        present_priv->last_msc = 0;
+        present_priv->last_target = 0;
+        present_priv->special_event = NULL;
+    }
+}
+
+static BOOL PRESENTPrivChangeWindow(PRESENTpriv *present_priv, XID window)
+{
+    xcb_void_cookie_t cookie;
+    xcb_generic_error_t *error;
+    xcb_present_event_t eid;
+
+    PRESENTForceReleases(present_priv);
+    PRESENTFreeXcbQueue(present_priv);
+    present_priv->window = window;
+
+    if (window) {
+        cookie = xcb_present_select_input_checked(present_priv->xcb_connection,
+                                                  (eid = xcb_generate_id(present_priv->xcb_connection)),
+                                                  window,
+                                                  XCB_PRESENT_EVENT_MASK_COMPLETE_NOTIFY|
+                                                  XCB_PRESENT_EVENT_MASK_IDLE_NOTIFY);
+        present_priv->special_event = xcb_register_for_special_xge(present_priv->xcb_connection,
+                                                                   &xcb_present_id,
+                                                                   eid, NULL);
+        error = xcb_request_check(present_priv->xcb_connection, cookie); /* performs a flush */
+        if (error || !present_priv->special_event) {
+            ERR("FAILED to use the X PRESENT extension. Was the destination a window ?\n");
+            if (present_priv->special_event)
+                xcb_unregister_for_special_event(present_priv->xcb_connection, present_priv->special_event);
+            present_priv->special_event = NULL;
+            present_priv->window = 0;
+        }
+    }
+    return (present_priv->window != 0);
+}
+
+/* Destroy the content, except the link and the struct mem */
+static void
+PRESENTDestroyPixmapContent(Display *dpy, PRESENTPixmapPriv *present_pixmap)
+{
+    XFreePixmap(dpy, present_pixmap->pixmap);
+#ifdef D3DADAPTER9_DRI2
+    if (present_pixmap->dri2_info.is_dri2) {
+        struct DRI2priv *dri2_priv = present_pixmap->dri2_info.dri2_priv;
+        EGLenum current_api;
+        current_api = eglQueryAPI();
+        eglBindAPI(EGL_OPENGL_API);
+        if(eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, dri2_priv->context)) {
+            glDeleteFramebuffers(1, &present_pixmap->dri2_info.fbo_read);
+            glDeleteFramebuffers(1, &present_pixmap->dri2_info.fbo_write);
+            glDeleteTextures(1, &present_pixmap->dri2_info.texture_read);
+            glDeleteTextures(1, &present_pixmap->dri2_info.texture_write);
+        } else {
+            ERR("eglMakeCurrent failed with 0x%0X\n", eglGetError());
+        }
+        eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+        eglBindAPI(current_api);
+    }
+#endif
+}
+
+void
+PRESENTDestroy(Display *dpy, PRESENTpriv *present_priv)
+{
+    PRESENTPixmapPriv *current = NULL;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    PRESENTForceReleases(present_priv);
+
+    current = present_priv->first_present_priv;
+    while (current) {
+        PRESENTPixmapPriv *next = current->next;
+        PRESENTDestroyPixmapContent(dpy, current);
+        free(current);
+        current = next;
+    }
+
+    PRESENTFreeXcbQueue(present_priv);
+
+    xcb_disconnect(present_priv->xcb_connection);
+    xcb_disconnect(present_priv->xcb_connection_bis);
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    pthread_mutex_destroy(&present_priv->mutex_present);
+    pthread_mutex_destroy(&present_priv->mutex_xcb_wait);
+
+    free(present_priv);
+}
+
+BOOL
+PRESENTPixmapInit(PRESENTpriv *present_priv, Pixmap pixmap, PRESENTPixmapPriv **present_pixmap_priv)
+{
+    xcb_get_geometry_cookie_t cookie;
+    xcb_get_geometry_reply_t *reply;
+
+    cookie = xcb_get_geometry(present_priv->xcb_connection, pixmap);
+    reply = xcb_get_geometry_reply(present_priv->xcb_connection, cookie, NULL);
+
+    if (!reply)
+        return FALSE;
+
+    *present_pixmap_priv = (PRESENTPixmapPriv *) calloc(1, sizeof(PRESENTPixmapPriv));
+    if (!*present_pixmap_priv) {
+        free(reply);
+        return FALSE;
+    }
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    (*present_pixmap_priv)->released = TRUE;
+    (*present_pixmap_priv)->pixmap = pixmap;
+    (*present_pixmap_priv)->present_priv = present_priv;
+    (*present_pixmap_priv)->next = present_priv->first_present_priv;
+    (*present_pixmap_priv)->width = reply->width;
+    (*present_pixmap_priv)->height = reply->height;
+    (*present_pixmap_priv)->depth = reply->depth;
+#ifdef D3DADAPTER9_DRI2
+    (*present_pixmap_priv)->dri2_info.is_dri2 = FALSE;
+#endif
+    free(reply);
+
+    present_priv->last_serial_given++;
+    (*present_pixmap_priv)->serial = present_priv->last_serial_given;
+    present_priv->first_present_priv = *present_pixmap_priv;
+
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return TRUE;
+}
+
+#ifdef D3DADAPTER9_DRI2
+
+BOOL
+DRI2FallbackPRESENTPixmap(PRESENTpriv *present_priv, struct DRI2priv *dri2_priv,
+                          int fd, int width, int height, int stride, int depth,
+                          int bpp, PRESENTPixmapPriv **present_pixmap_priv)
+{
+    Window root = RootWindow(dri2_priv->dpy, DefaultScreen(dri2_priv->dpy));
+    Pixmap pixmap;
+    EGLImageKHR image;
+    GLuint texture_read, texture_write, fbo_read, fbo_write;
+    EGLint attribs[] = {
+        EGL_WIDTH, 0,
+        EGL_HEIGHT, 0,
+        EGL_LINUX_DRM_FOURCC_EXT, DRM_FORMAT_ARGB8888,
+        EGL_DMA_BUF_PLANE0_FD_EXT, 0,
+        EGL_DMA_BUF_PLANE0_OFFSET_EXT, 0,
+        EGL_DMA_BUF_PLANE0_PITCH_EXT, 0,
+        EGL_NONE
+    };
+    EGLenum current_api = 0;
+    int status;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    pixmap = XCreatePixmap(dri2_priv->dpy, root, width, height, 24);
+    if (!pixmap)
+        goto fail;
+
+    attribs[1] = width;
+    attribs[3] = height;
+    attribs[7] = fd;
+    attribs[11] = stride;
+
+    current_api = eglQueryAPI();
+    eglBindAPI(EGL_OPENGL_API);
+
+    /* We bind the dma-buf to a EGLImage, then to a texture, and then to a fbo.
+     * Note that we can delete the EGLImage, but we shouldn't delete the texture,
+     * else the fbo is invalid */
+
+    image = dri2_priv->eglCreateImageKHR_func(dri2_priv->display,
+                              EGL_NO_CONTEXT,
+                              EGL_LINUX_DMA_BUF_EXT,
+                              NULL, attribs);
+
+    if (image == EGL_NO_IMAGE_KHR)
+        goto fail;
+    close(fd);
+
+    if(eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, dri2_priv->context)) {
+        glGenTextures(1, &texture_read);
+        glBindTexture(GL_TEXTURE_2D, texture_read);
+        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+        dri2_priv->glEGLImageTargetTexture2DOES_func(GL_TEXTURE_2D, image);
+        glGenFramebuffers(1, &fbo_read);
+        glBindFramebuffer(GL_FRAMEBUFFER, fbo_read);
+        glFramebufferTexture2D(GL_FRAMEBUFFER,
+                               GL_COLOR_ATTACHMENT0,
+                               GL_TEXTURE_2D, texture_read,
+                               0);
+        status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
+        if (status != GL_FRAMEBUFFER_COMPLETE)
+            goto fail;
+        glBindTexture(GL_TEXTURE_2D, 0);
+        dri2_priv->eglDestroyImageKHR_func(dri2_priv->display, image);
+
+        /* We bind a newly created pixmap (to which we want to copy the content)
+         * to an EGLImage, then to a texture, then to a fbo. */
+        image = dri2_priv->eglCreateImageKHR_func(dri2_priv->display,
+                                                  dri2_priv->context,
+                                                  EGL_NATIVE_PIXMAP_KHR,
+                                                  (void *)pixmap, NULL);
+        if (image == EGL_NO_IMAGE_KHR)
+            goto fail;
+
+        glGenTextures(1, &texture_write);
+        glBindTexture(GL_TEXTURE_2D, texture_write);
+        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+        dri2_priv->glEGLImageTargetTexture2DOES_func(GL_TEXTURE_2D, image);
+        glGenFramebuffers(1, &fbo_write);
+        glBindFramebuffer(GL_FRAMEBUFFER, fbo_write);
+        glFramebufferTexture2D(GL_FRAMEBUFFER,
+                               GL_COLOR_ATTACHMENT0,
+                               GL_TEXTURE_2D, texture_write,
+                               0);
+        status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
+        if (status != GL_FRAMEBUFFER_COMPLETE)
+            goto fail;
+        glBindTexture(GL_TEXTURE_2D, 0);
+        dri2_priv->eglDestroyImageKHR_func(dri2_priv->display, image);
+    } else {
+        ERR("eglMakeCurrent failed with 0x%0X\n", eglGetError());
+    }
+    eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+
+    *present_pixmap_priv = (PRESENTPixmapPriv *) calloc(1, sizeof(PRESENTPixmapPriv));
+    if (!*present_pixmap_priv) {
+        goto fail;
+    }
+
+    (*present_pixmap_priv)->released = TRUE;
+    (*present_pixmap_priv)->pixmap = pixmap;
+    (*present_pixmap_priv)->present_priv = present_priv;
+    (*present_pixmap_priv)->next = present_priv->first_present_priv;
+    (*present_pixmap_priv)->width = width;
+    (*present_pixmap_priv)->height = height;
+    (*present_pixmap_priv)->depth = depth;
+    (*present_pixmap_priv)->dri2_info.is_dri2 = TRUE;
+    (*present_pixmap_priv)->dri2_info.dri2_priv = dri2_priv;
+    (*present_pixmap_priv)->dri2_info.fbo_read = fbo_read;
+    (*present_pixmap_priv)->dri2_info.fbo_write = fbo_write;
+    (*present_pixmap_priv)->dri2_info.texture_read = texture_read;
+    (*present_pixmap_priv)->dri2_info.texture_write = texture_write;
+
+    present_priv->last_serial_given++;
+    (*present_pixmap_priv)->serial = present_priv->last_serial_given;
+    present_priv->first_present_priv = *present_pixmap_priv;
+
+    eglBindAPI(current_api);
+
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return TRUE;
+fail:
+    eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+    eglBindAPI(current_api);
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return FALSE;
+}
+
+#endif
+
+BOOL
+PRESENTTryFreePixmap(Display *dpy, PRESENTPixmapPriv *present_pixmap_priv)
+{
+    PRESENTpriv *present_priv = present_pixmap_priv->present_priv;
+    PRESENTPixmapPriv *current;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    if (!present_pixmap_priv->released || present_pixmap_priv->present_complete_pending) {
+        pthread_mutex_unlock(&present_priv->mutex_present);
+        return FALSE;
+    }
+
+    if (present_priv->first_present_priv == present_pixmap_priv) {
+        present_priv->first_present_priv = present_pixmap_priv->next;
+        goto free_priv;
+    }
+
+    current = present_priv->first_present_priv;
+    while (current->next != present_pixmap_priv)
+        current = current->next;
+    current->next = present_pixmap_priv->next;
+free_priv:
+    PRESENTDestroyPixmapContent(dpy, present_pixmap_priv);
+    free(present_pixmap_priv);
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return TRUE;
+}
+
+BOOL
+PRESENTHelperCopyFront(Display *dpy, PRESENTPixmapPriv *present_pixmap_priv)
+{
+    PRESENTpriv *present_priv = present_pixmap_priv->present_priv;
+    xcb_void_cookie_t cookie;
+    xcb_generic_error_t *error;
+
+    uint32_t v = 0;
+    xcb_gcontext_t gc;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    if (!present_priv->window) {
+        pthread_mutex_unlock(&present_priv->mutex_present);
+        return FALSE;
+    }
+
+    xcb_create_gc(present_priv->xcb_connection,
+                  (gc = xcb_generate_id(present_priv->xcb_connection)),
+                  present_priv->window,
+                  XCB_GC_GRAPHICS_EXPOSURES,
+                  &v);
+    cookie = xcb_copy_area_checked(present_priv->xcb_connection,
+                                   present_priv->window,
+                                   present_pixmap_priv->pixmap,
+                                   gc,
+                                   0, 0, 0, 0,
+                                   present_pixmap_priv->width,
+                                   present_pixmap_priv->height);
+    error = xcb_request_check(present_priv->xcb_connection, cookie);
+    xcb_free_gc(present_priv->xcb_connection, gc);
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return (error != NULL);
+}
+
+BOOL
+PRESENTPixmap(Display *dpy, XID window,
+              PRESENTPixmapPriv *present_pixmap_priv, D3DPRESENT_PARAMETERS *pPresentationParameters,
+              const RECT *pSourceRect, const RECT *pDestRect, const RGNDATA *pDirtyRegion)
+{
+    PRESENTpriv *present_priv = present_pixmap_priv->present_priv;
+#ifdef D3DADAPTER9_DRI2
+    struct DRI2priv *dri2_priv = present_pixmap_priv->dri2_info.dri2_priv;
+    EGLenum current_api = 0;
+#endif
+    xcb_void_cookie_t cookie;
+    xcb_generic_error_t *error;
+    int64_t target_msc, presentationInterval;
+    xcb_xfixes_region_t valid, update;
+    int16_t x_off, y_off;
+    uint32_t options = XCB_PRESENT_OPTION_NONE;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    if (window != present_priv->window)
+        PRESENTPrivChangeWindow(present_priv, window);
+
+    if (!window) {
+        ERR("ERROR: Try to Present a pixmap on a NULL window\n");
+        pthread_mutex_unlock(&present_priv->mutex_present);
+        return FALSE;
+    }
+
+    PRESENTflush_events(present_priv, FALSE);
+    if (!present_pixmap_priv->released || present_pixmap_priv->present_complete_pending) {
+        ERR("FATAL ERROR: Trying to Present a pixmap not released\n");
+        pthread_mutex_unlock(&present_priv->mutex_present);
+        return FALSE;
+    }
+#ifdef D3DADAPTER9_DRI2
+    if (present_pixmap_priv->dri2_info.is_dri2) {
+        current_api = eglQueryAPI();
+        eglBindAPI(EGL_OPENGL_API);
+        if(eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, dri2_priv->context)) {
+            glBindFramebuffer(GL_READ_FRAMEBUFFER, present_pixmap_priv->dri2_info.fbo_read);
+            glBindFramebuffer(GL_DRAW_FRAMEBUFFER, present_pixmap_priv->dri2_info.fbo_write);
+
+            glBlitFramebuffer(0, 0, present_pixmap_priv->width, present_pixmap_priv->height,
+                              0, 0, present_pixmap_priv->width, present_pixmap_priv->height,
+                              GL_COLOR_BUFFER_BIT, GL_NEAREST);
+            glFlush(); /* Perhaps useless */
+        } else {
+            ERR("eglMakeCurrent failed with 0x%0X\n", eglGetError());
+        }
+        eglMakeCurrent(dri2_priv->display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+        eglBindAPI(current_api);
+    }
+#endif
+    target_msc = present_priv->last_msc;
+    switch(pPresentationParameters->PresentationInterval) {
+        case D3DPRESENT_INTERVAL_DEFAULT:
+        case D3DPRESENT_INTERVAL_ONE:
+            presentationInterval = 1;
+            break;
+        case D3DPRESENT_INTERVAL_TWO:
+            presentationInterval = 2;
+            break;
+        case D3DPRESENT_INTERVAL_THREE:
+            presentationInterval = 3;
+            break;
+        case D3DPRESENT_INTERVAL_FOUR:
+            presentationInterval = 4;
+            break;
+        case D3DPRESENT_INTERVAL_IMMEDIATE:
+        default:
+            presentationInterval = 0;
+            options |= XCB_PRESENT_OPTION_ASYNC | XCB_PRESENT_OPTION_COPY;
+            break;
+    }
+    target_msc += presentationInterval * (present_priv->pixmap_present_pending + 1);
+
+    /* Note: PRESENT defines some way to do partial copy:
+     * presentproto:
+     * 'x-off' and 'y-off' define the location in the window where
+     *  the 0,0 location of the pixmap will be presented. valid-area
+     *  and update-area are relative to the pixmap.
+     */
+    if (!pSourceRect && !pDestRect && !pDirtyRegion) {
+        valid = 0;
+        update = 0;
+        x_off = 0;
+        y_off = 0;
+    } else {
+        xcb_rectangle_t rect_update;
+        xcb_rectangle_t *rect_updates;
+        int i;
+
+        rect_update.x = 0;
+        rect_update.y = 0;
+        rect_update.width = present_pixmap_priv->width;
+        rect_update.height = present_pixmap_priv->height;
+        x_off = 0;
+        y_off = 0;
+        if (pSourceRect) {
+            x_off = -pSourceRect->left;
+            y_off = -pSourceRect->top;
+            rect_update.x = pSourceRect->left;
+            rect_update.y = pSourceRect->top;
+            rect_update.width = pSourceRect->right - pSourceRect->left;
+            rect_update.height = pSourceRect->bottom - pSourceRect->top;
+        }
+        if (pDestRect) {
+            x_off += pDestRect->left;
+            y_off += pDestRect->top;
+            rect_update.width = pDestRect->right - pDestRect->left;
+            rect_update.height = pDestRect->bottom - pDestRect->top;
+            /* Note: the size of pDestRect and pSourceRect are supposed to be the same size
+             * because the driver would have done things to assure that. */
+        }
+        valid = xcb_generate_id(present_priv->xcb_connection_bis);
+        update = xcb_generate_id(present_priv->xcb_connection_bis);
+        xcb_xfixes_create_region(present_priv->xcb_connection_bis, valid, 1, &rect_update);
+        if (pDirtyRegion && pDirtyRegion->rdh.nCount) {
+            rect_updates = (void *) calloc(pDirtyRegion->rdh.nCount, sizeof(xcb_rectangle_t));
+            for (i = 0; i < pDirtyRegion->rdh.nCount; i++)
+            {
+                RECT rc;
+                memcpy(&rc, pDirtyRegion->Buffer + i * sizeof(RECT), sizeof(RECT));
+                rect_update.x = rc.left;
+                rect_update.y = rc.top;
+                rect_update.width = rc.right - rc.left;
+                rect_update.height = rc.bottom - rc.top;
+                memcpy(rect_updates + i * sizeof(xcb_rectangle_t), &rect_update, sizeof(xcb_rectangle_t));
+            }
+            xcb_xfixes_create_region(present_priv->xcb_connection_bis, update, pDirtyRegion->rdh.nCount, rect_updates);
+            free(rect_updates);
+        } else
+            xcb_xfixes_create_region(present_priv->xcb_connection_bis, update, 1, &rect_update);
+    }
+    if (pPresentationParameters->SwapEffect == D3DSWAPEFFECT_COPY)
+        options |= XCB_PRESENT_OPTION_COPY;
+    cookie = xcb_present_pixmap_checked(present_priv->xcb_connection_bis,
+                                        window,
+                                        present_pixmap_priv->pixmap,
+                                        present_pixmap_priv->serial,
+                                        valid, update, x_off, y_off,
+                                        None, None, None, options,
+                                        target_msc, 0, 0, 0, NULL);
+    error = xcb_request_check(present_priv->xcb_connection_bis, cookie); /* performs a flush */
+
+    if (update)
+        xcb_xfixes_destroy_region(present_priv->xcb_connection_bis, update);
+    if (valid)
+        xcb_xfixes_destroy_region(present_priv->xcb_connection_bis, valid);
+
+    if (error) {
+        xcb_get_geometry_cookie_t cookie_geom;
+        xcb_get_geometry_reply_t *reply;
+
+        cookie_geom = xcb_get_geometry(present_priv->xcb_connection_bis, window);
+        reply = xcb_get_geometry_reply(present_priv->xcb_connection_bis, cookie_geom, NULL);
+
+        ERR("Error using PRESENT. Here some debug info\n");
+        if (!reply) {
+            ERR("Error querying window info. Perhaps it doesn't exist anymore\n");
+            pthread_mutex_unlock(&present_priv->mutex_present);
+            return FALSE;
+        }
+        ERR("Pixmap: width=%d, height=%d, depth=%d\n",
+            present_pixmap_priv->width, present_pixmap_priv->height,
+            present_pixmap_priv->depth);
+        ERR("Window: width=%d, height=%d, depth=%d, x=%d, y=%d\n",
+            (int) reply->width, (int) reply->height,
+            (int) reply->depth, (int) reply->x, (int) reply->y);
+        ERR("Present parameter: PresentationInterval=%d, BackBufferCount=%d, Pending presentations=%d\n",
+            pPresentationParameters->PresentationInterval,
+            pPresentationParameters->BackBufferCount,
+            present_priv->pixmap_present_pending
+           );
+        if (present_pixmap_priv->depth != reply->depth)
+            ERR("Depths are different. PRESENT needs the pixmap and the window have same depth\n");
+        free(reply);
+        pthread_mutex_unlock(&present_priv->mutex_present);
+        return FALSE;
+    }
+    present_priv->last_target = target_msc;
+    present_priv->pixmap_present_pending++;
+    present_pixmap_priv->present_complete_pending = TRUE;
+    present_pixmap_priv->released = FALSE;
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return TRUE;
+}
+
+BOOL
+PRESENTWaitPixmapReleased(PRESENTPixmapPriv *present_pixmap_priv)
+{
+    PRESENTpriv *present_priv = present_pixmap_priv->present_priv;
+
+    pthread_mutex_lock(&present_priv->mutex_present);
+
+    PRESENTflush_events(present_priv, FALSE);
+
+    while (!present_pixmap_priv->released || present_pixmap_priv->present_complete_pending) {
+        /* Note: following if should not happen because we'll never
+         * use two PRESENTWaitPixmapReleased in parallels on same window.
+         * However it would make it work in that case */
+        if (present_priv->xcb_wait) { /* we allow only one thread to dispatch events */
+            pthread_mutex_lock(&present_priv->mutex_xcb_wait);
+            /* here the other thread got an event but hasn't treated it yet */
+            pthread_mutex_unlock(&present_priv->mutex_xcb_wait);
+            pthread_mutex_unlock(&present_priv->mutex_present);
+            Sleep(10); /* Let it treat the event */
+            pthread_mutex_lock(&present_priv->mutex_present);
+        } else if (!PRESENTwait_events(present_priv, TRUE)) {
+            pthread_mutex_unlock(&present_priv->mutex_present);
+            return FALSE;
+        }
+    }
+    pthread_mutex_unlock(&present_priv->mutex_present);
+    return TRUE;
+}
diff --git a/dlls/d3d9-nine/dri3.h b/dlls/d3d9-nine/dri3.h
new file mode 100644
index 0000000..8f73c39
--- /dev/null
+++ b/dlls/d3d9-nine/dri3.h
@@ -0,0 +1,101 @@
+/*
+ * Wine X11DRV DRI3 interface
+ *
+ * Copyright 2014 Axel Davy
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __WINE_DRI3_H
+#define __WINE_DRI3_H
+
+#ifndef __WINE_CONFIG_H
+# error You must include config.h to use this header
+#endif
+
+#include <X11/Xlib.h>
+
+BOOL
+DRI3CheckExtension(Display *dpy, int major, int minor);
+
+#ifdef D3DADAPTER9_DRI2
+struct DRI2priv;
+
+BOOL
+DRI2FallbackInit(Display *dpy, struct DRI2priv **priv);
+
+void
+DRI2FallbackDestroy(struct DRI2priv *priv);
+
+BOOL
+DRI2FallbackCheckSupport(Display *dpy);
+#endif
+
+BOOL
+PRESENTCheckExtension(Display *dpy, int major, int minor);
+
+BOOL
+DRI3Open(Display *dpy, int screen, int *device_fd);
+
+#ifdef D3DADAPTER9_DRI2
+BOOL
+DRI2FallbackOpen(Display *dpy, int screen, int *device_fd);
+#endif
+
+BOOL
+DRI3PixmapFromDmaBuf(Display *dpy, int screen, int fd, int width, int height, int stride, int depth, int bpp, Pixmap *pixmap);
+
+BOOL
+DRI3DmaBufFromPixmap(Display *dpy, Pixmap pixmap, int *fd, int *width, int *height, int *stride, int *depth, int *bpp);
+
+typedef struct PRESENTPriv PRESENTpriv;
+typedef struct PRESENTPixmapPriv PRESENTPixmapPriv;
+
+BOOL
+PRESENTInit(Display *dpy, PRESENTpriv **present_priv);
+
+/* will clean properly and free all PRESENTPixmapPriv associated to PRESENTpriv.
+ * PRESENTPixmapPriv should not be freed by something else.
+ * If never a PRESENTPixmapPriv has to be destroyed,
+ * please destroy the current PRESENTpriv and create a new one.
+ * This will take care than all pixmaps are released */
+void
+PRESENTDestroy(Display *dpy, PRESENTpriv *present_priv);
+
+BOOL
+PRESENTPixmapInit(PRESENTpriv *present_priv, Pixmap pixmap, PRESENTPixmapPriv **present_pixmap_priv);
+
+#ifdef D3DADAPTER9_DRI2
+BOOL
+DRI2FallbackPRESENTPixmap(PRESENTpriv *present_priv, struct DRI2priv *priv,
+                          int fd, int width, int height, int stride, int depth,
+                          int bpp, PRESENTPixmapPriv **present_pixmap_priv);
+#endif
+
+BOOL
+PRESENTTryFreePixmap(Display *dpy, PRESENTPixmapPriv *present_pixmap_priv);
+
+BOOL
+PRESENTHelperCopyFront(Display *dpy, PRESENTPixmapPriv *present_pixmap_priv);
+
+BOOL
+PRESENTPixmap(Display *dpy, XID window,
+              PRESENTPixmapPriv *present_pixmap_priv, D3DPRESENT_PARAMETERS *pPresentationParameters,
+              const RECT *pSourceRect, const RECT *pDestRect, const RGNDATA *pDirtyRegion);
+
+BOOL
+PRESENTWaitPixmapReleased(PRESENTPixmapPriv *present_pixmap_priv);
+
+#endif /* __WINE_DRI3_H */
diff --git a/dlls/d3d9-nine/libd3d9-nine.def b/dlls/d3d9-nine/libd3d9-nine.def
new file mode 100644
index 0000000..4f41fcb
--- /dev/null
+++ b/dlls/d3d9-nine/libd3d9-nine.def
@@ -0,0 +1,16 @@
+; File generated automatically from ./dlls/d3d9-nine/d3d9-nine.spec; do not edit!
+
+LIBRARY d3d9-nine.dll
+
+EXPORTS
+  Direct3DShaderValidatorCreate9@0 @1
+  D3DPERF_BeginEvent@8 @4
+  D3DPERF_EndEvent@0 @5
+  D3DPERF_GetStatus@0 @6
+  D3DPERF_QueryRepeatFrame@0 @7
+  D3DPERF_SetMarker@8 @8
+  D3DPERF_SetOptions@4 @9
+  D3DPERF_SetRegion@8 @10
+  DebugSetMute@0 @12
+  Direct3DCreate9@4 @13
+  Direct3DCreate9Ex@8 @14
diff --git a/dlls/d3d9-nine/present.c b/dlls/d3d9-nine/present.c
new file mode 100644
index 0000000..8756be0
--- /dev/null
+++ b/dlls/d3d9-nine/present.c
@@ -0,0 +1,1333 @@
+/*
+ * Wine ID3DAdapter9 support functions
+ *
+ * Copyright 2013 Joakim Sindholt
+ *                Christoph Bumiller
+ * Copyright 2014 Tiziano Bacocco
+ *                David Heidelberger
+ * Copyright 2014-2015 Axel Davy
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+#include "wine/port.h"
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+#include <d3dadapter/d3dadapter9.h>
+#include <d3dadapter/drm.h>
+#include <X11/Xutil.h>
+
+#include "dri3.h"
+#include "wndproc.h"
+
+#include "wine/library.h" // for wine_dl*
+#include "wine/unicode.h" // for strcpyW
+
+#ifndef D3DPRESENT_DONOTWAIT
+#define D3DPRESENT_DONOTWAIT      0x00000001
+#endif
+
+#define WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MAJOR 1
+#ifdef ID3DPresent_GetWindowOccluded
+#if defined (ID3DPresent_ResolutionMismatch) && \
+    defined (ID3DPresent_CreateThread) && \
+    defined (ID3DPresent_WaitForThread)
+#define WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MINOR 2
+#else
+#define WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MINOR 1
+#endif
+#else
+#define WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MINOR 0
+#endif
+
+
+static const struct D3DAdapter9DRM *d3d9_drm = NULL;
+#ifdef D3DADAPTER9_DRI2
+static int is_dri2_fallback = 0;
+#endif
+
+#define X11DRV_ESCAPE 6789
+enum x11drv_escape_codes
+{
+    X11DRV_SET_DRAWABLE,     /* set current drawable for a DC */
+    X11DRV_GET_DRAWABLE,     /* get current drawable for a DC */
+    X11DRV_START_EXPOSURES,  /* start graphics exposures */
+    X11DRV_END_EXPOSURES,    /* end graphics exposures */
+    X11DRV_FLUSH_GL_DRAWABLE /* flush changes made to the gl drawable */
+};
+
+struct x11drv_escape_get_drawable
+{
+    enum x11drv_escape_codes code;         /* escape code (X11DRV_GET_DRAWABLE) */
+    Drawable                 drawable;     /* X drawable */
+    Drawable                 gl_drawable;  /* GL drawable */
+    int                      pixel_format; /* internal GL pixel format */
+    RECT                     dc_rect;      /* DC rectangle relative to drawable */
+};
+
+static XContext d3d_hwnd_context;
+static CRITICAL_SECTION context_section;
+static CRITICAL_SECTION_DEBUG critsect_debug =
+{
+    0, 0, &context_section,
+    { &critsect_debug.ProcessLocksList, &critsect_debug.ProcessLocksList },
+      0, 0, { (DWORD_PTR)(__FILE__ ": context_section") }
+};
+static CRITICAL_SECTION context_section = { &critsect_debug, -1, 0, 0, 0, 0 };
+
+const GUID IID_ID3DPresent = { 0x77D60E80, 0xF1E6, 0x11DF, { 0x9E, 0x39, 0x95, 0x0C, 0xDF, 0xD7, 0x20, 0x85 } };
+const GUID IID_ID3DPresentGroup = { 0xB9C3016E, 0xF32A, 0x11DF, { 0x9C, 0x18, 0x92, 0xEA, 0xDE, 0xD7, 0x20, 0x85 } };
+
+struct d3d_drawable
+{
+    Drawable drawable; /* X11 drawable */
+    RECT dc_rect; /* rect relative to the X11 drawable */
+    HDC hdc;
+    HWND wnd; /* HWND (for convenience) */
+};
+
+struct DRI3Present
+{
+    /* COM vtable */
+    void *vtable;
+    /* IUnknown reference count */
+    LONG refs;
+
+    D3DPRESENT_PARAMETERS params;
+    HWND focus_wnd;
+    PRESENTpriv *present_priv;
+#ifdef D3DADAPTER9_DRI2
+    struct DRI2priv *dri2_priv;
+#endif
+
+    WCHAR devname[32];
+    HCURSOR hCursor;
+
+    DEVMODEW initial_mode;
+    BOOL resolution_mismatch;
+    BOOL occluded;
+    Display *gdi_display;
+    struct d3d_drawable *d3d;
+    boolean ex;
+    boolean no_window_changes;
+    boolean mode_changed;
+    long style;
+    long style_ex;
+    boolean drop_wnd_messages;
+};
+
+struct D3DWindowBuffer
+{
+    PRESENTPixmapPriv *present_pixmap_priv;
+};
+
+static void
+free_d3dadapter_drawable(struct d3d_drawable *d3d)
+{
+    ReleaseDC(d3d->wnd, d3d->hdc);
+    HeapFree(GetProcessHeap(), 0, d3d);
+}
+
+void
+destroy_d3dadapter_drawable(Display *gdi_display, HWND hwnd)
+{
+    struct d3d_drawable *d3d;
+
+    EnterCriticalSection(&context_section);
+    if (!XFindContext(gdi_display, (XID)hwnd,
+                      d3d_hwnd_context, (char **)&d3d)) {
+        XDeleteContext(gdi_display, (XID)hwnd, d3d_hwnd_context);
+        free_d3dadapter_drawable(d3d);
+    }
+    LeaveCriticalSection(&context_section);
+}
+
+static struct d3d_drawable *
+create_d3dadapter_drawable(HWND hwnd)
+{
+    struct x11drv_escape_get_drawable extesc = { X11DRV_GET_DRAWABLE };
+    struct d3d_drawable *d3d;
+
+    d3d = HeapAlloc(GetProcessHeap(), 0, sizeof(*d3d));
+    if (!d3d) {
+        ERR("Couldn't allocate d3d_drawable.\n");
+        return NULL;
+    }
+
+    d3d->hdc = GetDCEx(hwnd, 0, DCX_CACHE | DCX_CLIPSIBLINGS);
+    if (ExtEscape(d3d->hdc, X11DRV_ESCAPE, sizeof(extesc), (LPCSTR)&extesc,
+                  sizeof(extesc), (LPSTR)&extesc) <= 0) {
+        ERR("Unexpected error in X Drawable lookup (hwnd=%p, hdc=%p)\n",
+            hwnd, d3d->hdc);
+        ReleaseDC(hwnd, d3d->hdc);
+        HeapFree(GetProcessHeap(), 0, d3d);
+        return NULL;
+    }
+
+    d3d->drawable = extesc.drawable;
+    d3d->wnd = hwnd;
+    d3d->dc_rect = extesc.dc_rect;
+
+    return d3d;
+}
+
+static struct d3d_drawable *
+get_d3d_drawable(Display *gdi_display, HWND hwnd)
+{
+    struct d3d_drawable *d3d, *race;
+
+    EnterCriticalSection(&context_section);
+    if (!XFindContext(gdi_display, (XID)hwnd,
+                      d3d_hwnd_context, (char **)&d3d)) {
+        struct x11drv_escape_get_drawable extesc = { X11DRV_GET_DRAWABLE };
+
+        /* check if the window has moved since last we used it */
+        if (ExtEscape(d3d->hdc, X11DRV_ESCAPE, sizeof(extesc), (LPCSTR)&extesc,
+                      sizeof(extesc), (LPSTR)&extesc) <= 0) {
+            WARN("Window update check failed (hwnd=%p, hdc=%p)\n",
+                 hwnd, d3d->hdc);
+        }
+
+        if (!EqualRect(&d3d->dc_rect, &extesc.dc_rect))
+            d3d->dc_rect = extesc.dc_rect;
+
+        return d3d;
+    }
+    LeaveCriticalSection(&context_section);
+
+    TRACE("No d3d_drawable attached to hwnd %p, creating one.\n", hwnd);
+
+    d3d = create_d3dadapter_drawable(hwnd);
+    if (!d3d) { return NULL; }
+
+    EnterCriticalSection(&context_section);
+    if (!XFindContext(gdi_display, (XID)hwnd,
+                      d3d_hwnd_context, (char **)&race)) {
+        /* apparently someone beat us to creating this d3d drawable. Let's not
+           waste more time with X11 calls and just use theirs instead. */
+        free_d3dadapter_drawable(d3d);
+        return race;
+    }
+    XSaveContext(gdi_display, (XID)hwnd, d3d_hwnd_context, (char *)d3d);
+    return d3d;
+}
+
+static void
+release_d3d_drawable(struct d3d_drawable *d3d)
+{
+    if (d3d) { LeaveCriticalSection(&context_section); }
+}
+
+static ULONG WINAPI
+DRI3Present_AddRef( struct DRI3Present *This )
+{
+    ULONG refs = InterlockedIncrement(&This->refs);
+    TRACE("%p increasing refcount to %u.\n", This, refs);
+    return refs;
+}
+
+static ULONG WINAPI
+DRI3Present_Release( struct DRI3Present *This )
+{
+    ULONG refs = InterlockedDecrement(&This->refs);
+    TRACE("%p decreasing refcount to %u.\n", This, refs);
+    if (refs == 0) {
+        /* dtor */
+        (void) nine_unregister_window(This->focus_wnd);
+        if (This->d3d)
+            destroy_d3dadapter_drawable(This->gdi_display, This->d3d->wnd);
+        ChangeDisplaySettingsExW(This->devname, &(This->initial_mode), 0, CDS_FULLSCREEN, NULL);
+
+        PRESENTDestroy(This->gdi_display, This->present_priv);
+#ifdef D3DADAPTER9_DRI2
+        if (is_dri2_fallback)
+            DRI2FallbackDestroy(This->dri2_priv);
+#endif
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+    return refs;
+}
+
+static HRESULT WINAPI
+DRI3Present_QueryInterface( struct DRI3Present *This,
+                            REFIID riid,
+                            void **ppvObject )
+{
+    if (!ppvObject) { return E_POINTER; }
+
+    if (IsEqualGUID(&IID_ID3DPresent, riid) ||
+        IsEqualGUID(&IID_IUnknown, riid)) {
+        *ppvObject = This;
+        DRI3Present_AddRef(This);
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+    *ppvObject = NULL;
+
+    return E_NOINTERFACE;
+}
+
+static HRESULT
+DRI3Present_ChangePresentParameters( struct DRI3Present *This,
+                                    D3DPRESENT_PARAMETERS *params);
+
+static HRESULT WINAPI
+DRI3Present_SetPresentParameters( struct DRI3Present *This,
+                                  D3DPRESENT_PARAMETERS *pPresentationParameters,
+                                  D3DDISPLAYMODEEX *pFullscreenDisplayMode )
+{
+    if (pFullscreenDisplayMode)
+        ERR("Ignoring pFullscreenDisplayMode\n");
+    return DRI3Present_ChangePresentParameters(This, pPresentationParameters);
+}
+
+static HRESULT WINAPI
+DRI3Present_D3DWindowBufferFromDmaBuf( struct DRI3Present *This,
+                       int dmaBufFd,
+                       int width,
+                       int height,
+                       int stride,
+                       int depth,
+                       int bpp,
+                       struct D3DWindowBuffer **out)
+{
+    Pixmap pixmap;
+
+#ifdef D3DADAPTER9_DRI2
+    if (is_dri2_fallback) {
+        *out = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                    sizeof(struct D3DWindowBuffer));
+        DRI2FallbackPRESENTPixmap(This->present_priv, This->dri2_priv,
+                                  dmaBufFd, width, height, stride, depth,
+                                  bpp,
+                                  &((*out)->present_pixmap_priv));
+        return D3D_OK;
+    }
+#endif
+    if (!DRI3PixmapFromDmaBuf(This->gdi_display, DefaultScreen(This->gdi_display),
+                              dmaBufFd, width, height, stride, depth,
+                              bpp, &pixmap ))
+        return D3DERR_DRIVERINTERNALERROR;
+
+    *out = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                    sizeof(struct D3DWindowBuffer));
+    PRESENTPixmapInit(This->present_priv, pixmap, &((*out)->present_pixmap_priv));
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_DestroyD3DWindowBuffer( struct DRI3Present *This,
+                           struct D3DWindowBuffer *buffer )
+{
+    /* the pixmap is managed by the PRESENT backend.
+     * But if it can delete it right away, we may have
+     * better performance */
+    PRESENTTryFreePixmap(This->gdi_display, buffer->present_pixmap_priv);
+    HeapFree(GetProcessHeap(), 0, buffer);
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_WaitBufferReleased( struct DRI3Present *This,
+                                struct D3DWindowBuffer *buffer)
+{
+    PRESENTWaitPixmapReleased(buffer->present_pixmap_priv);
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_FrontBufferCopy( struct DRI3Present *This,
+                             struct D3DWindowBuffer *buffer )
+{
+#ifdef D3DADAPTER9_DRI2
+    if (is_dri2_fallback)
+        return D3DERR_DRIVERINTERNALERROR;
+#endif
+    /* TODO: use dc_rect */
+    if (PRESENTHelperCopyFront(This->gdi_display, buffer->present_pixmap_priv))
+        return D3D_OK;
+    else
+        return D3DERR_DRIVERINTERNALERROR;
+}
+
+static HRESULT WINAPI
+DRI3Present_PresentBuffer( struct DRI3Present *This,
+                           struct D3DWindowBuffer *buffer,
+                           HWND hWndOverride,
+                           const RECT *pSourceRect,
+                           const RECT *pDestRect,
+                           const RGNDATA *pDirtyRegion,
+                           DWORD Flags )
+{
+    struct d3d_drawable *d3d;
+    RECT dest_translate;
+
+    if (hWndOverride) {
+        d3d = get_d3d_drawable(This->gdi_display, hWndOverride);
+    } else if (This->params.hDeviceWindow) {
+        d3d = get_d3d_drawable(This->gdi_display, This->params.hDeviceWindow);
+    } else {
+        d3d = get_d3d_drawable(This->gdi_display, This->focus_wnd);
+    }
+    if (!d3d) { return D3DERR_DRIVERINTERNALERROR; }
+
+    /* TODO: should we use a list here instead ? */
+    if (This->d3d && (This->d3d->wnd != d3d->wnd)) {
+        destroy_d3dadapter_drawable(This->gdi_display, This->d3d->wnd);
+    }
+    This->d3d = d3d;
+
+    if (d3d->dc_rect.top != 0 &&
+        d3d->dc_rect.left != 0) {
+        if (!pDestRect)
+            pDestRect = (const RECT *) &(d3d->dc_rect);
+        else {
+            dest_translate.top = pDestRect->top + d3d->dc_rect.top;
+            dest_translate.left = pDestRect->left + d3d->dc_rect.left;
+            dest_translate.bottom = pDestRect->bottom + d3d->dc_rect.bottom;
+            dest_translate.right = pDestRect->right + d3d->dc_rect.right;
+            pDestRect = (const RECT *) &dest_translate;
+        }
+    }
+
+    if (!PRESENTPixmap(This->gdi_display, d3d->drawable, buffer->present_pixmap_priv,
+                       &This->params, pSourceRect, pDestRect, pDirtyRegion))
+        return D3DERR_DRIVERINTERNALERROR;
+
+    release_d3d_drawable(d3d);
+
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_GetRasterStatus( struct DRI3Present *This,
+                             D3DRASTER_STATUS *pRasterStatus )
+{
+    FIXME("(%p, %p), stub!\n", This, pRasterStatus);
+    return D3DERR_INVALIDCALL;
+}
+
+static HRESULT WINAPI
+DRI3Present_GetDisplayMode( struct DRI3Present *This,
+                            D3DDISPLAYMODEEX *pMode,
+                            D3DDISPLAYROTATION *pRotation )
+{
+    DEVMODEW dm;
+
+    ZeroMemory(&dm, sizeof(dm));
+    dm.dmSize = sizeof(dm);
+
+    EnumDisplaySettingsExW(This->devname, ENUM_CURRENT_SETTINGS, &dm, 0);
+    pMode->Width = dm.dmPelsWidth;
+    pMode->Height = dm.dmPelsHeight;
+    pMode->RefreshRate = dm.dmDisplayFrequency;
+    pMode->ScanLineOrdering = (dm.dmDisplayFlags & DM_INTERLACED) ?
+                                  D3DSCANLINEORDERING_INTERLACED :
+                                  D3DSCANLINEORDERING_PROGRESSIVE;
+
+    /* XXX This is called "guessing" */
+    switch (dm.dmBitsPerPel) {
+        case 32: pMode->Format = D3DFMT_X8R8G8B8; break;
+        case 24: pMode->Format = D3DFMT_R8G8B8; break;
+        case 16: pMode->Format = D3DFMT_R5G6B5; break;
+        default:
+            WARN("Unknown display format with %u bpp.\n", dm.dmBitsPerPel);
+            pMode->Format = D3DFMT_UNKNOWN;
+    }
+
+    switch (dm.dmDisplayOrientation) {
+        case DMDO_DEFAULT: *pRotation = D3DDISPLAYROTATION_IDENTITY; break;
+        case DMDO_90:      *pRotation = D3DDISPLAYROTATION_90; break;
+        case DMDO_180:     *pRotation = D3DDISPLAYROTATION_180; break;
+        case DMDO_270:     *pRotation = D3DDISPLAYROTATION_270; break;
+        default:
+            WARN("Unknown display rotation %u.\n", dm.dmDisplayOrientation);
+            *pRotation = D3DDISPLAYROTATION_IDENTITY;
+    }
+
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_GetPresentStats( struct DRI3Present *This,
+                             D3DPRESENTSTATS *pStats )
+{
+    FIXME("(%p, %p), stub!\n", This, pStats);
+    return D3DERR_INVALIDCALL;
+}
+
+static HRESULT WINAPI
+DRI3Present_GetCursorPos( struct DRI3Present *This,
+                          POINT *pPoint )
+{
+    BOOL ok;
+    HWND draw_window;
+
+    if (!pPoint)
+        return D3DERR_INVALIDCALL;
+
+    draw_window = This->params.hDeviceWindow ?
+        This->params.hDeviceWindow : This->focus_wnd;
+
+    ok = GetCursorPos(pPoint);
+    ok = ok && ScreenToClient(draw_window, pPoint);
+    return ok ? S_OK : D3DERR_DRIVERINTERNALERROR;
+}
+
+static HRESULT WINAPI
+DRI3Present_SetCursorPos( struct DRI3Present *This,
+                          POINT *pPoint )
+{
+    BOOL ok;
+    POINT real_pos;
+
+    if (!pPoint)
+        return D3DERR_INVALIDCALL;
+
+    ok = SetCursorPos(pPoint->x, pPoint->y);
+    if (!ok)
+        goto error;
+
+    ok = GetCursorPos(&real_pos);
+    if (!ok || real_pos.x != pPoint->x || real_pos.y != pPoint->y)
+        goto error;
+
+    return D3D_OK;
+
+error:
+    SetCursor(NULL); /* Hide cursor rather than put wrong pos */
+    return D3DERR_DRIVERINTERNALERROR;
+}
+
+
+/* Note: assuming 32x32 cursor */
+static HRESULT WINAPI
+DRI3Present_SetCursor( struct DRI3Present *This,
+                       void *pBitmap,
+                       POINT *pHotspot,
+                       BOOL bShow )
+{
+   if (pBitmap) {
+      ICONINFO info;
+      HCURSOR cursor;
+
+      DWORD mask[32];
+      memset(mask, ~0, sizeof(mask));
+
+      if (!pHotspot)
+         return D3DERR_INVALIDCALL;
+      info.fIcon = FALSE;
+      info.xHotspot = pHotspot->x;
+      info.yHotspot = pHotspot->y;
+      info.hbmMask = CreateBitmap(32, 32, 1, 1, mask);
+      info.hbmColor = CreateBitmap(32, 32, 1, 32, pBitmap);
+
+      cursor = CreateIconIndirect(&info);
+      if (info.hbmMask) DeleteObject(info.hbmMask);
+      if (info.hbmColor) DeleteObject(info.hbmColor);
+      if (cursor)
+         DestroyCursor(This->hCursor);
+      This->hCursor = cursor;
+   }
+   SetCursor(bShow ? This->hCursor : NULL);
+
+   return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3Present_SetGammaRamp( struct DRI3Present *This,
+                          const D3DGAMMARAMP *pRamp,
+                          HWND hWndOverride )
+{
+    HWND hWnd = hWndOverride ? hWndOverride : This->focus_wnd;
+    HDC hdc;
+    BOOL ok;
+    if (!pRamp) {
+        return D3DERR_INVALIDCALL;
+    }
+    hdc = GetDC(hWnd);
+    ok = SetDeviceGammaRamp(hdc, (void *)pRamp);
+    ReleaseDC(hWnd, hdc);
+    return ok ? D3D_OK : D3DERR_DRIVERINTERNALERROR;
+}
+
+static HRESULT WINAPI
+DRI3Present_GetWindowInfo( struct DRI3Present *This,
+                           HWND hWnd,
+                           int *width, int *height, int *depth )
+{
+    HRESULT hr;
+    RECT pRect;
+
+    if (!hWnd)
+        hWnd = This->focus_wnd;
+    hr = GetClientRect(hWnd, &pRect);
+    if (!hr)
+        return D3DERR_INVALIDCALL;
+    *width = pRect.right - pRect.left;
+    *height = pRect.bottom - pRect.top;
+    *depth = 24; //TODO
+    return D3D_OK;
+}
+
+static LONG fullscreen_style(LONG style)
+{
+    /* Make sure the window is managed, otherwise we won't get keyboard input. */
+    style |= WS_POPUP | WS_SYSMENU;
+    style &= ~(WS_CAPTION | WS_THICKFRAME);
+
+    return style;
+}
+
+static LONG fullscreen_exstyle(LONG exstyle)
+{
+    /* Filter out window decorations. */
+    exstyle &= ~(WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE);
+
+    return exstyle;
+}
+
+static HRESULT
+DRI3Present_ChangeDisplaySettingsIfNeccessary( struct DRI3Present *This, DEVMODEW *new_mode ) {
+    DEVMODEW current_mode;
+    LONG hr;
+
+    ZeroMemory(&current_mode, sizeof(DEVMODEW));
+    /* Only change the mode if necessary. */
+    if (!EnumDisplaySettingsW(This->devname, ENUM_CURRENT_SETTINGS, &current_mode))
+    {
+       ERR("Failed to get current display mode.\n");
+    } else if (current_mode.dmPelsWidth != new_mode->dmPelsWidth
+           || current_mode.dmPelsHeight != new_mode->dmPelsHeight
+           || (current_mode.dmDisplayFrequency != new_mode->dmDisplayFrequency
+           && (new_mode->dmFields & DM_DISPLAYFREQUENCY)))
+    {
+        hr = ChangeDisplaySettingsExW(This->devname, new_mode, 0, CDS_FULLSCREEN, NULL);
+        if (hr != DISP_CHANGE_SUCCESSFUL) {
+            /* try again without display RefreshRate */
+            if (new_mode->dmFields & DM_DISPLAYFREQUENCY) {
+                new_mode->dmFields &= ~DM_DISPLAYFREQUENCY;
+                new_mode->dmDisplayFrequency = 0;
+                hr = ChangeDisplaySettingsExW(This->devname, new_mode, 0, CDS_FULLSCREEN, NULL);
+                if (hr != DISP_CHANGE_SUCCESSFUL) {
+                    WARN("ChangeDisplaySettingsExW failed with 0x%08X\n", hr);
+                    return D3DERR_INVALIDCALL;
+                }
+            } else {
+                WARN("ChangeDisplaySettingsExW failed with 0x%08X\n", hr);
+                return D3DERR_INVALIDCALL;
+            }
+        }
+    }
+    return D3D_OK;
+}
+
+LRESULT device_process_message(struct DRI3Present *present, HWND window, BOOL unicode,
+        UINT message, WPARAM wparam, LPARAM lparam, WNDPROC proc)
+{
+    boolean drop_wnd_messages;
+    DEVMODEW current_mode;
+    DEVMODEW new_mode;
+
+    TRACE("Got message: window %p, message %#x, wparam %#lx, lparam %#lx.\n",
+                    window, message, wparam, lparam);
+
+    if (present->drop_wnd_messages && message != WM_DISPLAYCHANGE)
+    {
+        TRACE("Filtering message: window %p, message %#x, wparam %#lx, lparam %#lx.\n",
+                window, message, wparam, lparam);
+        if (unicode)
+            return DefWindowProcW(window, message, wparam, lparam);
+        else
+            return DefWindowProcA(window, message, wparam, lparam);
+    }
+
+    if (message == WM_DESTROY)
+    {
+        TRACE("unregister window %p.\n", window);
+        (void) nine_unregister_window(window);
+    }
+    else if (message == WM_DISPLAYCHANGE)
+    {
+        present->mode_changed = TRUE;
+        /* Ex restores display mode, while non Ex requires the
+         * user to call Device::Reset() */
+        ZeroMemory(&current_mode, sizeof(DEVMODEW));
+        if (!present->ex &&
+            !present->params.Windowed &&
+            EnumDisplaySettingsW(present->devname, ENUM_CURRENT_SETTINGS, &current_mode) &&
+            (current_mode.dmPelsWidth != present->params.BackBufferWidth ||
+             current_mode.dmPelsHeight != present->params.BackBufferHeight))
+        {
+            present->resolution_mismatch = TRUE;
+        } else {
+            present->resolution_mismatch = FALSE;
+        }
+    }
+    else if (message == WM_ACTIVATEAPP)
+    {
+        drop_wnd_messages = present->drop_wnd_messages;
+        present->drop_wnd_messages = TRUE;
+
+        if (wparam == WA_INACTIVE) {
+            present->occluded = TRUE;
+            ZeroMemory(&new_mode, sizeof(DEVMODEW));
+            new_mode.dmSize = sizeof(new_mode);
+            if (EnumDisplaySettingsW(present->devname, ENUM_REGISTRY_SETTINGS, &new_mode)) {
+                DRI3Present_ChangeDisplaySettingsIfNeccessary(present, &new_mode);
+            }
+
+            if (!present->no_window_changes &&
+                    IsWindowVisible(present->params.hDeviceWindow))
+                ShowWindow(present->params.hDeviceWindow, SW_MINIMIZE);
+        } else {
+            present->occluded = FALSE;
+            if (!present->no_window_changes) {
+                /* restore window */
+                SetWindowPos(present->params.hDeviceWindow, NULL, 0, 0,
+                             present->params.BackBufferWidth, present->params.BackBufferHeight,
+                             SWP_NOACTIVATE | SWP_NOZORDER);
+            }
+
+            if (present->ex) {
+                ZeroMemory(&new_mode, sizeof(DEVMODEW));
+                new_mode.dmSize = sizeof(new_mode);
+                new_mode.dmPelsWidth = present->params.BackBufferWidth;
+                new_mode.dmPelsHeight = present->params.BackBufferHeight;
+                new_mode.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;
+                if (present->params.FullScreen_RefreshRateInHz) {
+                    new_mode.dmFields |= DM_DISPLAYFREQUENCY;
+                    new_mode.dmDisplayFrequency = present->params.FullScreen_RefreshRateInHz;
+                }
+                new_mode.dmSize = sizeof(DEVMODEW);
+                DRI3Present_ChangeDisplaySettingsIfNeccessary(present, &new_mode);
+            }
+        }
+        present->drop_wnd_messages = drop_wnd_messages;
+    }
+    else if (message == WM_SYSCOMMAND)
+    {
+        if (wparam == SC_RESTORE)
+        {
+            if (unicode)
+                DefWindowProcW(window, message, wparam, lparam);
+            else
+                DefWindowProcA(window, message, wparam, lparam);
+        }
+    }
+
+    if (unicode)
+        return CallWindowProcW(proc, window, message, wparam, lparam);
+    else
+        return CallWindowProcA(proc, window, message, wparam, lparam);
+}
+
+#ifdef ID3DPresent_GetWindowOccluded
+static BOOL WINAPI
+DRI3Present_GetWindowOccluded( struct DRI3Present *This )
+{
+    return This->occluded;
+}
+#endif
+
+#ifdef ID3DPresent_ResolutionMismatch
+static BOOL WINAPI
+DRI3Present_ResolutionMismatch( struct DRI3Present *This )
+{
+    /* The resolution might change due to a third party app.
+     * Poll this function to get the device's resolution match.
+     * A device reset is required to restore the requested resolution.
+     */
+    return This->resolution_mismatch;
+}
+#endif
+
+#ifdef ID3DPresent_CreateThread
+static HANDLE WINAPI
+DRI3Present_CreateThread( struct DRI3Present *This,
+                          void *pThreadfunc,
+                          void *pParam )
+{
+    LPTHREAD_START_ROUTINE lpStartAddress =
+            (LPTHREAD_START_ROUTINE) pThreadfunc;
+
+    return CreateThread(NULL, 0, lpStartAddress, pParam, 0, NULL);
+}
+#endif
+
+#ifdef ID3DPresent_WaitForThread
+static BOOL WINAPI
+DRI3Present_WaitForThread( struct DRI3Present *This,
+                           HANDLE thread )
+{
+    DWORD ExitCode = 0;
+    while (GetExitCodeThread(thread, &ExitCode) && ExitCode == STILL_ACTIVE) {
+        Sleep(10);
+    }
+    return TRUE;
+}
+#endif
+
+/*----------*/
+
+static ID3DPresentVtbl DRI3Present_vtable = {
+    (void *)DRI3Present_QueryInterface,
+    (void *)DRI3Present_AddRef,
+    (void *)DRI3Present_Release,
+    (void *)DRI3Present_SetPresentParameters,
+    (void *)DRI3Present_D3DWindowBufferFromDmaBuf,
+    (void *)DRI3Present_DestroyD3DWindowBuffer,
+    (void *)DRI3Present_WaitBufferReleased,
+    (void *)DRI3Present_FrontBufferCopy,
+    (void *)DRI3Present_PresentBuffer,
+    (void *)DRI3Present_GetRasterStatus,
+    (void *)DRI3Present_GetDisplayMode,
+    (void *)DRI3Present_GetPresentStats,
+    (void *)DRI3Present_GetCursorPos,
+    (void *)DRI3Present_SetCursorPos,
+    (void *)DRI3Present_SetCursor,
+    (void *)DRI3Present_SetGammaRamp,
+    (void *)DRI3Present_GetWindowInfo,
+#ifdef ID3DPresent_GetWindowOccluded
+    (void *)DRI3Present_GetWindowOccluded,
+#endif
+#ifdef ID3DPresent_ResolutionMismatch
+    (void *)DRI3Present_ResolutionMismatch,
+#endif
+#ifdef ID3DPresent_CreateThread
+    (void *)DRI3Present_CreateThread,
+#endif
+#ifdef ID3DPresent_WaitForThread
+    (void *)DRI3Present_WaitForThread,
+#endif
+};
+
+static HRESULT
+DRI3Present_ChangePresentParameters( struct DRI3Present *This,
+                                    D3DPRESENT_PARAMETERS *params )
+{
+    HWND draw_window = params->hDeviceWindow;
+    RECT rect;
+    DEVMODEW new_mode;
+    HRESULT hr;
+    LONG style, style_ex;
+    boolean drop_wnd_messages;
+
+    if (!GetClientRect(draw_window, &rect)) {
+        WARN("GetClientRect failed.\n");
+        rect.right = 640;
+        rect.bottom = 480;
+    }
+
+    if (params->BackBufferWidth == 0) {
+        params->BackBufferWidth = rect.right - rect.left;
+    }
+    if (params->BackBufferHeight == 0) {
+        params->BackBufferHeight = rect.bottom - rect.top;
+    }
+
+    if ((This->params.BackBufferWidth != params->BackBufferWidth) ||
+        (This->params.BackBufferHeight != params->BackBufferHeight)) {
+        This->mode_changed = TRUE;
+    }
+
+    if (This->mode_changed || (This->params.Windowed != params->Windowed)) {
+        if (!params->Windowed) {
+            /* switch display mode */
+            ZeroMemory(&new_mode, sizeof(DEVMODEW));
+            new_mode.dmPelsWidth = params->BackBufferWidth;
+            new_mode.dmPelsHeight = params->BackBufferHeight;
+            new_mode.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;
+            if (params->FullScreen_RefreshRateInHz) {
+                new_mode.dmFields |= DM_DISPLAYFREQUENCY;
+                new_mode.dmDisplayFrequency = params->FullScreen_RefreshRateInHz;
+            }
+            new_mode.dmSize = sizeof(DEVMODEW);
+            hr = DRI3Present_ChangeDisplaySettingsIfNeccessary(This, &new_mode);
+        } else {
+            hr= DRI3Present_ChangeDisplaySettingsIfNeccessary(This, &This->initial_mode);
+        }
+        if (hr != D3D_OK)
+            return hr;
+        This->mode_changed = FALSE;
+
+        if (This->params.Windowed) {
+            if (!params->Windowed) {
+                /* switch from window to fullscreen */
+                if (nine_register_window(This->focus_wnd, This)) {
+                    if (This->focus_wnd != draw_window)
+                        SetWindowPos(This->focus_wnd, 0, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);
+                }
+
+                drop_wnd_messages = This->drop_wnd_messages;
+                This->drop_wnd_messages = TRUE;
+
+                if (!This->no_window_changes) {
+                    This->style = GetWindowLongW(draw_window, GWL_STYLE);
+                    This->style_ex = GetWindowLongW(draw_window, GWL_EXSTYLE);
+
+                    style = fullscreen_style(This->style);
+                    style_ex = fullscreen_exstyle(This->style_ex);
+
+                    SetWindowLongW(draw_window, GWL_STYLE, style);
+                    SetWindowLongW(draw_window, GWL_EXSTYLE, style_ex);
+
+                    SetWindowPos(draw_window, HWND_TOPMOST, 0, 0, params->BackBufferWidth,
+                                 params->BackBufferHeight,
+                                 SWP_FRAMECHANGED | SWP_SHOWWINDOW | SWP_NOACTIVATE);
+                }
+                This->drop_wnd_messages = drop_wnd_messages;
+            }
+        } else {
+            if (!params->Windowed) {
+                /* switch from fullscreen to fullscreen */
+                drop_wnd_messages = This->drop_wnd_messages;
+                This->drop_wnd_messages = TRUE;
+                MoveWindow(draw_window, 0, 0,
+                        params->BackBufferWidth,
+                        params->BackBufferHeight,
+                        TRUE);
+                This->drop_wnd_messages = drop_wnd_messages;
+            } else if (!This->no_window_changes &&
+                       (This->style || This->style_ex)) {
+                /* switch from fullscreen to window */
+                style = GetWindowLongW(draw_window, GWL_STYLE);
+                style_ex = GetWindowLongW(draw_window, GWL_EXSTYLE);
+                /* These flags are set by us, not the
+                 * application, and we want to ignore them in the test below, since it's
+                 * not the application's fault that they changed. Additionally, we want to
+                 * preserve the current status of these flags (i.e. don't restore them) to
+                 * more closely emulate the behavior of Direct3D, which leaves these flags
+                 * alone when returning to windowed mode. */
+                This->style ^= (This->style ^ style) & WS_VISIBLE;
+                This->style_ex ^= (This->style_ex ^ style_ex) & WS_EX_TOPMOST;
+
+                /* Only restore the style if the application didn't modify it during the
+                 * fullscreen phase. Some applications change it before calling Reset()
+                 * when switching between windowed and fullscreen modes (HL2), some
+                 * depend on the original style (Eve Online). */
+                drop_wnd_messages = This->drop_wnd_messages;
+                This->drop_wnd_messages = TRUE;
+                if (style == fullscreen_style(This->style) && style_ex == fullscreen_exstyle(This->style_ex))
+                {
+                    SetWindowLongW(draw_window, GWL_STYLE, style);
+                    SetWindowLongW(draw_window, GWL_EXSTYLE, style_ex);
+                }
+                SetWindowPos(draw_window, 0, 0, 0, 0, 0, SWP_FRAMECHANGED |
+                             SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER |
+                             SWP_NOACTIVATE);
+                This->drop_wnd_messages = drop_wnd_messages;
+
+                This->style = 0;
+                This->style_ex = 0;
+            }
+
+            if (params->Windowed && !nine_unregister_window(This->focus_wnd))
+                ERR("Window %p is not registered with nine.\n", This->focus_wnd);
+        }
+    } else if (!params->Windowed) {
+        /* move draw window back to place */
+
+        style = GetWindowLongW(draw_window, GWL_STYLE);
+        style_ex = GetWindowLongW(draw_window, GWL_EXSTYLE);
+
+        style = fullscreen_style(style);
+        style_ex = fullscreen_exstyle(style_ex);
+
+        drop_wnd_messages = This->drop_wnd_messages;
+        This->drop_wnd_messages = TRUE;
+        SetWindowLongW(draw_window, GWL_STYLE, style);
+        SetWindowLongW(draw_window, GWL_EXSTYLE, style_ex);
+        SetWindowPos(draw_window, HWND_TOPMOST, 0, 0, params->BackBufferWidth,
+                     params->BackBufferHeight,
+                     SWP_FRAMECHANGED | SWP_SHOWWINDOW | SWP_NOACTIVATE);
+        This->drop_wnd_messages = drop_wnd_messages;
+    }
+
+    This->params = *params;
+    return D3D_OK;
+}
+
+static HRESULT
+DRI3Present_new( Display *gdi_display,
+                 const WCHAR *devname,
+                 D3DPRESENT_PARAMETERS *params,
+                 HWND focus_wnd,
+                 struct DRI3Present **out,
+                 boolean ex,
+                 boolean no_window_changes )
+{
+    struct DRI3Present *This;
+
+    if (!focus_wnd) { focus_wnd = params->hDeviceWindow; }
+    if (!focus_wnd) {
+        ERR("No focus HWND specified for presentation backend.\n");
+        return D3DERR_INVALIDCALL;
+    }
+
+    This = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                     sizeof(struct DRI3Present));
+    if (!This) {
+        ERR("Out of memory.\n");
+        return E_OUTOFMEMORY;
+    }
+
+    This->gdi_display = gdi_display;
+    This->vtable = &DRI3Present_vtable;
+    This->refs = 1;
+    This->focus_wnd = focus_wnd;
+    This->params.Windowed = TRUE;
+    This->ex = ex;
+    This->no_window_changes = no_window_changes;
+
+    strcpyW(This->devname, devname);
+
+    ZeroMemory(&(This->initial_mode), sizeof(This->initial_mode));
+    This->initial_mode.dmSize = sizeof(This->initial_mode);
+
+    EnumDisplaySettingsExW(This->devname, ENUM_CURRENT_SETTINGS, &(This->initial_mode), 0);
+
+    PRESENTInit(gdi_display, &(This->present_priv));
+#ifdef D3DADAPTER9_DRI2
+    if (is_dri2_fallback)
+        DRI2FallbackInit(gdi_display, &(This->dri2_priv));
+#endif
+    *out = This;
+
+    return D3D_OK;
+}
+
+struct DRI3PresentGroup
+{
+    /* COM vtable */
+    void *vtable;
+    /* IUnknown reference count */
+    LONG refs;
+
+    struct DRI3Present **present_backends;
+    unsigned npresent_backends;
+    Display *gdi_display;
+    boolean ex;
+    boolean no_window_changes;
+};
+
+static ULONG WINAPI
+DRI3PresentGroup_AddRef( struct DRI3PresentGroup *This )
+{
+    ULONG refs = InterlockedIncrement(&This->refs);
+    TRACE("%p increasing refcount to %u.\n", This, refs);
+    return refs;
+}
+
+static ULONG WINAPI
+DRI3PresentGroup_Release( struct DRI3PresentGroup *This )
+{
+    ULONG refs = InterlockedDecrement(&This->refs);
+    TRACE("%p decreasing refcount to %u.\n", This, refs);
+    if (refs == 0) {
+        unsigned i;
+        if (This->present_backends) {
+            for (i = 0; i < This->npresent_backends; ++i) {
+                if (This->present_backends[i])
+                    DRI3Present_Release(This->present_backends[i]);
+            }
+            HeapFree(GetProcessHeap(), 0, This->present_backends);
+        }
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+    return refs;
+}
+
+static HRESULT WINAPI
+DRI3PresentGroup_QueryInterface( struct DRI3PresentGroup *This,
+                                 REFIID riid,
+                                 void **ppvObject )
+{
+    if (!ppvObject) { return E_POINTER; }
+    if (IsEqualGUID(&IID_ID3DPresentGroup, riid) ||
+        IsEqualGUID(&IID_IUnknown, riid)) {
+        *ppvObject = This;
+        DRI3PresentGroup_AddRef(This);
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+    *ppvObject = NULL;
+
+    return E_NOINTERFACE;
+}
+
+static UINT WINAPI
+DRI3PresentGroup_GetMultiheadCount( struct DRI3PresentGroup *This )
+{
+    FIXME("(%p), stub!\n", This);
+    return 1;
+}
+
+static HRESULT WINAPI
+DRI3PresentGroup_GetPresent( struct DRI3PresentGroup *This,
+                             UINT Index,
+                             ID3DPresent **ppPresent )
+{
+    if (Index >= DRI3PresentGroup_GetMultiheadCount(This)) {
+        ERR("Index >= MultiHeadCount\n");
+        return D3DERR_INVALIDCALL;
+    }
+    DRI3Present_AddRef(This->present_backends[Index]);
+    *ppPresent = (ID3DPresent *)This->present_backends[Index];
+
+    return D3D_OK;
+}
+
+static HRESULT WINAPI
+DRI3PresentGroup_CreateAdditionalPresent( struct DRI3PresentGroup *This,
+                                          D3DPRESENT_PARAMETERS *pPresentationParameters,
+                                          ID3DPresent **ppPresent )
+{
+    HRESULT hr;
+    hr = DRI3Present_new(This->gdi_display, This->present_backends[0]->devname,
+                         pPresentationParameters, 0, (struct DRI3Present **)ppPresent,
+                         This->ex, This->no_window_changes);
+    return hr;
+}
+
+static void WINAPI
+DRI3PresentGroup_GetVersion( struct DRI3PresentGroup *This,
+                             int *major,
+                             int *minor)
+{
+    *major = WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MAJOR;
+    *minor = WINE_D3DADAPTER_DRIVER_PRESENT_VERSION_MINOR;
+}
+
+static ID3DPresentGroupVtbl DRI3PresentGroup_vtable = {
+    (void *)DRI3PresentGroup_QueryInterface,
+    (void *)DRI3PresentGroup_AddRef,
+    (void *)DRI3PresentGroup_Release,
+    (void *)DRI3PresentGroup_GetMultiheadCount,
+    (void *)DRI3PresentGroup_GetPresent,
+    (void *)DRI3PresentGroup_CreateAdditionalPresent,
+    (void *)DRI3PresentGroup_GetVersion
+};
+
+HRESULT
+present_create_present_group( Display *gdi_display,
+                           const WCHAR *device_name,
+                           UINT adapter,
+                           HWND focus_wnd,
+                           D3DPRESENT_PARAMETERS *params,
+                           unsigned nparams,
+                           ID3DPresentGroup **group,
+                           boolean ex,
+                           boolean no_window_changes )
+{
+    struct DRI3PresentGroup *This =
+        HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                  sizeof(struct DRI3PresentGroup));
+    DISPLAY_DEVICEW dd;
+    HRESULT hr;
+    unsigned i;
+
+    if (!This) {
+        ERR("Out of memory.\n");
+        return E_OUTOFMEMORY;
+    }
+
+    This->gdi_display = gdi_display;
+    This->vtable = &DRI3PresentGroup_vtable;
+    This->refs = 1;
+    This->ex = ex;
+    This->no_window_changes = no_window_changes;
+    This->npresent_backends = nparams;
+    This->present_backends = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
+                                       This->npresent_backends *
+                                       sizeof(struct DRI3Present *));
+    if (!This->present_backends) {
+        DRI3PresentGroup_Release(This);
+        ERR("Out of memory.\n");
+        return E_OUTOFMEMORY;
+    }
+
+    if (nparams != 1) { adapter = 0; }
+    for (i = 0; i < This->npresent_backends; ++i) {
+        ZeroMemory(&dd, sizeof(dd));
+        dd.cb = sizeof(dd);
+        /* find final device name */
+        if (!EnumDisplayDevicesW(device_name, adapter+i, &dd, 0)) {
+            WARN("Couldn't find subdevice %d from `%s'\n",
+                 i, debugstr_w(device_name));
+        }
+
+        /* create an ID3DPresent for it */
+        hr = DRI3Present_new(gdi_display, dd.DeviceName, &params[i],
+                             focus_wnd, &This->present_backends[i],
+                             This->ex, This->no_window_changes);
+        if (FAILED(hr)) {
+            DRI3PresentGroup_Release(This);
+            return hr;
+        }
+    }
+
+    *group = (ID3DPresentGroup *)This;
+    TRACE("Returning %p\n", *group);
+
+    return D3D_OK;
+}
+
+HRESULT
+present_create_adapter9( Display *gdi_display,
+                      HDC hdc,
+                      ID3DAdapter9 **out )
+{
+    struct x11drv_escape_get_drawable extesc = { X11DRV_GET_DRAWABLE };
+    HRESULT hr;
+    int fd;
+
+    if (!d3d9_drm) {
+        ERR("DRM drivers are not supported on your system.\n");
+        return D3DERR_DRIVERINTERNALERROR;
+    }
+
+    if (ExtEscape(hdc, X11DRV_ESCAPE, sizeof(extesc), (LPCSTR)&extesc,
+                  sizeof(extesc), (LPSTR)&extesc) <= 0) {
+        ERR("X11 drawable lookup failed (hdc=%p)\n", hdc);
+    }
+
+#ifdef D3DADAPTER9_DRI2
+    if (!is_dri2_fallback && !DRI3Open(gdi_display, DefaultScreen(gdi_display), &fd)) {
+#else
+    if (!DRI3Open(gdi_display, DefaultScreen(gdi_display), &fd)) {
+#endif
+        ERR("DRI3Open failed (fd=%d)\n", fd);
+        return D3DERR_DRIVERINTERNALERROR;
+    }
+#ifdef D3DADAPTER9_DRI2
+    if (is_dri2_fallback && !DRI2FallbackOpen(gdi_display, DefaultScreen(gdi_display), &fd)) {
+        ERR("DRI2Open failed (fd=%d)\n", fd);
+        return D3DERR_DRIVERINTERNALERROR;
+    }
+#endif
+    hr = d3d9_drm->create_adapter(fd, out);
+    if (FAILED(hr)) {
+        ERR("Unable to create ID3DAdapter9 (fd=%d)\n", fd);
+        return hr;
+    }
+
+    TRACE("Created ID3DAdapter9 with fd %d\n", fd);
+
+    return D3D_OK;
+}
+
+BOOL
+has_d3dadapter( Display *gdi_display )
+{
+    static const void * WINAPI (*pD3DAdapter9GetProc)(const char *);
+    static void *handle = NULL;
+    static int done = 0;
+
+    char errbuf[256];
+
+#if !defined(SONAME_D3DADAPTER9)
+    return FALSE;
+#endif
+
+    /* like in opengl.c (single threaded assumption OK?) */
+    if (done) { return handle != NULL; }
+    done = 1;
+
+    handle = wine_dlopen(D3D_MODULE_DIR "/" SONAME_D3DADAPTER9,
+                         RTLD_GLOBAL | RTLD_NOW, errbuf, sizeof(errbuf));
+    if (!handle) {
+        ERR("Failed to load %s: %s\n", SONAME_D3DADAPTER9, errbuf);
+        goto cleanup;
+    }
+
+    /* find our entry point in d3dadapter9 */
+    pD3DAdapter9GetProc = wine_dlsym(handle, "D3DAdapter9GetProc",
+                                     errbuf, sizeof(errbuf));
+    if (!pD3DAdapter9GetProc) {
+        ERR("Failed to get the entry point from %s: %s",
+            SONAME_D3DADAPTER9, errbuf);
+        goto cleanup;
+    }
+
+    /* get a handle to the drm backend struct */
+    d3d9_drm = pD3DAdapter9GetProc(D3DADAPTER9DRM_NAME);
+    if (!d3d9_drm) {
+        ERR("%s doesn't support the `%s' backend.\n",
+            SONAME_D3DADAPTER9, D3DADAPTER9DRM_NAME);
+        goto cleanup;
+    }
+
+    /* verify that we're binary compatible */
+    if (d3d9_drm->major_version != D3DADAPTER9DRM_MAJOR) {
+        ERR("Version mismatch. %s has %d.%d, was expecting %d.x\n",
+            SONAME_D3DADAPTER9, d3d9_drm->major_version,
+            d3d9_drm->minor_version, D3DADAPTER9DRM_MAJOR);
+        goto cleanup;
+    }
+
+    /* this will be used to store d3d_drawables */
+    d3d_hwnd_context = XUniqueContext();
+
+    if (!PRESENTCheckExtension(gdi_display, 1, 0)) {
+        ERR("Unable to query PRESENT.\n");
+        goto cleanup;
+    }
+
+    if (!DRI3CheckExtension(gdi_display, 1, 0)) {
+#ifndef D3DADAPTER9_DRI2
+        ERR("Unable to query DRI3.\n");
+        goto cleanup;
+#else
+        ERR("Unable to query DRI3. Trying DRI2 fallback (slower performance).\n");
+        is_dri2_fallback = 1;
+        if (!DRI2FallbackCheckSupport(gdi_display)) {
+            ERR("DRI2 fallback unsupported\n");
+            goto cleanup;
+        }
+#endif
+    }
+
+    return TRUE;
+
+cleanup:
+    ERR("\033[1;31m\nNative Direct3D 9 will be unavailable."
+        "\nFor more information visit https://wiki.ixit.cz/d3d9\033[0m\n");
+    if (handle) {
+        wine_dlclose(handle, NULL, 0);
+        handle = NULL;
+    }
+
+    return FALSE;
+}
+
+BOOL
+enable_device_vtable_wrapper()
+{
+    if (!d3d9_drm) {
+        ERR("enable_device_vtable_wrapper call before init.\n");
+        return FALSE;
+    }
+    /* Since minor version 1, we can assume a copy of the internal vtable is stored in second pos.
+     * For now always enable if possible the wrapper (enables Steam overlay for example),
+     * we might in the future let user choose. */
+    return d3d9_drm->minor_version >= 1;
+}
diff --git a/dlls/d3d9-nine/present.h b/dlls/d3d9-nine/present.h
new file mode 100644
index 0000000..7d95dc0
--- /dev/null
+++ b/dlls/d3d9-nine/present.h
@@ -0,0 +1,38 @@
+/*
+ * Wine present interface
+ *
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __WINE_PRESENT_H
+#define __WINE_PRESENT_H
+
+#ifndef __WINE_CONFIG_H
+# error You must include config.h to use this header
+#endif
+
+#include <X11/Xlib.h>
+
+HRESULT present_create_present_group(Display *gdi_display, const WCHAR *device_name, UINT adapter, HWND focus, D3DPRESENT_PARAMETERS *params, unsigned nparams, ID3DPresentGroup **group, boolean ex, boolean no_window_changes);
+
+HRESULT present_create_adapter9(Display *gdi_display, HDC hdc, ID3DAdapter9 **adapter);
+
+BOOL has_d3dadapter(Display *gdi_display);
+
+BOOL enable_device_vtable_wrapper(void);
+
+#endif /* __WINE_DRI3_H */
diff --git a/dlls/d3d9-nine/version.rc b/dlls/d3d9-nine/version.rc
new file mode 100644
index 0000000..bfafc2f
--- /dev/null
+++ b/dlls/d3d9-nine/version.rc
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015 Patrick Rudolph
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#define WINE_FILEDESCRIPTION_STR "Wine Gallium Nine Direct3D"
+#define WINE_FILENAME_STR "d3d9-nine.dll"
+#define WINE_FILEVERSION 5,3,1,904
+#define WINE_FILEVERSION_STR "5.3.1.904"
+#define WINE_PRODUCTVERSION 5,3,1,904
+#define WINE_PRODUCTVERSION_STR "5.3.1.904"
+
+#include "wine/wine_common_ver.rc"
diff --git a/dlls/d3d9-nine/wndproc.c b/dlls/d3d9-nine/wndproc.c
new file mode 100644
index 0000000..c260b2b
--- /dev/null
+++ b/dlls/d3d9-nine/wndproc.c
@@ -0,0 +1,277 @@
+/*
+ * Copyright 2016 Patrick Rudolph
+ *
+ * Based on the file wined3d_main.c taken from wined3d:
+ * All credits go to the original developers:
+ *
+ * Copyright 2002-2003 The wine-d3d team
+ * Copyright 2002-2003 Raphael Junqueira
+ * Copyright 2004      Jason Edmeades
+ * Copyright 2007-2008 Stefan Dösinger for CodeWeavers
+ * Copyright 2009 Henri Verbeet for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+#include "wine/port.h"
+
+#include <stdarg.h>
+#include <math.h>
+#include <limits.h>
+#define NONAMELESSUNION
+#define NONAMELESSSTRUCT
+#define COBJMACROS
+#include "windef.h"
+#include "winbase.h"
+#include "winreg.h"
+#include "wingdi.h"
+#include "winuser.h"
+#include "wine/debug.h"
+#include "wine/unicode.h"
+
+#include "wndproc.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dadapter);
+
+struct nine_wndproc
+{
+    HWND window;
+    BOOL unicode;
+    WNDPROC proc;
+    struct DRI3Present *present;
+};
+
+struct nine_wndproc_table
+{
+    struct nine_wndproc *entries;
+    unsigned int count;
+    unsigned int size;
+};
+
+static struct nine_wndproc_table wndproc_table;
+
+static CRITICAL_SECTION wined3d_wndproc_cs;
+static CRITICAL_SECTION_DEBUG wined3d_wndproc_cs_debug =
+{
+    0, 0, &wined3d_wndproc_cs,
+    {&wined3d_wndproc_cs_debug.ProcessLocksList,
+    &wined3d_wndproc_cs_debug.ProcessLocksList},
+    0, 0, {(DWORD_PTR)(__FILE__ ": wined3d_wndproc_cs")}
+};
+static CRITICAL_SECTION wined3d_wndproc_cs = {&wined3d_wndproc_cs_debug, -1, 0, 0, 0, 0};
+
+BOOL nine_dll_init(HINSTANCE hInstDLL)
+{
+    WNDCLASSA wc;
+
+    /* We need our own window class for a fake window which we use to retrieve GL capabilities */
+    /* We might need CS_OWNDC in the future if we notice strange things on Windows.
+     * Various articles/posts about OpenGL problems on Windows recommend this. */
+    wc.style                = CS_HREDRAW | CS_VREDRAW;
+    wc.lpfnWndProc          = DefWindowProcA;
+    wc.cbClsExtra           = 0;
+    wc.cbWndExtra           = 0;
+    wc.hInstance            = hInstDLL;
+    wc.hIcon                = LoadIconA(NULL, (const char *)IDI_WINLOGO);
+    wc.hCursor              = LoadCursorA(NULL, (const char *)IDC_ARROW);
+    wc.hbrBackground        = NULL;
+    wc.lpszMenuName         = NULL;
+    wc.lpszClassName        = NINE_WINDOW_CLASS_NAME;
+
+    if (!RegisterClassA(&wc))
+    {
+        ERR("Failed to register window class '%s'!\n", NINE_WINDOW_CLASS_NAME);
+        return FALSE;
+    }
+
+    DisableThreadLibraryCalls(hInstDLL);
+
+    return TRUE;
+}
+
+BOOL nine_dll_destroy(HINSTANCE hInstDLL)
+{
+    unsigned int i;
+
+    for (i = 0; i < wndproc_table.count; ++i)
+    {
+        /* Trying to unregister these would be futile. These entries can only
+         * exist if either we skipped them in wined3d_unregister_window() due
+         * to the application replacing the wndproc after the entry was
+         * registered, or if the application still has an active wined3d
+         * device. In the latter case the application has bigger problems than
+         * these entries. */
+        WARN("Leftover wndproc table entry %p.\n", &wndproc_table.entries[i]);
+    }
+    HeapFree(GetProcessHeap(), 0, wndproc_table.entries);
+
+    UnregisterClassA(NINE_WINDOW_CLASS_NAME, hInstDLL);
+
+    DeleteCriticalSection(&wined3d_wndproc_cs);
+    return TRUE;
+}
+
+static void nine_wndproc_mutex_lock(void)
+{
+    EnterCriticalSection(&wined3d_wndproc_cs);
+}
+
+static void nine_wndproc_mutex_unlock(void)
+{
+    LeaveCriticalSection(&wined3d_wndproc_cs);
+}
+
+static struct nine_wndproc *nine_find_wndproc(HWND window)
+{
+    unsigned int i;
+
+    for (i = 0; i < wndproc_table.count; ++i)
+    {
+        if (wndproc_table.entries[i].window == window)
+        {
+            return &wndproc_table.entries[i];
+        }
+    }
+
+    return NULL;
+}
+
+static LRESULT CALLBACK nine_wndproc(HWND window, UINT message, WPARAM wparam, LPARAM lparam)
+{
+    struct nine_wndproc *entry;
+    struct DRI3Present *present;
+    BOOL unicode;
+    WNDPROC proc;
+
+    nine_wndproc_mutex_lock();
+    entry = nine_find_wndproc(window);
+
+    if (!entry)
+    {
+        nine_wndproc_mutex_unlock();
+        ERR("Window %p is not registered with wined3d.\n", window);
+        return DefWindowProcW(window, message, wparam, lparam);
+    }
+
+    present = entry->present;
+    unicode = entry->unicode;
+    proc = entry->proc;
+    nine_wndproc_mutex_unlock();
+
+    if (present)
+        return device_process_message(present, window, unicode, message, wparam, lparam, proc);
+    if (unicode)
+        return CallWindowProcW(proc, window, message, wparam, lparam);
+    return CallWindowProcA(proc, window, message, wparam, lparam);
+}
+
+BOOL nine_register_window(HWND window, struct DRI3Present *present)
+{
+    struct nine_wndproc *entry;
+
+    nine_wndproc_mutex_lock();
+
+    if (nine_find_wndproc(window))
+    {
+        nine_wndproc_mutex_unlock();
+        WARN("Window %p is already registered with wined3d.\n", window);
+        return TRUE;
+    }
+
+    if (wndproc_table.size == wndproc_table.count)
+    {
+        unsigned int new_size = max(1, wndproc_table.size * 2);
+        struct nine_wndproc *new_entries;
+
+        if (!wndproc_table.entries) new_entries = HeapAlloc(GetProcessHeap(), 0, new_size * sizeof(*new_entries));
+        else new_entries = HeapReAlloc(GetProcessHeap(), 0, wndproc_table.entries, new_size * sizeof(*new_entries));
+
+        if (!new_entries)
+        {
+            nine_wndproc_mutex_unlock();
+            ERR("Failed to grow table.\n");
+            return FALSE;
+        }
+
+        wndproc_table.entries = new_entries;
+        wndproc_table.size = new_size;
+    }
+
+    entry = &wndproc_table.entries[wndproc_table.count++];
+    entry->window = window;
+    entry->unicode = IsWindowUnicode(window);
+    /* Set a window proc that matches the window. Some applications (e.g. NoX)
+     * replace the window proc after we've set ours, and expect to be able to
+     * call the previous one (ours) directly, without using CallWindowProc(). */
+    if (entry->unicode)
+        entry->proc = (WNDPROC)SetWindowLongPtrW(window, GWLP_WNDPROC, (LONG_PTR)nine_wndproc);
+    else
+        entry->proc = (WNDPROC)SetWindowLongPtrA(window, GWLP_WNDPROC, (LONG_PTR)nine_wndproc);
+    entry->present = present;
+
+    nine_wndproc_mutex_unlock();
+
+    return TRUE;
+}
+
+BOOL nine_unregister_window(HWND window)
+{
+    struct nine_wndproc *entry, *last;
+    LONG_PTR proc;
+
+    nine_wndproc_mutex_lock();
+
+    if (!(entry = nine_find_wndproc(window)))
+    {
+        nine_wndproc_mutex_unlock();
+        return FALSE;
+    }
+
+    if (entry->unicode)
+    {
+        proc = GetWindowLongPtrW(window, GWLP_WNDPROC);
+        if (proc != (LONG_PTR)nine_wndproc)
+        {
+            entry->present = NULL;
+            nine_wndproc_mutex_unlock();
+            WARN("Not unregistering window %p, window proc %#lx doesn't match wined3d window proc %p.\n",
+                    window, proc, nine_wndproc);
+            return FALSE;
+        }
+
+        SetWindowLongPtrW(window, GWLP_WNDPROC, (LONG_PTR)entry->proc);
+    }
+    else
+    {
+        proc = GetWindowLongPtrA(window, GWLP_WNDPROC);
+        if (proc != (LONG_PTR)nine_wndproc)
+        {
+            entry->present = NULL;
+            nine_wndproc_mutex_unlock();
+            WARN("Not unregistering window %p, window proc %#lx doesn't match wined3d window proc %p.\n",
+                    window, proc, nine_wndproc);
+            return FALSE;
+        }
+
+        SetWindowLongPtrA(window, GWLP_WNDPROC, (LONG_PTR)entry->proc);
+    }
+
+    last = &wndproc_table.entries[--wndproc_table.count];
+    if (entry != last) *entry = *last;
+
+    nine_wndproc_mutex_unlock();
+    return TRUE;
+}
diff --git a/dlls/d3d9-nine/wndproc.h b/dlls/d3d9-nine/wndproc.h
new file mode 100644
index 0000000..15f26d4
--- /dev/null
+++ b/dlls/d3d9-nine/wndproc.h
@@ -0,0 +1,41 @@
+/*
+ * Direct3D wine internal interface main
+ *
+ * Copyright 2002-2003 The wine-d3d team
+ * Copyright 2002-2003 Raphael Junqueira
+ * Copyright 2004      Jason Edmeades
+ * Copyright 2007-2008 Stefan Dösinger for CodeWeavers
+ * Copyright 2009 Henri Verbeet for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __WINE_NINE_WNDPROC_H
+#define __WINE_NINE_WNDPROC_H
+
+struct DRI3Present;
+
+BOOL nine_register_window(HWND window, struct DRI3Present *present);
+BOOL nine_unregister_window(HWND window);
+
+BOOL nine_dll_init(HINSTANCE hInstDLL);
+BOOL nine_dll_destroy(HINSTANCE hInstDLL);
+
+LRESULT device_process_message(struct DRI3Present *present, HWND window, BOOL unicode,
+        UINT message, WPARAM wparam, LPARAM lparam, WNDPROC proc);
+
+#define NINE_WINDOW_CLASS_NAME "Gallium_Nine_Window"
+
+#endif
diff --git a/dlls/d3d9/Makefile.in b/dlls/d3d9/Makefile.in
index 1c05f5a..dc06d68 100644
--- a/dlls/d3d9/Makefile.in
+++ b/dlls/d3d9/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = d3d9.dll
 IMPORTLIB = d3d9
-IMPORTS   = dxguid uuid wined3d
+IMPORTS   = dxguid uuid advapi32 wined3d
 
 C_SRCS = \
 	buffer.c \
diff --git a/dlls/winex11.drv/init.c b/dlls/winex11.drv/init.c
index 3af1b78..f9abc9b 100644
--- a/dlls/winex11.drv/init.c
+++ b/dlls/winex11.drv/init.c
@@ -365,6 +365,7 @@ static INT X11DRV_ExtEscape( PHYSDEV dev, INT escape, INT in_count, LPCVOID in_d
                 {
                     struct x11drv_escape_get_drawable *data = out_data;
                     data->drawable = physDev->drawable;
+                    data->dc_rect = physDev->dc_rect;
                     return TRUE;
                 }
                 break;
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 98267c9..aabf1b1 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -296,6 +296,7 @@ struct x11drv_escape_get_drawable
     Drawable                 drawable;     /* X drawable */
     Drawable                 gl_drawable;  /* GL drawable */
     int                      pixel_format; /* internal GL pixel format */
+    RECT                     dc_rect;      /* DC rectangle relative to drawable */
 };
 
 struct x11drv_escape_flush_gl_drawable
diff --git a/include/config.h.in b/include/config.h.in
index 8451ec8..d795ca6 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -4,6 +4,12 @@
 #define __WINE_CONFIG_H
 #ifndef WINE_CROSSTEST
 
+/* Whether d3dadapter9 DRI2 fallback is compiled */
+#undef D3DADAPTER9_DRI2
+
+/* "module dir" */
+#undef D3D_MODULE_DIR
+
 /* Define to a function attribute for Microsoft hotpatch assembly prefix. */
 #undef DECLSPEC_HOTPATCH
 
@@ -1394,6 +1400,9 @@
 /* Define to the soname of the libcairo library. */
 #undef SONAME_LIBCAIRO
 
+/* "temporary hack" */
+#undef SONAME_D3DADAPTER9
+
 /* Define to the soname of the libcapi20 library. */
 #undef SONAME_LIBCAPI20
 
@@ -1406,6 +1415,9 @@
 /* Define to the soname of the libdbus-1 library. */
 #undef SONAME_LIBDBUS_1
 
+/* Define to the soname of the libEGL library. */
+#undef SONAME_LIBEGL
+
 /* Define to the soname of the libfontconfig library. */
 #undef SONAME_LIBFONTCONFIG
 
-- 
2.9.0

